
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^0(%arg0 : !tt.ptr<f32>, %arg1 : !tt.ptr<f32>, %arg2 : i32):
    %0 = "arith.constant"() <{value = 2 : i32}> : () -> i32
    %1 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32>
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32>
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32>
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32>
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32>
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1>
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>>
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>>
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32>
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32>
    %14 = "arith.mulf"(%13, %1) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32>
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32>
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32>
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32>
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32>
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32>
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32>
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32>
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32>
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32>
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32>
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1>
    %26 = "arith.muli"(%arg2, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32>
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1>
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32>
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32>
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1>
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1>
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>>
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>>
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> ()
    "tt.return"() : () -> ()
  }) {noinline = false} : () -> ()
