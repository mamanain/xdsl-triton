// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20 : tensor<2x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc8)
    %c1_i32 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc9)
    %cst_5 = arith.constant dense<1> : tensor<2xi32> loc(#loc9)
    %23 = arith.extsi %22 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %24 = arith.extsi %cst_5 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %25 = arith.addi %23, %24 : tensor<2xi64> loc(#loc9)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_8 = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc9)
    %26 = arith.cmpi sle, %25, %cst_8 : tensor<2xi64> loc(#loc9)
    %cst_9 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc9)
    %27 = arith.cmpi sge, %25, %cst_9 : tensor<2xi64> loc(#loc9)
    %28 = arith.andi %26, %27 : tensor<2xi1> loc(#loc9)
    %29 = arith.addi %22, %cst_5 : tensor<2xi32> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %30 = arith.sitofp %c0_i32 : i32 to f32 loc(#loc10)
    %31 = tt.splat %30 : f32 -> tensor<2xf32> loc(#loc10)
    %32 = arith.cmpf oeq, %21, %31 : tensor<2xf32> loc(#loc10)
    %c0_i32_10 = arith.constant 0 : i32 loc(#loc11)
    %c0_i32_11 = arith.constant 0 : i32 loc(#loc11)
    %cst_12 = arith.constant dense<0> : tensor<2xi32> loc(#loc11)
    %33 = arith.select %32, %cst_12, %29 : tensor<2xi1>, tensor<2xi32> loc(#loc11)
    %c0_i32_13 = arith.constant 0 : i32 loc(#loc12)
    %34 = arith.sitofp %c0_i32_13 : i32 to f32 loc(#loc12)
    %35 = tt.splat %34 : f32 -> tensor<2xf32> loc(#loc12)
    %36 = arith.cmpf oeq, %21, %35 : tensor<2xf32> loc(#loc12)
    %c0_i32_14 = arith.constant 0 : i32 loc(#loc13)
    %cst_15 = arith.constant dense<0> : tensor<2xi32> loc(#loc13)
    %37 = arith.extsi %cst_15 : tensor<2xi32> to tensor<2xi64> loc(#loc13)
    %38 = arith.extsi %29 : tensor<2xi32> to tensor<2xi64> loc(#loc13)
    %39 = arith.subi %37, %38 : tensor<2xi64> loc(#loc13)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc13)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc13)
    %cst_18 = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc13)
    %40 = arith.cmpi sle, %39, %cst_18 : tensor<2xi64> loc(#loc13)
    %cst_19 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc13)
    %41 = arith.cmpi sge, %39, %cst_19 : tensor<2xi64> loc(#loc13)
    %42 = arith.andi %40, %41 : tensor<2xi1> loc(#loc13)
    %43 = arith.subi %cst_15, %29 : tensor<2xi32> loc(#loc13)
    %44 = tt.extern_elementwise %21, %43 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %c0_i32_20 = arith.constant 0 : i32 loc(#loc15)
    %cst_21 = arith.constant 0.000000e+00 : f32 loc(#loc15)
    %cst_22 = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc15)
    %45 = arith.select %36, %cst_22, %44 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %46 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %47 = tt.addptr %46, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %48 = arith.sitofp %33 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %47, %48, %18 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %49 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %50 = tt.addptr %49, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %50, %45, %18 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @frexp) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20 : tensor<2x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc8)
    %c1_i32 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc9)
    %cst_5 = arith.constant dense<1> : tensor<2xi32> loc(#loc9)
    %23 = arith.extsi %22 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %24 = arith.extsi %cst_5 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %25 = arith.addi %23, %24 : tensor<2xi64> loc(#loc9)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_8 = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc9)
    %26 = arith.cmpi sle, %25, %cst_8 : tensor<2xi64> loc(#loc9)
    %cst_9 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc9)
    %27 = arith.cmpi sge, %25, %cst_9 : tensor<2xi64> loc(#loc9)
    %28 = arith.andi %26, %27 : tensor<2xi1> loc(#loc9)
    %29 = arith.addi %22, %cst_5 : tensor<2xi32> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %30 = arith.sitofp %c0_i32 : i32 to f32 loc(#loc10)
    %31 = tt.splat %30 : f32 -> tensor<2xf32> loc(#loc10)
    %32 = arith.cmpf oeq, %21, %31 : tensor<2xf32> loc(#loc10)
    %c0_i32_10 = arith.constant 0 : i32 loc(#loc11)
    %c0_i32_11 = arith.constant 0 : i32 loc(#loc11)
    %cst_12 = arith.constant dense<0> : tensor<2xi32> loc(#loc11)
    %33 = arith.select %32, %cst_12, %29 : tensor<2xi1>, tensor<2xi32> loc(#loc11)
    %c0_i32_13 = arith.constant 0 : i32 loc(#loc12)
    %34 = arith.sitofp %c0_i32_13 : i32 to f32 loc(#loc12)
    %35 = tt.splat %34 : f32 -> tensor<2xf32> loc(#loc12)
    %36 = arith.cmpf oeq, %21, %35 : tensor<2xf32> loc(#loc12)
    %c0_i32_14 = arith.constant 0 : i32 loc(#loc13)
    %cst_15 = arith.constant dense<0> : tensor<2xi32> loc(#loc13)
    %37 = arith.extsi %cst_15 : tensor<2xi32> to tensor<2xi64> loc(#loc13)
    %38 = arith.extsi %29 : tensor<2xi32> to tensor<2xi64> loc(#loc13)
    %39 = arith.subi %37, %38 : tensor<2xi64> loc(#loc13)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc13)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc13)
    %cst_18 = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc13)
    %40 = arith.cmpi sle, %39, %cst_18 : tensor<2xi64> loc(#loc13)
    %cst_19 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc13)
    %41 = arith.cmpi sge, %39, %cst_19 : tensor<2xi64> loc(#loc13)
    %42 = arith.andi %40, %41 : tensor<2xi1> loc(#loc13)
    %43 = arith.subi %cst_15, %29 : tensor<2xi32> loc(#loc13)
    %44 = tt.extern_elementwise %21, %43 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %c0_i32_20 = arith.constant 0 : i32 loc(#loc15)
    %cst_21 = arith.constant 0.000000e+00 : f32 loc(#loc15)
    %cst_22 = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc15)
    %45 = arith.select %36, %cst_22, %44 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %46 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %47 = tt.addptr %46, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %48 = arith.sitofp %33 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %47, %48, %18 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %49 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %50 = tt.addptr %49, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %50, %45, %18 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc13)
    %15 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc14)
    %16 = tt.extern_elementwise %9, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc15)
    %17 = arith.select %14, %cst, %16 : tensor<2xi1>, tensor<2xf32> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc17)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc17)
    %20 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc18)
    tt.store %19, %20, %6 : tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc19)
    %22 = tt.addptr %21, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc19)
    tt.store %22, %17, %6 : tensor<2x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc21 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc13)
    %15 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc14)
    %16 = tt.extern_elementwise %9, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc15)
    %17 = arith.select %14, %cst, %16 : tensor<2xi1>, tensor<2xf32> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc17)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc17)
    %20 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc18)
    tt.store %19, %20, %6 : tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc19)
    %22 = tt.addptr %21, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc19)
    tt.store %22, %17, %6 : tensor<2x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc21 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc13)
    %15 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc14)
    %16 = tt.extern_elementwise %9, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc15)
    %17 = arith.select %14, %cst, %16 : tensor<2xi1>, tensor<2xf32> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc17)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc17)
    %20 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc18)
    tt.store %19, %20, %6 : tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc19)
    %22 = tt.addptr %21, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc19)
    tt.store %22, %17, %6 : tensor<2x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc21 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc13)
    %15 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc14)
    %16 = tt.extern_elementwise %9, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc15)
    %17 = arith.select %14, %cst, %16 : tensor<2xi1>, tensor<2xf32> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc17)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc17)
    %20 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc18)
    tt.store %19, %20, %6 : tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc19)
    %22 = tt.addptr %21, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc19)
    tt.store %22, %17, %6 : tensor<2x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc21 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc13)
    %15 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc14)
    %16 = tt.extern_elementwise %9, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc15)
    %17 = arith.select %14, %cst, %16 : tensor<2xi1>, tensor<2xf32> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc17)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc17)
    %20 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc18)
    tt.store %19, %20, %6 : tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc19)
    %22 = tt.addptr %21, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc19)
    tt.store %22, %17, %6 : tensor<2x!tt.ptr<f32>> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:29)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc21 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32>) -> tensor<2xi32> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1>, tensor<2xi32> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32>, tensor<2xi32>) -> tensor<2xf32> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1>, tensor<2xf32> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32> to tensor<2xf32> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.load %9 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.extern_elementwise %10 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %12 = arith.addi %11, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %13 = arith.cmpf oeq, %10, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %14 = arith.select %13, %cst_0, %12 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %15 = arith.subi %cst_0, %12 : tensor<2xi32, #blocked> loc(#loc13)
    %16 = tt.extern_elementwise %10, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %17 = arith.select %13, %cst, %16 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %20 = arith.sitofp %14 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    %21 = ttg.convert_layout %19 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = ttg.convert_layout %20 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc17)
    %23 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc17)
    tt.store %21, %22, %23 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %25 = tt.addptr %24, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    %26 = ttg.convert_layout %25 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    %27 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc19)
    %28 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc19)
    tt.store %26, %27, %28 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.load %9 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.extern_elementwise %10 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %12 = arith.addi %11, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %13 = arith.cmpf oeq, %10, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %14 = arith.select %13, %cst_0, %12 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %15 = arith.subi %cst_0, %12 : tensor<2xi32, #blocked> loc(#loc13)
    %16 = tt.extern_elementwise %10, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %17 = arith.select %13, %cst, %16 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %20 = arith.sitofp %14 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    %21 = ttg.convert_layout %19 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = ttg.convert_layout %20 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc17)
    %23 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc17)
    tt.store %21, %22, %23 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %25 = tt.addptr %24, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    %26 = ttg.convert_layout %25 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    %27 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc19)
    %28 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc19)
    tt.store %26, %27, %28 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.load %9 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.extern_elementwise %10 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %12 = arith.addi %11, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %13 = arith.cmpf oeq, %10, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %14 = arith.select %13, %cst_0, %12 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %15 = arith.subi %cst_0, %12 : tensor<2xi32, #blocked> loc(#loc13)
    %16 = tt.extern_elementwise %10, %15 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %17 = arith.select %13, %cst, %16 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.addptr %18, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %20 = arith.sitofp %14 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    %21 = ttg.convert_layout %19 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = ttg.convert_layout %20 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc17)
    %23 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc17)
    tt.store %21, %22, %23 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %25 = tt.addptr %24, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    %26 = ttg.convert_layout %25 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    %27 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc19)
    %28 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc19)
    tt.store %26, %27, %28 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<2xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<2xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.extern_elementwise %9 {libname = "", libpath = "", pure = true, symbol = "__nv_ilogbf"} : (tensor<2xf32, #blocked>) -> tensor<2xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %cst_1 : tensor<2xi32, #blocked> loc(#loc10)
    %12 = arith.cmpf oeq, %9, %cst : tensor<2xf32, #blocked> loc(#loc11)
    %13 = arith.select %12, %cst_0, %11 : tensor<2xi1, #blocked>, tensor<2xi32, #blocked> loc(#loc12)
    %14 = arith.subi %cst_0, %11 : tensor<2xi32, #blocked> loc(#loc13)
    %15 = tt.extern_elementwise %9, %14 {libname = "", libpath = "", pure = true, symbol = "__nv_ldexpf"} : (tensor<2xf32, #blocked>, tensor<2xi32, #blocked>) -> tensor<2xf32, #blocked> loc(#loc14)
    %16 = arith.select %12, %cst, %15 : tensor<2xi1, #blocked>, tensor<2xf32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc16)
    %19 = arith.sitofp %13 : tensor<2xi32, #blocked> to tensor<2xf32, #blocked> loc(#loc17)
    tt.store %18, %19, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc18)
    tt.store %21, %16, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %1 = llvm.bitcast %0 : f32 to f32 loc(#loc3)
    %2 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc3)
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(f32)>  loc(#loc3)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %5 = llvm.bitcast %4 : i32 to i32 loc(#loc3)
    %6 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc3)
    %7 = llvm.insertvalue %5, %6[0] : !llvm.struct<(i32)>  loc(#loc3)
    %8 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %9 = llvm.bitcast %8 : i32 to i32 loc(#loc3)
    %10 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc3)
    %11 = llvm.insertvalue %9, %10[0] : !llvm.struct<(i32)>  loc(#loc3)
    %12 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %13 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %14 = llvm.mul %13, %12 : i32 loc(#loc5)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc6)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %17 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %18 = llvm.urem %16, %17 : i32 loc(#loc6)
    %19 = llvm.udiv %16, %17 : i32 loc(#loc6)
    %20 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %21 = nvgpu.cluster_id loc(#loc6)
    %22 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %23 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %24 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %25 = llvm.and %18, %24 : i32 loc(#loc6)
    %26 = llvm.icmp "eq" %25, %23 : i32 loc(#loc6)
    %27 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %28 = llvm.select %26, %23, %27 : i1, i32 loc(#loc6)
    %29 = llvm.xor %23, %28 : i32 loc(#loc6)
    %30 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %31 = llvm.and %18, %30 : i32 loc(#loc6)
    %32 = llvm.icmp "eq" %31, %23 : i32 loc(#loc6)
    %33 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %34 = llvm.and %18, %33 : i32 loc(#loc6)
    %35 = llvm.icmp "eq" %34, %23 : i32 loc(#loc6)
    %36 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %37 = llvm.and %18, %36 : i32 loc(#loc6)
    %38 = llvm.icmp "eq" %37, %23 : i32 loc(#loc6)
    %39 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %40 = llvm.and %18, %39 : i32 loc(#loc6)
    %41 = llvm.icmp "eq" %40, %23 : i32 loc(#loc6)
    %42 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %43 = llvm.and %19, %42 : i32 loc(#loc6)
    %44 = llvm.icmp "eq" %43, %23 : i32 loc(#loc6)
    %45 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %46 = llvm.and %19, %45 : i32 loc(#loc6)
    %47 = llvm.icmp "eq" %46, %23 : i32 loc(#loc6)
    %48 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %49 = llvm.xor %29, %48 : i32 loc(#loc6)
    %50 = llvm.add %49, %15 : i32 loc(#loc6)
    %51 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %52 = llvm.insertvalue %50, %51[0] : !llvm.struct<(i32)>  loc(#loc6)
    %53 = llvm.bitcast %14 : i32 to i32 loc(#loc7)
    %54 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc7)
    %55 = llvm.insertvalue %53, %54[0] : !llvm.struct<(i32)>  loc(#loc7)
    %56 = llvm.extractvalue %55[0] : !llvm.struct<(i32)>  loc(#loc7)
    %57 = llvm.extractvalue %52[0] : !llvm.struct<(i32)>  loc(#loc7)
    %58 = llvm.add %56, %57 : i32 loc(#loc7)
    %59 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc7)
    %60 = llvm.insertvalue %58, %59[0] : !llvm.struct<(i32)>  loc(#loc7)
    %61 = llvm.bitcast %arg3 : i32 to i32 loc(#loc8)
    %62 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc8)
    %63 = llvm.insertvalue %61, %62[0] : !llvm.struct<(i32)>  loc(#loc8)
    %64 = llvm.extractvalue %60[0] : !llvm.struct<(i32)>  loc(#loc8)
    %65 = llvm.extractvalue %63[0] : !llvm.struct<(i32)>  loc(#loc8)
    %66 = llvm.icmp "slt" %64, %65 : i32 loc(#loc8)
    %67 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc8)
    %68 = llvm.insertvalue %66, %67[0] : !llvm.struct<(i1)>  loc(#loc8)
    %69 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc9)
    %70 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc9)
    %71 = llvm.insertvalue %69, %70[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %72 = llvm.extractvalue %71[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %73 = llvm.extractvalue %60[0] : !llvm.struct<(i32)>  loc(#loc9)
    %74 = llvm.getelementptr %72[%73] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %75 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc9)
    %76 = llvm.insertvalue %74, %75[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %77 = llvm.extractvalue %76[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %77 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %81 = llvm.extractelement %79[%80 : i32] : vector<1xf32> loc(#loc10)
    %82 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc10)
    %83 = llvm.insertvalue %81, %82[0] : !llvm.struct<(f32)>  loc(#loc10)
    %84 = llvm.extractvalue %83[0] : !llvm.struct<(f32)>  loc(#loc1)
    %85 = llvm.call @__nv_ilogbf(%84) : (f32) -> i32 loc(#loc1)
    %86 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc1)
    %87 = llvm.insertvalue %85, %86[0] : !llvm.struct<(i32)>  loc(#loc1)
    %88 = llvm.extractvalue %87[0] : !llvm.struct<(i32)>  loc(#loc11)
    %89 = llvm.extractvalue %11[0] : !llvm.struct<(i32)>  loc(#loc11)
    %90 = llvm.add %88, %89 : i32 loc(#loc11)
    %91 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc11)
    %92 = llvm.insertvalue %90, %91[0] : !llvm.struct<(i32)>  loc(#loc11)
    %93 = llvm.extractvalue %83[0] : !llvm.struct<(f32)>  loc(#loc12)
    %94 = llvm.extractvalue %3[0] : !llvm.struct<(f32)>  loc(#loc12)
    %95 = llvm.fcmp "oeq" %93, %94 : f32 loc(#loc12)
    %96 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc12)
    %97 = llvm.insertvalue %95, %96[0] : !llvm.struct<(i1)>  loc(#loc12)
    %98 = llvm.extractvalue %97[0] : !llvm.struct<(i1)>  loc(#loc13)
    %99 = llvm.extractvalue %7[0] : !llvm.struct<(i32)>  loc(#loc13)
    %100 = llvm.extractvalue %92[0] : !llvm.struct<(i32)>  loc(#loc13)
    %101 = llvm.select %98, %99, %100 : i1, i32 loc(#loc13)
    %102 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc13)
    %103 = llvm.insertvalue %101, %102[0] : !llvm.struct<(i32)>  loc(#loc13)
    %104 = llvm.extractvalue %7[0] : !llvm.struct<(i32)>  loc(#loc14)
    %105 = llvm.extractvalue %92[0] : !llvm.struct<(i32)>  loc(#loc14)
    %106 = llvm.sub %104, %105 : i32 loc(#loc14)
    %107 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc14)
    %108 = llvm.insertvalue %106, %107[0] : !llvm.struct<(i32)>  loc(#loc14)
    %109 = llvm.extractvalue %83[0] : !llvm.struct<(f32)>  loc(#loc2)
    %110 = llvm.extractvalue %108[0] : !llvm.struct<(i32)>  loc(#loc2)
    %111 = llvm.call @__nv_ldexpf(%109, %110) : (f32, i32) -> f32 loc(#loc2)
    %112 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc2)
    %113 = llvm.insertvalue %111, %112[0] : !llvm.struct<(f32)>  loc(#loc2)
    %114 = llvm.extractvalue %97[0] : !llvm.struct<(i1)>  loc(#loc15)
    %115 = llvm.extractvalue %3[0] : !llvm.struct<(f32)>  loc(#loc15)
    %116 = llvm.extractvalue %113[0] : !llvm.struct<(f32)>  loc(#loc15)
    %117 = llvm.select %114, %115, %116 : i1, f32 loc(#loc15)
    %118 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc15)
    %119 = llvm.insertvalue %117, %118[0] : !llvm.struct<(f32)>  loc(#loc15)
    %120 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc16)
    %121 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc16)
    %122 = llvm.insertvalue %120, %121[0] : !llvm.struct<(ptr<1>)>  loc(#loc16)
    %123 = llvm.extractvalue %122[0] : !llvm.struct<(ptr<1>)>  loc(#loc16)
    %124 = llvm.extractvalue %60[0] : !llvm.struct<(i32)>  loc(#loc16)
    %125 = llvm.getelementptr %123[%124] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %126 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc16)
    %127 = llvm.insertvalue %125, %126[0] : !llvm.struct<(ptr<1>)>  loc(#loc16)
    %128 = llvm.extractvalue %103[0] : !llvm.struct<(i32)>  loc(#loc17)
    %129 = llvm.sitofp %128 : i32 to f32 loc(#loc17)
    %130 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc17)
    %131 = llvm.insertvalue %129, %130[0] : !llvm.struct<(f32)>  loc(#loc17)
    %132 = llvm.extractvalue %127[0] : !llvm.struct<(ptr<1>)>  loc(#loc17)
    %133 = llvm.extractvalue %131[0] : !llvm.struct<(f32)>  loc(#loc17)
    %134 = llvm.extractvalue %68[0] : !llvm.struct<(i1)>  loc(#loc17)
    %135 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc17)
    %136 = llvm.mlir.constant(32 : i32) : i32 loc(#loc17)
    %137 = llvm.urem %135, %136 : i32 loc(#loc17)
    %138 = llvm.udiv %135, %136 : i32 loc(#loc17)
    %139 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %140 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %141 = llvm.mlir.constant(30 : i32) : i32 loc(#loc17)
    %142 = llvm.and %137, %141 : i32 loc(#loc17)
    %143 = llvm.icmp "eq" %142, %140 : i32 loc(#loc17)
    %144 = llvm.mlir.constant(3 : i32) : i32 loc(#loc17)
    %145 = llvm.and %138, %144 : i32 loc(#loc17)
    %146 = llvm.icmp "eq" %145, %140 : i32 loc(#loc17)
    %147 = llvm.and %143, %146 : i1 loc(#loc17)
    %148 = llvm.mlir.undef : vector<1xf32> loc(#loc17)
    %149 = llvm.bitcast %133 : f32 to f32 loc(#loc17)
    %150 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %151 = llvm.insertelement %149, %148[%150 : i32] : vector<1xf32> loc(#loc17)
    %152 = llvm.bitcast %151 : vector<1xf32> to i32 loc(#loc17)
    %153 = llvm.and %147, %134 : i1 loc(#loc17)
    %154 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %152, %132, %153 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %155 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc18)
    %156 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc18)
    %157 = llvm.insertvalue %155, %156[0] : !llvm.struct<(ptr<1>)>  loc(#loc18)
    %158 = llvm.extractvalue %157[0] : !llvm.struct<(ptr<1>)>  loc(#loc18)
    %159 = llvm.extractvalue %60[0] : !llvm.struct<(i32)>  loc(#loc18)
    %160 = llvm.getelementptr %158[%159] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %161 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc18)
    %162 = llvm.insertvalue %160, %161[0] : !llvm.struct<(ptr<1>)>  loc(#loc18)
    %163 = llvm.extractvalue %162[0] : !llvm.struct<(ptr<1>)>  loc(#loc19)
    %164 = llvm.extractvalue %119[0] : !llvm.struct<(f32)>  loc(#loc19)
    %165 = llvm.extractvalue %68[0] : !llvm.struct<(i1)>  loc(#loc19)
    %166 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc19)
    %167 = llvm.mlir.constant(32 : i32) : i32 loc(#loc19)
    %168 = llvm.urem %166, %167 : i32 loc(#loc19)
    %169 = llvm.udiv %166, %167 : i32 loc(#loc19)
    %170 = llvm.mlir.constant(0 : i32) : i32 loc(#loc19)
    %171 = llvm.mlir.constant(0 : i32) : i32 loc(#loc19)
    %172 = llvm.mlir.constant(30 : i32) : i32 loc(#loc19)
    %173 = llvm.and %168, %172 : i32 loc(#loc19)
    %174 = llvm.icmp "eq" %173, %171 : i32 loc(#loc19)
    %175 = llvm.mlir.constant(3 : i32) : i32 loc(#loc19)
    %176 = llvm.and %169, %175 : i32 loc(#loc19)
    %177 = llvm.icmp "eq" %176, %171 : i32 loc(#loc19)
    %178 = llvm.and %174, %177 : i1 loc(#loc19)
    %179 = llvm.mlir.undef : vector<1xf32> loc(#loc19)
    %180 = llvm.bitcast %164 : f32 to f32 loc(#loc19)
    %181 = llvm.mlir.constant(0 : i32) : i32 loc(#loc19)
    %182 = llvm.insertelement %180, %179[%181 : i32] : vector<1xf32> loc(#loc19)
    %183 = llvm.bitcast %182 : vector<1xf32> to i32 loc(#loc19)
    %184 = llvm.and %178, %165 : i1 loc(#loc19)
    %185 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %183, %163, %184 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc3)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc3)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %9 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %10 = llvm.mul %9, %5 : i32 loc(#loc5)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %12 = llvm.urem %11, %3 : i32 loc(#loc6)
    %13 = llvm.and %12, %6 : i32 loc(#loc6)
    %14 = llvm.icmp "eq" %13, %7 : i32 loc(#loc6)
    %15 = llvm.select %14, %7, %6 : i1, i32 loc(#loc6)
    %16 = llvm.xor %7, %15 : i32 loc(#loc6)
    %17 = llvm.xor %16, %7 : i32 loc(#loc6)
    %18 = llvm.add %17, %4 : i32 loc(#loc6)
    %19 = llvm.add %10, %18 : i32 loc(#loc7)
    %20 = llvm.icmp "slt" %19, %arg3 : i32 loc(#loc8)
    %21 = llvm.getelementptr %arg0[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %22 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %21 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %23 = llvm.bitcast %22 : i32 to vector<1xf32> loc(#loc10)
    %24 = llvm.extractelement %23[%4 : i32] : vector<1xf32> loc(#loc10)
    %25 = llvm.call @__nv_ilogbf(%24) : (f32) -> i32 loc(#loc1)
    %26 = llvm.add %25, %6 : i32 loc(#loc11)
    %27 = llvm.fcmp "oeq" %24, %8 : f32 loc(#loc12)
    %28 = llvm.select %27, %7, %26 : i1, i32 loc(#loc13)
    %29 = llvm.sub %7, %26 : i32 loc(#loc14)
    %30 = llvm.call @__nv_ldexpf(%24, %29) : (f32, i32) -> f32 loc(#loc2)
    %31 = llvm.select %27, %8, %30 : i1, f32 loc(#loc15)
    %32 = llvm.getelementptr %arg1[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %33 = llvm.sitofp %28 : i32 to f32 loc(#loc17)
    %34 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc17)
    %35 = llvm.urem %34, %3 : i32 loc(#loc17)
    %36 = llvm.udiv %34, %3 : i32 loc(#loc17)
    %37 = llvm.and %35, %2 : i32 loc(#loc17)
    %38 = llvm.icmp "eq" %37, %7 : i32 loc(#loc17)
    %39 = llvm.and %36, %1 : i32 loc(#loc17)
    %40 = llvm.icmp "eq" %39, %7 : i32 loc(#loc17)
    %41 = llvm.and %38, %40 : i1 loc(#loc17)
    %42 = llvm.insertelement %33, %0[%7 : i32] : vector<1xf32> loc(#loc17)
    %43 = llvm.bitcast %42 : vector<1xf32> to i32 loc(#loc17)
    %44 = llvm.and %41, %20 : i1 loc(#loc17)
    %45 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %43, %32, %44 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %46 = llvm.getelementptr %arg2[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %47 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc19)
    %48 = llvm.urem %47, %3 : i32 loc(#loc19)
    %49 = llvm.udiv %47, %3 : i32 loc(#loc19)
    %50 = llvm.and %48, %2 : i32 loc(#loc19)
    %51 = llvm.icmp "eq" %50, %7 : i32 loc(#loc19)
    %52 = llvm.and %49, %1 : i32 loc(#loc19)
    %53 = llvm.icmp "eq" %52, %7 : i32 loc(#loc19)
    %54 = llvm.and %51, %53 : i1 loc(#loc19)
    %55 = llvm.insertelement %31, %0[%7 : i32] : vector<1xf32> loc(#loc19)
    %56 = llvm.bitcast %55 : vector<1xf32> to i32 loc(#loc19)
    %57 = llvm.and %54, %20 : i1 loc(#loc19)
    %58 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %56, %46, %57 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc3)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc3)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %9 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %10 = llvm.mul %9, %5 : i32 loc(#loc5)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %12 = llvm.urem %11, %3 : i32 loc(#loc6)
    %13 = llvm.and %12, %6 : i32 loc(#loc6)
    %14 = llvm.icmp "eq" %13, %7 : i32 loc(#loc6)
    %15 = llvm.select %14, %7, %6 : i1, i32 loc(#loc6)
    %16 = llvm.xor %7, %15 : i32 loc(#loc6)
    %17 = llvm.xor %16, %7 : i32 loc(#loc6)
    %18 = llvm.add %17, %4 : i32 loc(#loc6)
    %19 = llvm.add %10, %18 : i32 loc(#loc7)
    %20 = llvm.icmp "slt" %19, %arg3 : i32 loc(#loc8)
    %21 = llvm.getelementptr %arg0[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %22 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %21 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %23 = llvm.bitcast %22 : i32 to vector<1xf32> loc(#loc10)
    %24 = llvm.extractelement %23[%4 : i32] : vector<1xf32> loc(#loc10)
    %25 = llvm.call @__nv_ilogbf(%24) : (f32) -> i32 loc(#loc1)
    %26 = llvm.add %25, %6 : i32 loc(#loc11)
    %27 = llvm.fcmp "oeq" %24, %8 : f32 loc(#loc12)
    %28 = llvm.select %27, %7, %26 : i1, i32 loc(#loc13)
    %29 = llvm.sub %7, %26 : i32 loc(#loc14)
    %30 = llvm.call @__nv_ldexpf(%24, %29) : (f32, i32) -> f32 loc(#loc2)
    %31 = llvm.select %27, %8, %30 : i1, f32 loc(#loc15)
    %32 = llvm.getelementptr %arg1[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %33 = llvm.sitofp %28 : i32 to f32 loc(#loc17)
    %34 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc17)
    %35 = llvm.urem %34, %3 : i32 loc(#loc17)
    %36 = llvm.udiv %34, %3 : i32 loc(#loc17)
    %37 = llvm.and %35, %2 : i32 loc(#loc17)
    %38 = llvm.icmp "eq" %37, %7 : i32 loc(#loc17)
    %39 = llvm.and %36, %1 : i32 loc(#loc17)
    %40 = llvm.icmp "eq" %39, %7 : i32 loc(#loc17)
    %41 = llvm.and %38, %40 : i1 loc(#loc17)
    %42 = llvm.insertelement %33, %0[%7 : i32] : vector<1xf32> loc(#loc17)
    %43 = llvm.bitcast %42 : vector<1xf32> to i32 loc(#loc17)
    %44 = llvm.and %41, %20 : i1 loc(#loc17)
    %45 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %43, %32, %44 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %46 = llvm.getelementptr %arg2[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %47 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc19)
    %48 = llvm.urem %47, %3 : i32 loc(#loc19)
    %49 = llvm.udiv %47, %3 : i32 loc(#loc19)
    %50 = llvm.and %48, %2 : i32 loc(#loc19)
    %51 = llvm.icmp "eq" %50, %7 : i32 loc(#loc19)
    %52 = llvm.and %49, %1 : i32 loc(#loc19)
    %53 = llvm.icmp "eq" %52, %7 : i32 loc(#loc19)
    %54 = llvm.and %51, %53 : i1 loc(#loc19)
    %55 = llvm.insertelement %31, %0[%7 : i32] : vector<1xf32> loc(#loc19)
    %56 = llvm.bitcast %55 : vector<1xf32> to i32 loc(#loc19)
    %57 = llvm.and %54, %20 : i1 loc(#loc19)
    %58 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %56, %46, %57 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc3)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc3)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %9 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %10 = llvm.mul %9, %5 : i32 loc(#loc5)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %12 = llvm.urem %11, %3 : i32 loc(#loc6)
    %13 = llvm.and %12, %6 : i32 loc(#loc6)
    %14 = llvm.icmp "eq" %13, %7 : i32 loc(#loc6)
    %15 = llvm.select %14, %7, %6 : i1, i32 loc(#loc6)
    %16 = llvm.xor %7, %15 : i32 loc(#loc6)
    %17 = llvm.xor %16, %7 : i32 loc(#loc6)
    %18 = llvm.add %17, %4 : i32 loc(#loc6)
    %19 = llvm.add %10, %18 : i32 loc(#loc7)
    %20 = llvm.icmp "slt" %19, %arg3 : i32 loc(#loc8)
    %21 = llvm.getelementptr %arg0[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %22 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %21 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %23 = llvm.bitcast %22 : i32 to vector<1xf32> loc(#loc10)
    %24 = llvm.extractelement %23[%4 : i32] : vector<1xf32> loc(#loc10)
    %25 = llvm.call @__nv_ilogbf(%24) : (f32) -> i32 loc(#loc1)
    %26 = llvm.add %25, %6 : i32 loc(#loc11)
    %27 = llvm.fcmp "oeq" %24, %8 : f32 loc(#loc12)
    %28 = llvm.select %27, %7, %26 : i1, i32 loc(#loc13)
    %29 = llvm.sub %7, %26 : i32 loc(#loc14)
    %30 = llvm.call @__nv_ldexpf(%24, %29) : (f32, i32) -> f32 loc(#loc2)
    %31 = llvm.select %27, %8, %30 : i1, f32 loc(#loc15)
    %32 = llvm.getelementptr %arg1[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %33 = llvm.sitofp %28 : i32 to f32 loc(#loc17)
    %34 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc17)
    %35 = llvm.urem %34, %3 : i32 loc(#loc17)
    %36 = llvm.udiv %34, %3 : i32 loc(#loc17)
    %37 = llvm.and %35, %2 : i32 loc(#loc17)
    %38 = llvm.icmp "eq" %37, %7 : i32 loc(#loc17)
    %39 = llvm.and %36, %1 : i32 loc(#loc17)
    %40 = llvm.icmp "eq" %39, %7 : i32 loc(#loc17)
    %41 = llvm.and %38, %40 : i1 loc(#loc17)
    %42 = llvm.insertelement %33, %0[%7 : i32] : vector<1xf32> loc(#loc17)
    %43 = llvm.bitcast %42 : vector<1xf32> to i32 loc(#loc17)
    %44 = llvm.and %41, %20 : i1 loc(#loc17)
    %45 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %43, %32, %44 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %46 = llvm.getelementptr %arg2[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %47 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc19)
    %48 = llvm.urem %47, %3 : i32 loc(#loc19)
    %49 = llvm.udiv %47, %3 : i32 loc(#loc19)
    %50 = llvm.and %48, %2 : i32 loc(#loc19)
    %51 = llvm.icmp "eq" %50, %7 : i32 loc(#loc19)
    %52 = llvm.and %49, %1 : i32 loc(#loc19)
    %53 = llvm.icmp "eq" %52, %7 : i32 loc(#loc19)
    %54 = llvm.and %51, %53 : i1 loc(#loc19)
    %55 = llvm.insertelement %31, %0[%7 : i32] : vector<1xf32> loc(#loc19)
    %56 = llvm.bitcast %55 : vector<1xf32> to i32 loc(#loc19)
    %57 = llvm.and %54, %20 : i1 loc(#loc19)
    %58 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %56, %46, %57 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc3)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc3)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %9 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %10 = llvm.mul %9, %5 : i32 loc(#loc5)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %12 = llvm.urem %11, %3 : i32 loc(#loc6)
    %13 = llvm.and %12, %6 : i32 loc(#loc6)
    %14 = llvm.icmp "eq" %13, %7 : i32 loc(#loc6)
    %15 = llvm.select %14, %7, %6 : i1, i32 loc(#loc6)
    %16 = llvm.xor %7, %15 : i32 loc(#loc6)
    %17 = llvm.xor %16, %7 : i32 loc(#loc6)
    %18 = llvm.add %17, %4 : i32 loc(#loc6)
    %19 = llvm.add %10, %18 : i32 loc(#loc7)
    %20 = llvm.icmp "slt" %19, %arg3 : i32 loc(#loc8)
    %21 = llvm.getelementptr %arg0[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %22 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %21 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %23 = llvm.bitcast %22 : i32 to vector<1xf32> loc(#loc10)
    %24 = llvm.extractelement %23[%4 : i32] : vector<1xf32> loc(#loc10)
    %25 = llvm.call @__nv_ilogbf(%24) : (f32) -> i32 loc(#loc1)
    %26 = llvm.add %25, %6 : i32 loc(#loc11)
    %27 = llvm.fcmp "oeq" %24, %8 : f32 loc(#loc12)
    %28 = llvm.select %27, %7, %26 : i1, i32 loc(#loc13)
    %29 = llvm.sub %7, %26 : i32 loc(#loc14)
    %30 = llvm.call @__nv_ldexpf(%24, %29) : (f32, i32) -> f32 loc(#loc2)
    %31 = llvm.select %27, %8, %30 : i1, f32 loc(#loc15)
    %32 = llvm.getelementptr %arg1[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %33 = llvm.sitofp %28 : i32 to f32 loc(#loc17)
    %34 = llvm.udiv %11, %3 : i32 loc(#loc17)
    %35 = llvm.and %12, %2 : i32 loc(#loc17)
    %36 = llvm.icmp "eq" %35, %7 : i32 loc(#loc17)
    %37 = llvm.and %34, %1 : i32 loc(#loc17)
    %38 = llvm.icmp "eq" %37, %7 : i32 loc(#loc17)
    %39 = llvm.and %36, %38 : i1 loc(#loc17)
    %40 = llvm.insertelement %33, %0[%7 : i32] : vector<1xf32> loc(#loc17)
    %41 = llvm.bitcast %40 : vector<1xf32> to i32 loc(#loc17)
    %42 = llvm.and %39, %20 : i1 loc(#loc17)
    %43 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %41, %32, %42 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %44 = llvm.getelementptr %arg2[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %45 = llvm.insertelement %31, %0[%7 : i32] : vector<1xf32> loc(#loc19)
    %46 = llvm.bitcast %45 : vector<1xf32> to i32 loc(#loc19)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %46, %44, %42 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2391705569.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_ilogbf(f32) -> i32 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @__nv_ldexpf(f32, i32) -> f32 attributes {libname = "", libpath = ""} loc(#loc2)
  llvm.func @frexp(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2391705569.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2391705569.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc3)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc3)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc3)
    %9 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc4)
    %10 = llvm.mul %9, %5 : i32 loc(#loc5)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc6)
    %12 = llvm.urem %11, %3 : i32 loc(#loc6)
    %13 = llvm.and %12, %6 : i32 loc(#loc6)
    %14 = llvm.icmp "eq" %13, %7 : i32 loc(#loc6)
    %15 = llvm.select %14, %7, %6 : i1, i32 loc(#loc6)
    %16 = llvm.xor %7, %15 : i32 loc(#loc6)
    %17 = llvm.xor %16, %7 : i32 loc(#loc6)
    %18 = llvm.add %17, %4 : i32 loc(#loc6)
    %19 = llvm.add %10, %18 : i32 loc(#loc7)
    %20 = llvm.icmp "slt" %19, %arg3 : i32 loc(#loc8)
    %21 = llvm.getelementptr %arg0[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %22 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l" %21 : (!llvm.ptr<1>) -> i32 loc(#loc10)
    %23 = llvm.bitcast %22 : i32 to vector<1xf32> loc(#loc10)
    %24 = llvm.extractelement %23[%4 : i32] : vector<1xf32> loc(#loc10)
    %25 = llvm.call @__nv_ilogbf(%24) : (f32) -> i32 loc(#loc1)
    %26 = llvm.add %25, %6 : i32 loc(#loc11)
    %27 = llvm.fcmp "oeq" %24, %8 : f32 loc(#loc12)
    %28 = llvm.select %27, %7, %26 : i1, i32 loc(#loc13)
    %29 = llvm.sub %7, %26 : i32 loc(#loc14)
    %30 = llvm.call @__nv_ldexpf(%24, %29) : (f32, i32) -> f32 loc(#loc2)
    %31 = llvm.select %27, %8, %30 : i1, f32 loc(#loc15)
    %32 = llvm.getelementptr %arg1[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc16)
    %33 = llvm.sitofp %28 : i32 to f32 loc(#loc17)
    %34 = llvm.udiv %11, %3 : i32 loc(#loc17)
    %35 = llvm.and %12, %2 : i32 loc(#loc17)
    %36 = llvm.icmp "eq" %35, %7 : i32 loc(#loc17)
    %37 = llvm.and %34, %1 : i32 loc(#loc17)
    %38 = llvm.icmp "eq" %37, %7 : i32 loc(#loc17)
    %39 = llvm.and %36, %38 : i1 loc(#loc17)
    %40 = llvm.insertelement %33, %0[%7 : i32] : vector<1xf32> loc(#loc17)
    %41 = llvm.bitcast %40 : vector<1xf32> to i32 loc(#loc17)
    %42 = llvm.and %39, %20 : i1 loc(#loc17)
    %43 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %41, %32, %42 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %44 = llvm.getelementptr %arg2[%19] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc18)
    %45 = llvm.insertelement %31, %0[%7 : i32] : vector<1xf32> loc(#loc19)
    %46 = llvm.bitcast %45 : vector<1xf32> to i32 loc(#loc19)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %46, %44, %42 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    llvm.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2391705569.py":10:24)
#loc2 = loc("/tmp/ipykernel_19987/2391705569.py":12:54)
#loc3 = loc(unknown)
#loc4 = loc("/tmp/ipykernel_19987/2391705569.py":3:24)
#loc5 = loc("/tmp/ipykernel_19987/2391705569.py":4:24)
#loc6 = loc("/tmp/ipykernel_19987/2391705569.py":5:41)
#loc7 = loc("/tmp/ipykernel_19987/2391705569.py":5:28)
#loc8 = loc("/tmp/ipykernel_19987/2391705569.py":6:21)
#loc9 = loc("/tmp/ipykernel_19987/2391705569.py":8:24)
#loc10 = loc("/tmp/ipykernel_19987/2391705569.py":8:16)
#loc11 = loc("/tmp/ipykernel_19987/2391705569.py":10:29)
#loc12 = loc("/tmp/ipykernel_19987/2391705569.py":11:29)
#loc13 = loc("/tmp/ipykernel_19987/2391705569.py":11:35)
#loc14 = loc("/tmp/ipykernel_19987/2391705569.py":12:55)
#loc15 = loc("/tmp/ipykernel_19987/2391705569.py":12:35)
#loc16 = loc("/tmp/ipykernel_19987/2391705569.py":14:23)
#loc17 = loc("/tmp/ipykernel_19987/2391705569.py":14:42)
#loc18 = loc("/tmp/ipykernel_19987/2391705569.py":15:28)
#loc19 = loc("/tmp/ipykernel_19987/2391705569.py":15:47)
#loc20 = loc("/tmp/ipykernel_19987/2391705569.py":15:4)


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<2x!tt.ptr<f64>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc8)
    %24 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %25 = tt.addptr %24, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %26 = tt.extern_elementwise %21, %25 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %28 = tt.addptr %27, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %29 = arith.truncf %26 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %28, %29, %18 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":10:31)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @frexp_real) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<2x!tt.ptr<f64>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc8)
    %24 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %25 = tt.addptr %24, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %26 = tt.extern_elementwise %21, %25 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %28 = tt.addptr %27, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %29 = arith.truncf %26 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %28, %29, %18 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":10:31)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %1 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %2 = llvm.mul %1, %0 : i32 loc(#loc4)
    %3 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %4 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %6 = llvm.urem %4, %5 : i32 loc(#loc5)
    %7 = llvm.udiv %4, %5 : i32 loc(#loc5)
    %8 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %9 = nvgpu.cluster_id loc(#loc5)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %11 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %12 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %13 = llvm.and %6, %12 : i32 loc(#loc5)
    %14 = llvm.icmp "eq" %13, %11 : i32 loc(#loc5)
    %15 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %16 = llvm.select %14, %11, %15 : i1, i32 loc(#loc5)
    %17 = llvm.xor %11, %16 : i32 loc(#loc5)
    %18 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %19 = llvm.and %6, %18 : i32 loc(#loc5)
    %20 = llvm.icmp "eq" %19, %11 : i32 loc(#loc5)
    %21 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %22 = llvm.and %6, %21 : i32 loc(#loc5)
    %23 = llvm.icmp "eq" %22, %11 : i32 loc(#loc5)
    %24 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %25 = llvm.and %6, %24 : i32 loc(#loc5)
    %26 = llvm.icmp "eq" %25, %11 : i32 loc(#loc5)
    %27 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %28 = llvm.and %6, %27 : i32 loc(#loc5)
    %29 = llvm.icmp "eq" %28, %11 : i32 loc(#loc5)
    %30 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %31 = llvm.and %7, %30 : i32 loc(#loc5)
    %32 = llvm.icmp "eq" %31, %11 : i32 loc(#loc5)
    %33 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %34 = llvm.and %7, %33 : i32 loc(#loc5)
    %35 = llvm.icmp "eq" %34, %11 : i32 loc(#loc5)
    %36 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %37 = llvm.xor %17, %36 : i32 loc(#loc5)
    %38 = llvm.add %37, %3 : i32 loc(#loc5)
    %39 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %40 = llvm.insertvalue %38, %39[0] : !llvm.struct<(i32)>  loc(#loc5)
    %41 = llvm.bitcast %2 : i32 to i32 loc(#loc6)
    %42 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %43 = llvm.insertvalue %41, %42[0] : !llvm.struct<(i32)>  loc(#loc6)
    %44 = llvm.extractvalue %43[0] : !llvm.struct<(i32)>  loc(#loc6)
    %45 = llvm.extractvalue %40[0] : !llvm.struct<(i32)>  loc(#loc6)
    %46 = llvm.add %44, %45 : i32 loc(#loc6)
    %47 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %48 = llvm.insertvalue %46, %47[0] : !llvm.struct<(i32)>  loc(#loc6)
    %49 = llvm.bitcast %arg3 : i32 to i32 loc(#loc7)
    %50 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc7)
    %51 = llvm.insertvalue %49, %50[0] : !llvm.struct<(i32)>  loc(#loc7)
    %52 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc7)
    %53 = llvm.extractvalue %51[0] : !llvm.struct<(i32)>  loc(#loc7)
    %54 = llvm.icmp "slt" %52, %53 : i32 loc(#loc7)
    %55 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc7)
    %56 = llvm.insertvalue %54, %55[0] : !llvm.struct<(i1)>  loc(#loc7)
    %57 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc8)
    %58 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %59 = llvm.insertvalue %57, %58[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %60 = llvm.extractvalue %59[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %61 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc8)
    %62 = llvm.getelementptr %60[%61] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %63 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %64 = llvm.insertvalue %62, %63[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %65 = llvm.extractvalue %64[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %66 = llvm.extractvalue %56[0] : !llvm.struct<(i1)>  loc(#loc9)
    %67 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %65, %66 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %68 = llvm.bitcast %67 : i64 to vector<1xf64> loc(#loc9)
    %69 = llvm.mlir.constant(0 : index) : i32 loc(#loc9)
    %70 = llvm.extractelement %68[%69 : i32] : vector<1xf64> loc(#loc9)
    %71 = llvm.mlir.undef : !llvm.struct<(f64)> loc(#loc9)
    %72 = llvm.insertvalue %70, %71[0] : !llvm.struct<(f64)>  loc(#loc9)
    %73 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc10)
    %74 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc10)
    %75 = llvm.insertvalue %73, %74[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %77 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc10)
    %78 = llvm.getelementptr %76[%77] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %79 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc10)
    %80 = llvm.insertvalue %78, %79[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %81 = llvm.extractvalue %72[0] : !llvm.struct<(f64)>  loc(#loc1)
    %82 = llvm.extractvalue %80[0] : !llvm.struct<(ptr<1>)>  loc(#loc1)
    %83 = llvm.call @__nv_frexp(%81, %82) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %84 = llvm.mlir.undef : !llvm.struct<(f64)> loc(#loc1)
    %85 = llvm.insertvalue %83, %84[0] : !llvm.struct<(f64)>  loc(#loc1)
    %86 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc11)
    %87 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc11)
    %88 = llvm.insertvalue %86, %87[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %89 = llvm.extractvalue %88[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %90 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc11)
    %91 = llvm.getelementptr %89[%90] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %92 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc11)
    %93 = llvm.insertvalue %91, %92[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %94 = llvm.extractvalue %85[0] : !llvm.struct<(f64)>  loc(#loc12)
    %95 = llvm.fptrunc %94 : f64 to f32 loc(#loc12)
    %96 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc12)
    %97 = llvm.insertvalue %95, %96[0] : !llvm.struct<(f32)>  loc(#loc12)
    %98 = llvm.extractvalue %93[0] : !llvm.struct<(ptr<1>)>  loc(#loc12)
    %99 = llvm.extractvalue %97[0] : !llvm.struct<(f32)>  loc(#loc12)
    %100 = llvm.extractvalue %56[0] : !llvm.struct<(i1)>  loc(#loc12)
    %101 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %102 = llvm.mlir.constant(32 : i32) : i32 loc(#loc12)
    %103 = llvm.urem %101, %102 : i32 loc(#loc12)
    %104 = llvm.udiv %101, %102 : i32 loc(#loc12)
    %105 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %106 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %107 = llvm.mlir.constant(30 : i32) : i32 loc(#loc12)
    %108 = llvm.and %103, %107 : i32 loc(#loc12)
    %109 = llvm.icmp "eq" %108, %106 : i32 loc(#loc12)
    %110 = llvm.mlir.constant(3 : i32) : i32 loc(#loc12)
    %111 = llvm.and %104, %110 : i32 loc(#loc12)
    %112 = llvm.icmp "eq" %111, %106 : i32 loc(#loc12)
    %113 = llvm.and %109, %112 : i1 loc(#loc12)
    %114 = llvm.mlir.undef : vector<1xf32> loc(#loc12)
    %115 = llvm.bitcast %99 : f32 to f32 loc(#loc12)
    %116 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %117 = llvm.insertelement %115, %114[%116 : i32] : vector<1xf32> loc(#loc12)
    %118 = llvm.bitcast %117 : vector<1xf32> to i32 loc(#loc12)
    %119 = llvm.and %113, %100 : i1 loc(#loc12)
    %120 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %118, %98, %119 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = llvm.udiv %10, %5 : i32 loc(#loc12)
    %29 = llvm.and %11, %2 : i32 loc(#loc12)
    %30 = llvm.icmp "eq" %29, %4 : i32 loc(#loc12)
    %31 = llvm.and %28, %1 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %32 : i1 loc(#loc12)
    %34 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %35 = llvm.bitcast %34 : vector<1xf32> to i32 loc(#loc12)
    %36 = llvm.and %33, %19 : i1 loc(#loc12)
    %37 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %35, %26, %36 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/2900966300.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/2900966300.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/2900966300.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = llvm.udiv %10, %5 : i32 loc(#loc12)
    %29 = llvm.and %11, %2 : i32 loc(#loc12)
    %30 = llvm.icmp "eq" %29, %4 : i32 loc(#loc12)
    %31 = llvm.and %28, %1 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %32 : i1 loc(#loc12)
    %34 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %35 = llvm.bitcast %34 : vector<1xf32> to i32 loc(#loc12)
    %36 = llvm.and %33, %19 : i1 loc(#loc12)
    %37 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %35, %26, %36 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/2900966300.py":12:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/2900966300.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/2900966300.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/2900966300.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/2900966300.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/2900966300.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/2900966300.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/2900966300.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/2900966300.py":12:44)
#loc11 = loc("/tmp/ipykernel_19987/2900966300.py":14:28)
#loc12 = loc("/tmp/ipykernel_19987/2900966300.py":14:47)
#loc13 = loc("/tmp/ipykernel_19987/2900966300.py":14:4)


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<2x!tt.ptr<f64>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc8)
    %24 = tt.extern_elementwise %21, %23 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc9)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc10)
    %26 = tt.addptr %25, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc10)
    %27 = arith.truncf %24 : tensor<2xf64> to tensor<2xf32> loc(#loc11)
    tt.store %26, %27, %18 : tensor<2x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @frexp_real) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c2_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c2_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<2xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<2xi32> to tensor<2xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<2xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<2xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<2xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<2xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<2xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<2xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<2xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<2xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<2x!tt.ptr<f64>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc8)
    %24 = tt.extern_elementwise %21, %23 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc9)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc10)
    %26 = tt.addptr %25, %16 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc10)
    %27 = arith.truncf %24 : tensor<2xf64> to tensor<2xf32> loc(#loc11)
    tt.store %26, %27, %18 : tensor<2x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>>, tensor<2xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>>, tensor<2xi32> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64>, tensor<2x!tt.ptr<i32>>) -> tensor<2xf64> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>>, tensor<2xi32> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64> to tensor<2xf32> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<2x!tt.ptr<f64>, #blocked> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %14 = tt.extern_elementwise %11, %13 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %15, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %17 = arith.truncf %14 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    %18 = ttg.convert_layout %16 : tensor<2x!tt.ptr<f32>, #blocked> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = ttg.convert_layout %17 : tensor<2xf32, #blocked> -> tensor<2xf32, #blocked> loc(#loc12)
    %20 = ttg.convert_layout %6 : tensor<2xi1, #blocked> -> tensor<2xi1, #blocked> loc(#loc12)
    tt.store %18, %19, %20 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @frexp_real(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<2xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<2xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<2xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<2xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<2x!tt.ptr<f64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<2x!tt.ptr<f64>, #blocked>, tensor<2xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<2x!tt.ptr<f64>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<2x!tt.ptr<i32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<2x!tt.ptr<i32>, #blocked>, tensor<2xi32, #blocked> loc(#loc9)
    %12 = tt.extern_elementwise %9, %11 {libname = "", libpath = "", pure = true, symbol = "__nv_frexp"} : (tensor<2xf64, #blocked>, tensor<2x!tt.ptr<i32>, #blocked>) -> tensor<2xf64, #blocked> loc(#loc10)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %4 : tensor<2x!tt.ptr<f32>, #blocked>, tensor<2xi32, #blocked> loc(#loc11)
    %15 = arith.truncf %12 : tensor<2xf64, #blocked> to tensor<2xf32, #blocked> loc(#loc12)
    tt.store %14, %15, %6 : tensor<2x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %1 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %2 = llvm.mul %1, %0 : i32 loc(#loc4)
    %3 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %4 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %6 = llvm.urem %4, %5 : i32 loc(#loc5)
    %7 = llvm.udiv %4, %5 : i32 loc(#loc5)
    %8 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %9 = nvgpu.cluster_id loc(#loc5)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %11 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %12 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %13 = llvm.and %6, %12 : i32 loc(#loc5)
    %14 = llvm.icmp "eq" %13, %11 : i32 loc(#loc5)
    %15 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %16 = llvm.select %14, %11, %15 : i1, i32 loc(#loc5)
    %17 = llvm.xor %11, %16 : i32 loc(#loc5)
    %18 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %19 = llvm.and %6, %18 : i32 loc(#loc5)
    %20 = llvm.icmp "eq" %19, %11 : i32 loc(#loc5)
    %21 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %22 = llvm.and %6, %21 : i32 loc(#loc5)
    %23 = llvm.icmp "eq" %22, %11 : i32 loc(#loc5)
    %24 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %25 = llvm.and %6, %24 : i32 loc(#loc5)
    %26 = llvm.icmp "eq" %25, %11 : i32 loc(#loc5)
    %27 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %28 = llvm.and %6, %27 : i32 loc(#loc5)
    %29 = llvm.icmp "eq" %28, %11 : i32 loc(#loc5)
    %30 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %31 = llvm.and %7, %30 : i32 loc(#loc5)
    %32 = llvm.icmp "eq" %31, %11 : i32 loc(#loc5)
    %33 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %34 = llvm.and %7, %33 : i32 loc(#loc5)
    %35 = llvm.icmp "eq" %34, %11 : i32 loc(#loc5)
    %36 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %37 = llvm.xor %17, %36 : i32 loc(#loc5)
    %38 = llvm.add %37, %3 : i32 loc(#loc5)
    %39 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %40 = llvm.insertvalue %38, %39[0] : !llvm.struct<(i32)>  loc(#loc5)
    %41 = llvm.bitcast %2 : i32 to i32 loc(#loc6)
    %42 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %43 = llvm.insertvalue %41, %42[0] : !llvm.struct<(i32)>  loc(#loc6)
    %44 = llvm.extractvalue %43[0] : !llvm.struct<(i32)>  loc(#loc6)
    %45 = llvm.extractvalue %40[0] : !llvm.struct<(i32)>  loc(#loc6)
    %46 = llvm.add %44, %45 : i32 loc(#loc6)
    %47 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %48 = llvm.insertvalue %46, %47[0] : !llvm.struct<(i32)>  loc(#loc6)
    %49 = llvm.bitcast %arg3 : i32 to i32 loc(#loc7)
    %50 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc7)
    %51 = llvm.insertvalue %49, %50[0] : !llvm.struct<(i32)>  loc(#loc7)
    %52 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc7)
    %53 = llvm.extractvalue %51[0] : !llvm.struct<(i32)>  loc(#loc7)
    %54 = llvm.icmp "slt" %52, %53 : i32 loc(#loc7)
    %55 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc7)
    %56 = llvm.insertvalue %54, %55[0] : !llvm.struct<(i1)>  loc(#loc7)
    %57 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc8)
    %58 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %59 = llvm.insertvalue %57, %58[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %60 = llvm.extractvalue %59[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %61 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc8)
    %62 = llvm.getelementptr %60[%61] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %63 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %64 = llvm.insertvalue %62, %63[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %65 = llvm.extractvalue %64[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %66 = llvm.extractvalue %56[0] : !llvm.struct<(i1)>  loc(#loc9)
    %67 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %65, %66 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %68 = llvm.bitcast %67 : i64 to vector<1xf64> loc(#loc9)
    %69 = llvm.mlir.constant(0 : index) : i32 loc(#loc9)
    %70 = llvm.extractelement %68[%69 : i32] : vector<1xf64> loc(#loc9)
    %71 = llvm.mlir.undef : !llvm.struct<(f64)> loc(#loc9)
    %72 = llvm.insertvalue %70, %71[0] : !llvm.struct<(f64)>  loc(#loc9)
    %73 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc10)
    %74 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc10)
    %75 = llvm.insertvalue %73, %74[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %77 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc10)
    %78 = llvm.getelementptr %76[%77] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %79 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc10)
    %80 = llvm.insertvalue %78, %79[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %81 = llvm.extractvalue %72[0] : !llvm.struct<(f64)>  loc(#loc1)
    %82 = llvm.extractvalue %80[0] : !llvm.struct<(ptr<1>)>  loc(#loc1)
    %83 = llvm.call @__nv_frexp(%81, %82) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %84 = llvm.mlir.undef : !llvm.struct<(f64)> loc(#loc1)
    %85 = llvm.insertvalue %83, %84[0] : !llvm.struct<(f64)>  loc(#loc1)
    %86 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc11)
    %87 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc11)
    %88 = llvm.insertvalue %86, %87[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %89 = llvm.extractvalue %88[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %90 = llvm.extractvalue %48[0] : !llvm.struct<(i32)>  loc(#loc11)
    %91 = llvm.getelementptr %89[%90] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %92 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc11)
    %93 = llvm.insertvalue %91, %92[0] : !llvm.struct<(ptr<1>)>  loc(#loc11)
    %94 = llvm.extractvalue %85[0] : !llvm.struct<(f64)>  loc(#loc12)
    %95 = llvm.fptrunc %94 : f64 to f32 loc(#loc12)
    %96 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc12)
    %97 = llvm.insertvalue %95, %96[0] : !llvm.struct<(f32)>  loc(#loc12)
    %98 = llvm.extractvalue %93[0] : !llvm.struct<(ptr<1>)>  loc(#loc12)
    %99 = llvm.extractvalue %97[0] : !llvm.struct<(f32)>  loc(#loc12)
    %100 = llvm.extractvalue %56[0] : !llvm.struct<(i1)>  loc(#loc12)
    %101 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %102 = llvm.mlir.constant(32 : i32) : i32 loc(#loc12)
    %103 = llvm.urem %101, %102 : i32 loc(#loc12)
    %104 = llvm.udiv %101, %102 : i32 loc(#loc12)
    %105 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %106 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %107 = llvm.mlir.constant(30 : i32) : i32 loc(#loc12)
    %108 = llvm.and %103, %107 : i32 loc(#loc12)
    %109 = llvm.icmp "eq" %108, %106 : i32 loc(#loc12)
    %110 = llvm.mlir.constant(3 : i32) : i32 loc(#loc12)
    %111 = llvm.and %104, %110 : i32 loc(#loc12)
    %112 = llvm.icmp "eq" %111, %106 : i32 loc(#loc12)
    %113 = llvm.and %109, %112 : i1 loc(#loc12)
    %114 = llvm.mlir.undef : vector<1xf32> loc(#loc12)
    %115 = llvm.bitcast %99 : f32 to f32 loc(#loc12)
    %116 = llvm.mlir.constant(0 : i32) : i32 loc(#loc12)
    %117 = llvm.insertelement %115, %114[%116 : i32] : vector<1xf32> loc(#loc12)
    %118 = llvm.bitcast %117 : vector<1xf32> to i32 loc(#loc12)
    %119 = llvm.and %113, %100 : i1 loc(#loc12)
    %120 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %118, %98, %119 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc12)
    %29 = llvm.urem %28, %5 : i32 loc(#loc12)
    %30 = llvm.udiv %28, %5 : i32 loc(#loc12)
    %31 = llvm.and %29, %2 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %1 : i32 loc(#loc12)
    %34 = llvm.icmp "eq" %33, %4 : i32 loc(#loc12)
    %35 = llvm.and %32, %34 : i1 loc(#loc12)
    %36 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %37 = llvm.bitcast %36 : vector<1xf32> to i32 loc(#loc12)
    %38 = llvm.and %35, %19 : i1 loc(#loc12)
    %39 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %37, %26, %38 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = llvm.udiv %10, %5 : i32 loc(#loc12)
    %29 = llvm.and %11, %2 : i32 loc(#loc12)
    %30 = llvm.icmp "eq" %29, %4 : i32 loc(#loc12)
    %31 = llvm.and %28, %1 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %32 : i1 loc(#loc12)
    %34 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %35 = llvm.bitcast %34 : vector<1xf32> to i32 loc(#loc12)
    %36 = llvm.and %33, %19 : i1 loc(#loc12)
    %37 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %35, %26, %36 : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc12)
    llvm.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/tmp/ipykernel_19987/528051629.py":10:34)
#loc2 = loc(unknown)
#loc3 = loc("/tmp/ipykernel_19987/528051629.py":3:24)
#loc4 = loc("/tmp/ipykernel_19987/528051629.py":4:24)
#loc5 = loc("/tmp/ipykernel_19987/528051629.py":5:41)
#loc6 = loc("/tmp/ipykernel_19987/528051629.py":5:28)
#loc7 = loc("/tmp/ipykernel_19987/528051629.py":6:21)
#loc8 = loc("/tmp/ipykernel_19987/528051629.py":8:24)
#loc9 = loc("/tmp/ipykernel_19987/528051629.py":8:33)
#loc10 = loc("/tmp/ipykernel_19987/528051629.py":10:44)
#loc11 = loc("/tmp/ipykernel_19987/528051629.py":12:28)
#loc12 = loc("/tmp/ipykernel_19987/528051629.py":12:47)
#loc13 = loc("/tmp/ipykernel_19987/528051629.py":12:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_19987/528051629.py":2:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @__nv_frexp(f64, !llvm.ptr<1>) -> f64 attributes {libname = "", libpath = ""} loc(#loc1)
  llvm.func @frexp_real(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg3: i32 loc("/tmp/ipykernel_19987/528051629.py":2:0), %arg4: !llvm.ptr<1> loc("/tmp/ipykernel_19987/528051629.py":2:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc2)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(30 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %8 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc3)
    %9 = llvm.mul %8, %7 : i32 loc(#loc4)
    %10 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc5)
    %11 = llvm.urem %10, %5 : i32 loc(#loc5)
    %12 = llvm.and %11, %3 : i32 loc(#loc5)
    %13 = llvm.icmp "eq" %12, %4 : i32 loc(#loc5)
    %14 = llvm.select %13, %4, %3 : i1, i32 loc(#loc5)
    %15 = llvm.xor %4, %14 : i32 loc(#loc5)
    %16 = llvm.xor %15, %4 : i32 loc(#loc5)
    %17 = llvm.add %16, %6 : i32 loc(#loc5)
    %18 = llvm.add %9, %17 : i32 loc(#loc6)
    %19 = llvm.icmp "slt" %18, %arg3 : i32 loc(#loc7)
    %20 = llvm.getelementptr %arg0[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f64 loc(#loc8)
    %21 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b" %20, %19 : (!llvm.ptr<1>, i1) -> i64 loc(#loc9)
    %22 = llvm.bitcast %21 : i64 to vector<1xf64> loc(#loc9)
    %23 = llvm.extractelement %22[%6 : i32] : vector<1xf64> loc(#loc9)
    %24 = llvm.getelementptr %arg1[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i32 loc(#loc10)
    %25 = llvm.call @__nv_frexp(%23, %24) : (f64, !llvm.ptr<1>) -> f64 loc(#loc1)
    %26 = llvm.getelementptr %arg2[%18] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc11)
    %27 = llvm.fptrunc %25 : f64 to f32 loc(#loc12)
    %28 = llvm.udiv %10, %5 : i32 loc(#loc12)
    %29 = llvm.and %11, %2 : i32 loc(#loc12)
    %30 = llvm.icmp "eq" %29, %4 : i32 loc(#loc12)
    %31 = llvm.and %28, %1 : i32 loc(#loc12)
    %32 = llvm.icmp "eq" %31, %4 : i32 loc(#loc12)
    %33 = llvm.and %30, %32 : i1 loc(#loc12)
    %34 = llvm.insertelement %27, %0[%4 : i32] : vector<1xf32> loc(#loc12)
    %35 = llvm.bitcast %34 : vector<1xf32> to i32 loc(#loc12)
    %36 = llvm.and %33, %19 : i1 loc(#loc12)
    %37 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $