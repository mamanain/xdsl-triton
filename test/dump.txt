// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %34 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc12)
    %35 = "arith.extsi"(%33) : (i32) -> i64 loc(#loc12)
    %36 = "arith.addi"(%34, %35) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc12)
    %37 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc12)
    %38 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc12)
    %39 = "arith.cmpi"(%36, %37) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc12)
    %40 = "arith.cmpi"(%36, %38) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc12)
    %41 = "arith.andi"(%39, %40) : (i1, i1) -> i1 loc(#loc12)
    %42 = "arith.addi"(%32, %33) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %43 = "arith.sitofp"(%42) : (i32) -> f32 loc(#loc13)
    %44 = "tt.splat"(%43) : (f32) -> tensor<2x1024xf32> loc(#loc13)
    %45 = "arith.mulf"(%44, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc13)
    %46 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %47 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc15)
    %48 = "arith.extsi"(%47) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %49 = "arith.extsi"(%46) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %50 = "arith.addi"(%48, %49) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc15)
    %51 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc15)
    %52 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc15)
    %53 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %54 = "arith.cmpi"(%50, %53) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %55 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %56 = "arith.cmpi"(%50, %55) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %57 = "arith.andi"(%54, %56) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc15)
    %58 = "arith.addi"(%47, %46) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %59 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc16)
    %60 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc17)
    %61 = "arith.extsi"(%60) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %62 = "arith.extsi"(%59) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %63 = "arith.addi"(%61, %62) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc17)
    %64 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc17)
    %65 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc17)
    %66 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %67 = "arith.cmpi"(%63, %66) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %68 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %69 = "arith.cmpi"(%63, %68) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %70 = "arith.andi"(%67, %69) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc17)
    %71 = "arith.addi"(%60, %59) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %72 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %73 = "arith.extsi"(%71) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc18)
    %74 = "arith.extsi"(%72) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc18)
    %75 = "arith.addi"(%73, %74) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc18)
    %76 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc18)
    %77 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc18)
    %78 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc18)
    %79 = "arith.cmpi"(%75, %78) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc18)
    %80 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc18)
    %81 = "arith.cmpi"(%75, %80) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc18)
    %82 = "arith.andi"(%79, %81) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc18)
    %83 = "arith.addi"(%71, %72) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc18)
    %84 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc19)
    %85 = "arith.cmpi"(%58, %84) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %86 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc20)
    %87 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc20)
    %88 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc20)
    %89 = "arith.extsi"(%87) : (i32) -> i64 loc(#loc20)
    %90 = "arith.muli"(%88, %89) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc20)
    %91 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc20)
    %92 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc20)
    %93 = "arith.cmpi"(%90, %91) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc20)
    %94 = "arith.cmpi"(%90, %92) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc20)
    %95 = "arith.andi"(%93, %94) : (i1, i1) -> i1 loc(#loc20)
    %96 = "arith.muli"(%arg2, %87) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc20)
    %97 = "tt.splat"(%96) : (i32) -> tensor<1024xi32> loc(#loc21)
    %98 = "arith.cmpi"(%83, %97) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc21)
    %99 = "tt.join"(%58, %83) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc22)
    %100 = "tt.trans"(%99) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc23)
    %101 = "tt.join"(%85, %98) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc24)
    %102 = "tt.trans"(%101) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc25)
    %103 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc26)
    %104 = "tt.addptr"(%103, %100) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc26)
    "tt.store"(%104, %45, %102) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc27)
    "tt.return"() : () -> () loc(#loc28)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":9:8)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":10:8)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":11:12)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc27 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc28 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @scalar_mult_duplicate) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %34 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc12)
    %35 = "arith.extsi"(%33) : (i32) -> i64 loc(#loc12)
    %36 = "arith.addi"(%34, %35) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc12)
    %37 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc12)
    %38 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc12)
    %39 = "arith.cmpi"(%36, %37) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc12)
    %40 = "arith.cmpi"(%36, %38) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc12)
    %41 = "arith.andi"(%39, %40) : (i1, i1) -> i1 loc(#loc12)
    %42 = "arith.addi"(%32, %33) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %43 = "arith.sitofp"(%42) : (i32) -> f32 loc(#loc13)
    %44 = "tt.splat"(%43) : (f32) -> tensor<2x1024xf32> loc(#loc13)
    %45 = "arith.mulf"(%44, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc13)
    %46 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %47 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc15)
    %48 = "arith.extsi"(%47) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %49 = "arith.extsi"(%46) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %50 = "arith.addi"(%48, %49) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc15)
    %51 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc15)
    %52 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc15)
    %53 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %54 = "arith.cmpi"(%50, %53) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %55 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %56 = "arith.cmpi"(%50, %55) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %57 = "arith.andi"(%54, %56) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc15)
    %58 = "arith.addi"(%47, %46) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %59 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc16)
    %60 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc17)
    %61 = "arith.extsi"(%60) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %62 = "arith.extsi"(%59) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %63 = "arith.addi"(%61, %62) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc17)
    %64 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc17)
    %65 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc17)
    %66 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %67 = "arith.cmpi"(%63, %66) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %68 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %69 = "arith.cmpi"(%63, %68) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %70 = "arith.andi"(%67, %69) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc17)
    %71 = "arith.addi"(%60, %59) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %72 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %73 = "arith.extsi"(%71) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc18)
    %74 = "arith.extsi"(%72) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc18)
    %75 = "arith.addi"(%73, %74) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc18)
    %76 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc18)
    %77 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc18)
    %78 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc18)
    %79 = "arith.cmpi"(%75, %78) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc18)
    %80 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc18)
    %81 = "arith.cmpi"(%75, %80) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc18)
    %82 = "arith.andi"(%79, %81) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc18)
    %83 = "arith.addi"(%71, %72) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc18)
    %84 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc19)
    %85 = "arith.cmpi"(%58, %84) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %86 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc20)
    %87 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc20)
    %88 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc20)
    %89 = "arith.extsi"(%87) : (i32) -> i64 loc(#loc20)
    %90 = "arith.muli"(%88, %89) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc20)
    %91 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc20)
    %92 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc20)
    %93 = "arith.cmpi"(%90, %91) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc20)
    %94 = "arith.cmpi"(%90, %92) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc20)
    %95 = "arith.andi"(%93, %94) : (i1, i1) -> i1 loc(#loc20)
    %96 = "arith.muli"(%arg2, %87) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc20)
    %97 = "tt.splat"(%96) : (i32) -> tensor<1024xi32> loc(#loc21)
    %98 = "arith.cmpi"(%83, %97) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc21)
    %99 = "tt.join"(%58, %83) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc22)
    %100 = "tt.trans"(%99) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc23)
    %101 = "tt.join"(%85, %98) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc24)
    %102 = "tt.trans"(%101) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc25)
    %103 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc26)
    %104 = "tt.addptr"(%103, %100) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc26)
    "tt.store"(%104, %45, %102) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc27)
    "tt.return"() : () -> () loc(#loc28)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":9:8)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":10:8)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":11:12)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc27 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc28 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc26 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc11)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc15)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc16)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc18)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc19)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc20)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc21)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc22)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc23)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc23)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc24)
    "tt.return"() : () -> () loc(#loc25)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":14:47)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":14:34)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":15:48)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":15:35)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":16:37)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc21 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc22 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc23 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc24 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc25 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked2> loc(#loc14)
    %21 = "ttg.convert_layout"(%20) : (tensor<1024x2xi32, #blocked2>) -> tensor<1024x2xi32, #blocked3> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked3>) -> tensor<2x1024xi32, #blocked4> loc(#loc15)
    %23 = "ttg.convert_layout"(%22) : (tensor<2x1024xi32, #blocked4>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %24 = "tt.join"(%9, %19) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked2> loc(#loc17)
    %25 = "ttg.convert_layout"(%24) : (tensor<1024x2xi1, #blocked2>) -> tensor<1024x2xi1, #blocked3> loc(#loc18)
    %26 = "tt.trans"(%25) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked3>) -> tensor<2x1024xi1, #blocked4> loc(#loc18)
    %27 = "ttg.convert_layout"(%26) : (tensor<2x1024xi1, #blocked4>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %28 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = "tt.addptr"(%28, %23) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    "tt.store"(%29, %15, %27) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xf32, #blocked>, tensor<2x1024xi1, #blocked>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %3 = "llvm.bitcast"(%2) : (f32) -> f32 loc(#loc1)
    %4 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %5 = "llvm.insertvalue"(%4, %3) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %6 = "llvm.insertvalue"(%5, %3) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %7 = "llvm.insertvalue"(%6, %3) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %8 = "llvm.insertvalue"(%7, %3) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %9 = "llvm.insertvalue"(%8, %3) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %10 = "llvm.insertvalue"(%9, %3) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %11 = "llvm.insertvalue"(%10, %3) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %12 = "llvm.insertvalue"(%11, %3) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %13 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %14 = "llvm.mul"(%13, %0) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %15 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %16 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %17 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %18 = "llvm.urem"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %19 = "llvm.udiv"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %20 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %21 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %22 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %24 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %25 = "llvm.and"(%18, %24) : (i32, i32) -> i32 loc(#loc4)
    %26 = "llvm.icmp"(%25, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %27 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %28 = "llvm.select"(%26, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %29 = "llvm.xor"(%23, %28) : (i32, i32) -> i32 loc(#loc4)
    %30 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %31 = "llvm.and"(%18, %30) : (i32, i32) -> i32 loc(#loc4)
    %32 = "llvm.icmp"(%31, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %33 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %34 = "llvm.select"(%32, %23, %33) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.xor"(%29, %34) : (i32, i32) -> i32 loc(#loc4)
    %36 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %37 = "llvm.and"(%18, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.icmp"(%37, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %39 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %40 = "llvm.select"(%38, %23, %39) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%35, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %43 = "llvm.and"(%18, %42) : (i32, i32) -> i32 loc(#loc4)
    %44 = "llvm.icmp"(%43, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %45 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %46 = "llvm.select"(%44, %23, %45) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.xor"(%41, %46) : (i32, i32) -> i32 loc(#loc4)
    %48 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %49 = "llvm.and"(%18, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.icmp"(%49, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %51 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %52 = "llvm.select"(%50, %23, %51) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%47, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %55 = "llvm.and"(%19, %54) : (i32, i32) -> i32 loc(#loc4)
    %56 = "llvm.icmp"(%55, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %57 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %58 = "llvm.select"(%56, %23, %57) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.xor"(%53, %58) : (i32, i32) -> i32 loc(#loc4)
    %60 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %61 = "llvm.and"(%19, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.icmp"(%61, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %63 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %64 = "llvm.select"(%62, %23, %63) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.xor"(%59, %64) : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %67 = "llvm.xor"(%65, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %69 = "llvm.xor"(%65, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %71 = "llvm.xor"(%65, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc4)
    %73 = "llvm.xor"(%65, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %75 = "llvm.xor"(%65, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.mlir.constant"() <{value = 513 : i32}> : () -> i32 loc(#loc4)
    %77 = "llvm.xor"(%65, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.mlir.constant"() <{value = 514 : i32}> : () -> i32 loc(#loc4)
    %79 = "llvm.xor"(%65, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.mlir.constant"() <{value = 515 : i32}> : () -> i32 loc(#loc4)
    %81 = "llvm.xor"(%65, %80) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.add"(%67, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.add"(%69, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.add"(%71, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.add"(%73, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.add"(%75, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.add"(%77, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%79, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %91 = "llvm.insertvalue"(%90, %82) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %92 = "llvm.insertvalue"(%91, %83) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %93 = "llvm.insertvalue"(%92, %84) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %94 = "llvm.insertvalue"(%93, %85) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %95 = "llvm.insertvalue"(%94, %86) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %96 = "llvm.insertvalue"(%95, %87) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %97 = "llvm.insertvalue"(%96, %88) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %98 = "llvm.insertvalue"(%97, %89) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %99 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %100 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %101 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %102 = "llvm.urem"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.udiv"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %105 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %106 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %108 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %109 = "llvm.and"(%102, %108) : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.icmp"(%109, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %111 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %112 = "llvm.select"(%110, %107, %111) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.xor"(%107, %112) : (i32, i32) -> i32 loc(#loc4)
    %114 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %115 = "llvm.and"(%102, %114) : (i32, i32) -> i32 loc(#loc4)
    %116 = "llvm.icmp"(%115, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %117 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %118 = "llvm.select"(%116, %107, %117) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %119 = "llvm.xor"(%113, %118) : (i32, i32) -> i32 loc(#loc4)
    %120 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %121 = "llvm.and"(%102, %120) : (i32, i32) -> i32 loc(#loc4)
    %122 = "llvm.icmp"(%121, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %123 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %124 = "llvm.select"(%122, %107, %123) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %125 = "llvm.xor"(%119, %124) : (i32, i32) -> i32 loc(#loc4)
    %126 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %127 = "llvm.and"(%102, %126) : (i32, i32) -> i32 loc(#loc4)
    %128 = "llvm.icmp"(%127, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %129 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %130 = "llvm.select"(%128, %107, %129) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %131 = "llvm.xor"(%125, %130) : (i32, i32) -> i32 loc(#loc4)
    %132 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %133 = "llvm.and"(%102, %132) : (i32, i32) -> i32 loc(#loc4)
    %134 = "llvm.icmp"(%133, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %135 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %136 = "llvm.select"(%134, %107, %135) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %137 = "llvm.xor"(%131, %136) : (i32, i32) -> i32 loc(#loc4)
    %138 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %139 = "llvm.and"(%103, %138) : (i32, i32) -> i32 loc(#loc4)
    %140 = "llvm.icmp"(%139, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %141 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %142 = "llvm.select"(%140, %107, %141) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %143 = "llvm.xor"(%137, %142) : (i32, i32) -> i32 loc(#loc4)
    %144 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %145 = "llvm.and"(%103, %144) : (i32, i32) -> i32 loc(#loc4)
    %146 = "llvm.icmp"(%145, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %147 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %148 = "llvm.select"(%146, %107, %147) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %149 = "llvm.xor"(%143, %148) : (i32, i32) -> i32 loc(#loc4)
    %150 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %151 = "llvm.xor"(%149, %150) : (i32, i32) -> i32 loc(#loc4)
    %152 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %153 = "llvm.xor"(%149, %152) : (i32, i32) -> i32 loc(#loc4)
    %154 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %155 = "llvm.xor"(%149, %154) : (i32, i32) -> i32 loc(#loc4)
    %156 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc4)
    %157 = "llvm.xor"(%149, %156) : (i32, i32) -> i32 loc(#loc4)
    %158 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %159 = "llvm.xor"(%149, %158) : (i32, i32) -> i32 loc(#loc4)
    %160 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc4)
    %161 = "llvm.xor"(%149, %160) : (i32, i32) -> i32 loc(#loc4)
    %162 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc4)
    %163 = "llvm.xor"(%149, %162) : (i32, i32) -> i32 loc(#loc4)
    %164 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc4)
    %165 = "llvm.xor"(%149, %164) : (i32, i32) -> i32 loc(#loc4)
    %166 = "llvm.add"(%151, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %167 = "llvm.add"(%153, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %168 = "llvm.add"(%155, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %169 = "llvm.add"(%157, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %170 = "llvm.add"(%159, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %171 = "llvm.add"(%161, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %172 = "llvm.add"(%163, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %173 = "llvm.add"(%165, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %174 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %175 = "llvm.insertvalue"(%174, %166) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %176 = "llvm.insertvalue"(%175, %167) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %177 = "llvm.insertvalue"(%176, %168) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %178 = "llvm.insertvalue"(%177, %169) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %179 = "llvm.insertvalue"(%178, %170) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %180 = "llvm.insertvalue"(%179, %171) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %181 = "llvm.insertvalue"(%180, %172) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %182 = "llvm.insertvalue"(%181, %173) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %183 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %185 = "llvm.insertvalue"(%184, %183) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %186 = "llvm.insertvalue"(%185, %183) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %187 = "llvm.insertvalue"(%186, %183) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %188 = "llvm.insertvalue"(%187, %183) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %189 = "llvm.insertvalue"(%188, %183) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %190 = "llvm.insertvalue"(%189, %183) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %191 = "llvm.insertvalue"(%190, %183) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %192 = "llvm.insertvalue"(%191, %183) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %193 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %194 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %195 = "llvm.insertvalue"(%194, %193) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %196 = "llvm.insertvalue"(%195, %193) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %197 = "llvm.insertvalue"(%196, %193) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %198 = "llvm.insertvalue"(%197, %193) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %199 = "llvm.insertvalue"(%198, %193) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %200 = "llvm.insertvalue"(%199, %193) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %201 = "llvm.insertvalue"(%200, %193) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %202 = "llvm.insertvalue"(%201, %193) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %203 = "llvm.extractvalue"(%192) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %204 = "llvm.extractvalue"(%192) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %205 = "llvm.extractvalue"(%192) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %206 = "llvm.extractvalue"(%192) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %207 = "llvm.extractvalue"(%192) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %208 = "llvm.extractvalue"(%192) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %209 = "llvm.extractvalue"(%192) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %210 = "llvm.extractvalue"(%192) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %211 = "llvm.extractvalue"(%98) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %212 = "llvm.extractvalue"(%98) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %213 = "llvm.extractvalue"(%98) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %214 = "llvm.extractvalue"(%98) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %215 = "llvm.extractvalue"(%98) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %216 = "llvm.extractvalue"(%98) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %217 = "llvm.extractvalue"(%98) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %218 = "llvm.extractvalue"(%98) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %219 = "llvm.add"(%203, %211) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %220 = "llvm.add"(%204, %212) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %221 = "llvm.add"(%205, %213) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %222 = "llvm.add"(%206, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %223 = "llvm.add"(%207, %215) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %224 = "llvm.add"(%208, %216) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %225 = "llvm.add"(%209, %217) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %226 = "llvm.add"(%210, %218) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %227 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %228 = "llvm.insertvalue"(%227, %219) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %229 = "llvm.insertvalue"(%228, %220) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %230 = "llvm.insertvalue"(%229, %221) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %231 = "llvm.insertvalue"(%230, %222) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %232 = "llvm.insertvalue"(%231, %223) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %233 = "llvm.insertvalue"(%232, %224) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %234 = "llvm.insertvalue"(%233, %225) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %235 = "llvm.insertvalue"(%234, %226) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %236 = "llvm.extractvalue"(%202) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %237 = "llvm.extractvalue"(%202) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %238 = "llvm.extractvalue"(%202) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %239 = "llvm.extractvalue"(%202) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %240 = "llvm.extractvalue"(%202) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %241 = "llvm.extractvalue"(%202) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %242 = "llvm.extractvalue"(%202) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %243 = "llvm.extractvalue"(%202) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %244 = "llvm.extractvalue"(%182) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %245 = "llvm.extractvalue"(%182) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %246 = "llvm.extractvalue"(%182) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %247 = "llvm.extractvalue"(%182) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %248 = "llvm.extractvalue"(%182) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %249 = "llvm.extractvalue"(%182) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %250 = "llvm.extractvalue"(%182) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %251 = "llvm.extractvalue"(%182) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %252 = "llvm.add"(%236, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %253 = "llvm.add"(%237, %245) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %254 = "llvm.add"(%238, %246) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %255 = "llvm.add"(%239, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %256 = "llvm.add"(%240, %248) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %257 = "llvm.add"(%241, %249) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %258 = "llvm.add"(%242, %250) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %259 = "llvm.add"(%243, %251) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %260 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %261 = "llvm.insertvalue"(%260, %252) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %262 = "llvm.insertvalue"(%261, %253) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %263 = "llvm.insertvalue"(%262, %254) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %264 = "llvm.insertvalue"(%263, %255) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %265 = "llvm.insertvalue"(%264, %256) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %266 = "llvm.insertvalue"(%265, %257) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %267 = "llvm.insertvalue"(%266, %258) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %268 = "llvm.insertvalue"(%267, %259) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %269 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %270 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %271 = "llvm.insertvalue"(%270, %269) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %272 = "llvm.insertvalue"(%271, %269) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %273 = "llvm.insertvalue"(%272, %269) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %274 = "llvm.insertvalue"(%273, %269) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %275 = "llvm.insertvalue"(%274, %269) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %276 = "llvm.insertvalue"(%275, %269) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %277 = "llvm.insertvalue"(%276, %269) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %278 = "llvm.insertvalue"(%277, %269) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %279 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %280 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %281 = "llvm.insertvalue"(%280, %279) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %282 = "llvm.insertvalue"(%281, %279) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %283 = "llvm.insertvalue"(%282, %279) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %284 = "llvm.insertvalue"(%283, %279) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %285 = "llvm.insertvalue"(%284, %279) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %286 = "llvm.insertvalue"(%285, %279) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %287 = "llvm.insertvalue"(%286, %279) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %288 = "llvm.insertvalue"(%287, %279) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %289 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %290 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %291 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %292 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %293 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %294 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %295 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %296 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %297 = "llvm.extractvalue"(%278) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %298 = "llvm.extractvalue"(%278) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %299 = "llvm.extractvalue"(%278) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %300 = "llvm.extractvalue"(%278) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %301 = "llvm.extractvalue"(%278) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %302 = "llvm.extractvalue"(%278) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %303 = "llvm.extractvalue"(%278) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %304 = "llvm.extractvalue"(%278) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %305 = "llvm.icmp"(%289, %297) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %306 = "llvm.icmp"(%290, %298) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %307 = "llvm.icmp"(%291, %299) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %308 = "llvm.icmp"(%292, %300) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %309 = "llvm.icmp"(%293, %301) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %310 = "llvm.icmp"(%294, %302) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %311 = "llvm.icmp"(%295, %303) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %312 = "llvm.icmp"(%296, %304) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %313 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %314 = "llvm.insertvalue"(%313, %305) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %315 = "llvm.insertvalue"(%314, %305) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %316 = "llvm.insertvalue"(%315, %305) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %317 = "llvm.insertvalue"(%316, %305) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %318 = "llvm.insertvalue"(%317, %309) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %319 = "llvm.insertvalue"(%318, %309) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %320 = "llvm.insertvalue"(%319, %309) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %321 = "llvm.insertvalue"(%320, %309) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %322 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %323 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %324 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %325 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %326 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %327 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %328 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %329 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %330 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %331 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %332 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %333 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %334 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %335 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %336 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %337 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %338 = "llvm.icmp"(%322, %330) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %339 = "llvm.icmp"(%323, %331) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %340 = "llvm.icmp"(%324, %332) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %341 = "llvm.icmp"(%325, %333) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %342 = "llvm.icmp"(%326, %334) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %343 = "llvm.icmp"(%327, %335) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %344 = "llvm.icmp"(%328, %336) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %345 = "llvm.icmp"(%329, %337) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %346 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %347 = "llvm.insertvalue"(%346, %338) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %348 = "llvm.insertvalue"(%347, %339) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %349 = "llvm.insertvalue"(%348, %340) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %350 = "llvm.insertvalue"(%349, %341) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %351 = "llvm.insertvalue"(%350, %342) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %352 = "llvm.insertvalue"(%351, %343) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %353 = "llvm.insertvalue"(%352, %344) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %354 = "llvm.insertvalue"(%353, %345) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %355 = "llvm.bitcast"(%arg0) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc7)
    %356 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %357 = "llvm.insertvalue"(%356, %355) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %358 = "llvm.insertvalue"(%357, %355) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %359 = "llvm.insertvalue"(%358, %355) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %360 = "llvm.insertvalue"(%359, %355) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %361 = "llvm.insertvalue"(%360, %355) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %362 = "llvm.insertvalue"(%361, %355) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %363 = "llvm.insertvalue"(%362, %355) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %364 = "llvm.insertvalue"(%363, %355) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %365 = "llvm.extractvalue"(%364) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %366 = "llvm.extractvalue"(%364) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %367 = "llvm.extractvalue"(%364) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %368 = "llvm.extractvalue"(%364) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %369 = "llvm.extractvalue"(%364) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %370 = "llvm.extractvalue"(%364) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %371 = "llvm.extractvalue"(%364) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %372 = "llvm.extractvalue"(%364) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %373 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %374 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %375 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %376 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %377 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %378 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %379 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %380 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %381 = "llvm.getelementptr"(%365, %373) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %382 = "llvm.getelementptr"(%366, %374) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %383 = "llvm.getelementptr"(%367, %375) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %384 = "llvm.getelementptr"(%368, %376) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %385 = "llvm.getelementptr"(%369, %377) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %386 = "llvm.getelementptr"(%370, %378) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %387 = "llvm.getelementptr"(%371, %379) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %388 = "llvm.getelementptr"(%372, %380) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %389 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %390 = "llvm.insertvalue"(%389, %381) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %391 = "llvm.insertvalue"(%390, %382) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %392 = "llvm.insertvalue"(%391, %383) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %393 = "llvm.insertvalue"(%392, %384) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %394 = "llvm.insertvalue"(%393, %385) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %395 = "llvm.insertvalue"(%394, %386) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %396 = "llvm.insertvalue"(%395, %387) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %397 = "llvm.insertvalue"(%396, %388) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %398 = "llvm.extractvalue"(%397) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %399 = "llvm.extractvalue"(%397) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %400 = "llvm.extractvalue"(%397) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %401 = "llvm.extractvalue"(%397) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %402 = "llvm.extractvalue"(%397) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %403 = "llvm.extractvalue"(%397) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %404 = "llvm.extractvalue"(%397) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %405 = "llvm.extractvalue"(%397) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %406 = "llvm.extractvalue"(%321) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %407 = "llvm.extractvalue"(%321) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %408 = "llvm.extractvalue"(%321) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %409 = "llvm.extractvalue"(%321) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %410 = "llvm.extractvalue"(%321) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %411 = "llvm.extractvalue"(%321) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %412 = "llvm.extractvalue"(%321) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %413 = "llvm.extractvalue"(%321) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %414 = "llvm.inline_asm"(%398, %406) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %415 = "llvm.extractvalue"(%414) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %416 = "llvm.bitcast"(%415) : (i32) -> vector<1xf32> loc(#loc8)
    %417 = "llvm.extractvalue"(%414) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %418 = "llvm.bitcast"(%417) : (i32) -> vector<1xf32> loc(#loc8)
    %419 = "llvm.extractvalue"(%414) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %420 = "llvm.bitcast"(%419) : (i32) -> vector<1xf32> loc(#loc8)
    %421 = "llvm.extractvalue"(%414) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %422 = "llvm.bitcast"(%421) : (i32) -> vector<1xf32> loc(#loc8)
    %423 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %424 = "llvm.extractelement"(%416, %423) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %425 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %426 = "llvm.extractelement"(%418, %425) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %427 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %428 = "llvm.extractelement"(%420, %427) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %429 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %430 = "llvm.extractelement"(%422, %429) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %431 = "llvm.inline_asm"(%402, %410) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %432 = "llvm.extractvalue"(%431) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %433 = "llvm.bitcast"(%432) : (i32) -> vector<1xf32> loc(#loc8)
    %434 = "llvm.extractvalue"(%431) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %435 = "llvm.bitcast"(%434) : (i32) -> vector<1xf32> loc(#loc8)
    %436 = "llvm.extractvalue"(%431) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %437 = "llvm.bitcast"(%436) : (i32) -> vector<1xf32> loc(#loc8)
    %438 = "llvm.extractvalue"(%431) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %439 = "llvm.bitcast"(%438) : (i32) -> vector<1xf32> loc(#loc8)
    %440 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %441 = "llvm.extractelement"(%433, %440) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %442 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %443 = "llvm.extractelement"(%435, %442) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %444 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %445 = "llvm.extractelement"(%437, %444) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %446 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %447 = "llvm.extractelement"(%439, %446) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %448 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %449 = "llvm.insertvalue"(%448, %424) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %450 = "llvm.insertvalue"(%449, %426) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %451 = "llvm.insertvalue"(%450, %428) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %452 = "llvm.insertvalue"(%451, %430) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %453 = "llvm.insertvalue"(%452, %441) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %454 = "llvm.insertvalue"(%453, %443) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %455 = "llvm.insertvalue"(%454, %445) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %456 = "llvm.insertvalue"(%455, %447) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %457 = "llvm.extractvalue"(%456) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %458 = "llvm.extractvalue"(%456) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %459 = "llvm.extractvalue"(%456) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %460 = "llvm.extractvalue"(%456) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %461 = "llvm.extractvalue"(%456) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %462 = "llvm.extractvalue"(%456) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %463 = "llvm.extractvalue"(%456) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %464 = "llvm.extractvalue"(%456) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %465 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %466 = "llvm.insertvalue"(%465, %457) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %467 = "llvm.insertvalue"(%466, %458) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %468 = "llvm.insertvalue"(%467, %459) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %469 = "llvm.insertvalue"(%468, %460) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %470 = "llvm.insertvalue"(%469, %461) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %471 = "llvm.insertvalue"(%470, %462) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %472 = "llvm.insertvalue"(%471, %463) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %473 = "llvm.insertvalue"(%472, %464) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %474 = "llvm.extractvalue"(%473) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %475 = "llvm.extractvalue"(%473) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %476 = "llvm.extractvalue"(%473) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %477 = "llvm.extractvalue"(%473) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %478 = "llvm.extractvalue"(%473) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %479 = "llvm.extractvalue"(%473) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %480 = "llvm.extractvalue"(%473) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %481 = "llvm.extractvalue"(%473) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %482 = "llvm.extractvalue"(%12) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %483 = "llvm.extractvalue"(%12) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %484 = "llvm.extractvalue"(%12) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %485 = "llvm.extractvalue"(%12) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %486 = "llvm.extractvalue"(%12) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %487 = "llvm.extractvalue"(%12) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %488 = "llvm.extractvalue"(%12) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %489 = "llvm.extractvalue"(%12) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %490 = "llvm.fmul"(%474, %482) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %491 = "llvm.fmul"(%475, %483) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %492 = "llvm.fmul"(%476, %484) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %493 = "llvm.fmul"(%477, %485) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %494 = "llvm.fmul"(%478, %486) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %495 = "llvm.fmul"(%479, %487) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %496 = "llvm.fmul"(%480, %488) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %497 = "llvm.fmul"(%481, %489) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %498 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %499 = "llvm.insertvalue"(%498, %490) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %500 = "llvm.insertvalue"(%499, %491) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %501 = "llvm.insertvalue"(%500, %492) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %502 = "llvm.insertvalue"(%501, %493) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %503 = "llvm.insertvalue"(%502, %494) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %504 = "llvm.insertvalue"(%503, %495) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %505 = "llvm.insertvalue"(%504, %496) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %506 = "llvm.insertvalue"(%505, %497) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %507 = "llvm.extractvalue"(%506) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %508 = "llvm.extractvalue"(%506) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %509 = "llvm.extractvalue"(%506) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %510 = "llvm.extractvalue"(%506) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %511 = "llvm.extractvalue"(%506) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %512 = "llvm.extractvalue"(%506) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %513 = "llvm.extractvalue"(%506) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %514 = "llvm.extractvalue"(%506) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %515 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc10)
    %516 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %517 = "llvm.urem"(%515, %516) : (i32, i32) -> i32 loc(#loc10)
    %518 = "llvm.udiv"(%515, %516) : (i32, i32) -> i32 loc(#loc10)
    %519 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %520 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %521 = "llvm.getelementptr"(%520, %519) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %522 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %523 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %524 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %525 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %526 = "llvm.and"(%517, %525) : (i32, i32) -> i32 loc(#loc10)
    %527 = "llvm.icmp"(%526, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %528 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %529 = "llvm.select"(%527, %524, %528) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %530 = "llvm.xor"(%524, %529) : (i32, i32) -> i32 loc(#loc10)
    %531 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %532 = "llvm.and"(%517, %531) : (i32, i32) -> i32 loc(#loc10)
    %533 = "llvm.icmp"(%532, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %534 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %535 = "llvm.select"(%533, %524, %534) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %536 = "llvm.xor"(%530, %535) : (i32, i32) -> i32 loc(#loc10)
    %537 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %538 = "llvm.and"(%517, %537) : (i32, i32) -> i32 loc(#loc10)
    %539 = "llvm.icmp"(%538, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %540 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %541 = "llvm.select"(%539, %524, %540) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %542 = "llvm.xor"(%536, %541) : (i32, i32) -> i32 loc(#loc10)
    %543 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %544 = "llvm.and"(%517, %543) : (i32, i32) -> i32 loc(#loc10)
    %545 = "llvm.icmp"(%544, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %546 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %547 = "llvm.select"(%545, %524, %546) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %548 = "llvm.xor"(%542, %547) : (i32, i32) -> i32 loc(#loc10)
    %549 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %550 = "llvm.and"(%517, %549) : (i32, i32) -> i32 loc(#loc10)
    %551 = "llvm.icmp"(%550, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %552 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %553 = "llvm.select"(%551, %524, %552) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %554 = "llvm.xor"(%548, %553) : (i32, i32) -> i32 loc(#loc10)
    %555 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %556 = "llvm.and"(%518, %555) : (i32, i32) -> i32 loc(#loc10)
    %557 = "llvm.icmp"(%556, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %558 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %559 = "llvm.select"(%557, %524, %558) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %560 = "llvm.xor"(%554, %559) : (i32, i32) -> i32 loc(#loc10)
    %561 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %562 = "llvm.and"(%518, %561) : (i32, i32) -> i32 loc(#loc10)
    %563 = "llvm.icmp"(%562, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %564 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %565 = "llvm.select"(%563, %524, %564) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %566 = "llvm.xor"(%560, %565) : (i32, i32) -> i32 loc(#loc10)
    %567 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %568 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %569 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %570 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %571 = "llvm.and"(%517, %570) : (i32, i32) -> i32 loc(#loc10)
    %572 = "llvm.icmp"(%571, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %573 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %574 = "llvm.and"(%517, %573) : (i32, i32) -> i32 loc(#loc10)
    %575 = "llvm.icmp"(%574, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %576 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %577 = "llvm.select"(%575, %569, %576) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %578 = "llvm.xor"(%569, %577) : (i32, i32) -> i32 loc(#loc10)
    %579 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %580 = "llvm.and"(%517, %579) : (i32, i32) -> i32 loc(#loc10)
    %581 = "llvm.icmp"(%580, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %582 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %583 = "llvm.select"(%581, %569, %582) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %584 = "llvm.xor"(%578, %583) : (i32, i32) -> i32 loc(#loc10)
    %585 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %586 = "llvm.and"(%517, %585) : (i32, i32) -> i32 loc(#loc10)
    %587 = "llvm.icmp"(%586, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %588 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %589 = "llvm.select"(%587, %569, %588) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %590 = "llvm.xor"(%584, %589) : (i32, i32) -> i32 loc(#loc10)
    %591 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %592 = "llvm.and"(%517, %591) : (i32, i32) -> i32 loc(#loc10)
    %593 = "llvm.icmp"(%592, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %594 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %595 = "llvm.select"(%593, %569, %594) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %596 = "llvm.xor"(%590, %595) : (i32, i32) -> i32 loc(#loc10)
    %597 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %598 = "llvm.and"(%518, %597) : (i32, i32) -> i32 loc(#loc10)
    %599 = "llvm.icmp"(%598, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %600 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %601 = "llvm.select"(%599, %569, %600) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %602 = "llvm.xor"(%596, %601) : (i32, i32) -> i32 loc(#loc10)
    %603 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %604 = "llvm.and"(%518, %603) : (i32, i32) -> i32 loc(#loc10)
    %605 = "llvm.icmp"(%604, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %606 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %607 = "llvm.select"(%605, %569, %606) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %608 = "llvm.xor"(%602, %607) : (i32, i32) -> i32 loc(#loc10)
    %609 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %610 = "llvm.xor"(%566, %609) : (i32, i32) -> i32 loc(#loc10)
    %611 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %612 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %613 = "llvm.lshr"(%610, %612) : (i32, i32) -> i32 loc(#loc10)
    %614 = "llvm.shl"(%613, %611) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %615 = "llvm.add"(%614, %610) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %616 = "llvm.getelementptr"(%521, %615) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %617 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %618 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %619 = "llvm.insertelement"(%617, %507, %618) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %620 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %621 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %622 = "llvm.extractelement"(%619, %621) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %623 = "llvm.bitcast"(%622) : (f32) -> i32 loc(#loc10)
    %624 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %625 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %626 = "llvm.insertelement"(%624, %623, %625) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %627 = "llvm.inline_asm"(%616, %626, %620) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %628 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %629 = "llvm.xor"(%566, %628) : (i32, i32) -> i32 loc(#loc10)
    %630 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %631 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %632 = "llvm.lshr"(%629, %631) : (i32, i32) -> i32 loc(#loc10)
    %633 = "llvm.shl"(%632, %630) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %634 = "llvm.add"(%633, %629) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %635 = "llvm.getelementptr"(%521, %634) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %636 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %637 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %638 = "llvm.insertelement"(%636, %508, %637) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %639 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %640 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %641 = "llvm.extractelement"(%638, %640) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %642 = "llvm.bitcast"(%641) : (f32) -> i32 loc(#loc10)
    %643 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %644 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %645 = "llvm.insertelement"(%643, %642, %644) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %646 = "llvm.inline_asm"(%635, %645, %639) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %647 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %648 = "llvm.xor"(%566, %647) : (i32, i32) -> i32 loc(#loc10)
    %649 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %650 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %651 = "llvm.lshr"(%648, %650) : (i32, i32) -> i32 loc(#loc10)
    %652 = "llvm.shl"(%651, %649) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %653 = "llvm.add"(%652, %648) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %654 = "llvm.getelementptr"(%521, %653) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %655 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %656 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %657 = "llvm.insertelement"(%655, %509, %656) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %658 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %659 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %660 = "llvm.extractelement"(%657, %659) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %661 = "llvm.bitcast"(%660) : (f32) -> i32 loc(#loc10)
    %662 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %663 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %664 = "llvm.insertelement"(%662, %661, %663) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %665 = "llvm.inline_asm"(%654, %664, %658) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %666 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc10)
    %667 = "llvm.xor"(%566, %666) : (i32, i32) -> i32 loc(#loc10)
    %668 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %669 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %670 = "llvm.lshr"(%667, %669) : (i32, i32) -> i32 loc(#loc10)
    %671 = "llvm.shl"(%670, %668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %672 = "llvm.add"(%671, %667) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %673 = "llvm.getelementptr"(%521, %672) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %674 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %675 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %676 = "llvm.insertelement"(%674, %510, %675) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %677 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %678 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %679 = "llvm.extractelement"(%676, %678) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %680 = "llvm.bitcast"(%679) : (f32) -> i32 loc(#loc10)
    %681 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %682 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %683 = "llvm.insertelement"(%681, %680, %682) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %684 = "llvm.inline_asm"(%673, %683, %677) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %685 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %686 = "llvm.xor"(%608, %685) : (i32, i32) -> i32 loc(#loc10)
    %687 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %688 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %689 = "llvm.lshr"(%686, %688) : (i32, i32) -> i32 loc(#loc10)
    %690 = "llvm.shl"(%689, %687) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %691 = "llvm.add"(%690, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %692 = "llvm.getelementptr"(%521, %691) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %693 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %694 = "llvm.load"(%692) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %695 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %696 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %697 = "llvm.insertelement"(%695, %694, %696) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %698 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %699 = "llvm.extractelement"(%697, %698) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %700 = "llvm.bitcast"(%699) : (i32) -> f32 loc(#loc10)
    %701 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %702 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %703 = "llvm.insertelement"(%701, %700, %702) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %704 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %705 = "llvm.extractelement"(%703, %704) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %706 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %707 = "llvm.xor"(%608, %706) : (i32, i32) -> i32 loc(#loc10)
    %708 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %709 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %710 = "llvm.lshr"(%707, %709) : (i32, i32) -> i32 loc(#loc10)
    %711 = "llvm.shl"(%710, %708) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %712 = "llvm.add"(%711, %707) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %713 = "llvm.getelementptr"(%521, %712) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %714 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %715 = "llvm.load"(%713) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %716 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %717 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %718 = "llvm.insertelement"(%716, %715, %717) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %719 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %720 = "llvm.extractelement"(%718, %719) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %721 = "llvm.bitcast"(%720) : (i32) -> f32 loc(#loc10)
    %722 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %723 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %724 = "llvm.insertelement"(%722, %721, %723) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %725 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %726 = "llvm.extractelement"(%724, %725) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %727 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %728 = "llvm.xor"(%608, %727) : (i32, i32) -> i32 loc(#loc10)
    %729 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %730 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %731 = "llvm.lshr"(%728, %730) : (i32, i32) -> i32 loc(#loc10)
    %732 = "llvm.shl"(%731, %729) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %733 = "llvm.add"(%732, %728) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %734 = "llvm.getelementptr"(%521, %733) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %735 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %736 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %737 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %738 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %739 = "llvm.insertelement"(%737, %736, %738) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %740 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %741 = "llvm.extractelement"(%739, %740) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %742 = "llvm.bitcast"(%741) : (i32) -> f32 loc(#loc10)
    %743 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %744 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %745 = "llvm.insertelement"(%743, %742, %744) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %746 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %747 = "llvm.extractelement"(%745, %746) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %748 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc10)
    %749 = "llvm.xor"(%608, %748) : (i32, i32) -> i32 loc(#loc10)
    %750 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %751 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %752 = "llvm.lshr"(%749, %751) : (i32, i32) -> i32 loc(#loc10)
    %753 = "llvm.shl"(%752, %750) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %754 = "llvm.add"(%753, %749) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %755 = "llvm.getelementptr"(%521, %754) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %756 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %757 = "llvm.load"(%755) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %758 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %759 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %760 = "llvm.insertelement"(%758, %757, %759) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %761 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %762 = "llvm.extractelement"(%760, %761) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %763 = "llvm.bitcast"(%762) : (i32) -> f32 loc(#loc10)
    %764 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %765 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %766 = "llvm.insertelement"(%764, %763, %765) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %767 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %768 = "llvm.extractelement"(%766, %767) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %769 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %770 = "llvm.xor"(%608, %769) : (i32, i32) -> i32 loc(#loc10)
    %771 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %772 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %773 = "llvm.lshr"(%770, %772) : (i32, i32) -> i32 loc(#loc10)
    %774 = "llvm.shl"(%773, %771) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %775 = "llvm.add"(%774, %770) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %776 = "llvm.getelementptr"(%521, %775) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %777 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %778 = "llvm.load"(%776) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %779 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %780 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %781 = "llvm.insertelement"(%779, %778, %780) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %782 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %783 = "llvm.extractelement"(%781, %782) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %784 = "llvm.bitcast"(%783) : (i32) -> f32 loc(#loc10)
    %785 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %786 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %787 = "llvm.insertelement"(%785, %784, %786) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %788 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %789 = "llvm.extractelement"(%787, %788) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %790 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc10)
    %791 = "llvm.xor"(%608, %790) : (i32, i32) -> i32 loc(#loc10)
    %792 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %793 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %794 = "llvm.lshr"(%791, %793) : (i32, i32) -> i32 loc(#loc10)
    %795 = "llvm.shl"(%794, %792) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %796 = "llvm.add"(%795, %791) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %797 = "llvm.getelementptr"(%521, %796) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %798 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %799 = "llvm.load"(%797) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %800 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %801 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %802 = "llvm.insertelement"(%800, %799, %801) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %803 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %804 = "llvm.extractelement"(%802, %803) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %805 = "llvm.bitcast"(%804) : (i32) -> f32 loc(#loc10)
    %806 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %807 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %808 = "llvm.insertelement"(%806, %805, %807) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %809 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %810 = "llvm.extractelement"(%808, %809) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %811 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc10)
    %812 = "llvm.xor"(%608, %811) : (i32, i32) -> i32 loc(#loc10)
    %813 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %814 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %815 = "llvm.lshr"(%812, %814) : (i32, i32) -> i32 loc(#loc10)
    %816 = "llvm.shl"(%815, %813) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %817 = "llvm.add"(%816, %812) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %818 = "llvm.getelementptr"(%521, %817) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %819 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %820 = "llvm.load"(%818) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %821 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %822 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %823 = "llvm.insertelement"(%821, %820, %822) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %824 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %825 = "llvm.extractelement"(%823, %824) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %826 = "llvm.bitcast"(%825) : (i32) -> f32 loc(#loc10)
    %827 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %828 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %829 = "llvm.insertelement"(%827, %826, %828) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %830 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %831 = "llvm.extractelement"(%829, %830) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %832 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc10)
    %833 = "llvm.xor"(%608, %832) : (i32, i32) -> i32 loc(#loc10)
    %834 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %835 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %836 = "llvm.lshr"(%833, %835) : (i32, i32) -> i32 loc(#loc10)
    %837 = "llvm.shl"(%836, %834) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %838 = "llvm.add"(%837, %833) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %839 = "llvm.getelementptr"(%521, %838) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %840 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %841 = "llvm.load"(%839) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %842 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %843 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %844 = "llvm.insertelement"(%842, %841, %843) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %845 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %846 = "llvm.extractelement"(%844, %845) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %847 = "llvm.bitcast"(%846) : (i32) -> f32 loc(#loc10)
    %848 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %849 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %850 = "llvm.insertelement"(%848, %847, %849) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %851 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %852 = "llvm.extractelement"(%850, %851) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %853 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %854 = "llvm.xor"(%566, %853) : (i32, i32) -> i32 loc(#loc10)
    %855 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %856 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %857 = "llvm.lshr"(%854, %856) : (i32, i32) -> i32 loc(#loc10)
    %858 = "llvm.shl"(%857, %855) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %859 = "llvm.add"(%858, %854) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %860 = "llvm.getelementptr"(%521, %859) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %861 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %862 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %863 = "llvm.insertelement"(%861, %511, %862) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %864 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %865 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %866 = "llvm.extractelement"(%863, %865) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %867 = "llvm.bitcast"(%866) : (f32) -> i32 loc(#loc10)
    %868 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %869 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %870 = "llvm.insertelement"(%868, %867, %869) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %871 = "llvm.inline_asm"(%860, %870, %864) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %872 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %873 = "llvm.xor"(%566, %872) : (i32, i32) -> i32 loc(#loc10)
    %874 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %875 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %876 = "llvm.lshr"(%873, %875) : (i32, i32) -> i32 loc(#loc10)
    %877 = "llvm.shl"(%876, %874) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %878 = "llvm.add"(%877, %873) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %879 = "llvm.getelementptr"(%521, %878) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %880 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %881 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %882 = "llvm.insertelement"(%880, %512, %881) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %883 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %884 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %885 = "llvm.extractelement"(%882, %884) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %886 = "llvm.bitcast"(%885) : (f32) -> i32 loc(#loc10)
    %887 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %888 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %889 = "llvm.insertelement"(%887, %886, %888) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %890 = "llvm.inline_asm"(%879, %889, %883) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %891 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %892 = "llvm.xor"(%566, %891) : (i32, i32) -> i32 loc(#loc10)
    %893 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %894 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %895 = "llvm.lshr"(%892, %894) : (i32, i32) -> i32 loc(#loc10)
    %896 = "llvm.shl"(%895, %893) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %897 = "llvm.add"(%896, %892) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %898 = "llvm.getelementptr"(%521, %897) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %899 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %900 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %901 = "llvm.insertelement"(%899, %513, %900) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %902 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %903 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %904 = "llvm.extractelement"(%901, %903) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %905 = "llvm.bitcast"(%904) : (f32) -> i32 loc(#loc10)
    %906 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %907 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %908 = "llvm.insertelement"(%906, %905, %907) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %909 = "llvm.inline_asm"(%898, %908, %902) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %910 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc10)
    %911 = "llvm.xor"(%566, %910) : (i32, i32) -> i32 loc(#loc10)
    %912 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %913 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %914 = "llvm.lshr"(%911, %913) : (i32, i32) -> i32 loc(#loc10)
    %915 = "llvm.shl"(%914, %912) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %916 = "llvm.add"(%915, %911) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %917 = "llvm.getelementptr"(%521, %916) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %918 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %919 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %920 = "llvm.insertelement"(%918, %514, %919) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %921 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %922 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %923 = "llvm.extractelement"(%920, %922) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %924 = "llvm.bitcast"(%923) : (f32) -> i32 loc(#loc10)
    %925 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %926 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %927 = "llvm.insertelement"(%925, %924, %926) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %928 = "llvm.inline_asm"(%917, %927, %921) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %929 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %930 = "llvm.xor"(%608, %929) : (i32, i32) -> i32 loc(#loc10)
    %931 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %932 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %933 = "llvm.lshr"(%930, %932) : (i32, i32) -> i32 loc(#loc10)
    %934 = "llvm.shl"(%933, %931) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %935 = "llvm.add"(%934, %930) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %936 = "llvm.getelementptr"(%521, %935) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %937 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %938 = "llvm.load"(%936) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %939 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %940 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %941 = "llvm.insertelement"(%939, %938, %940) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %942 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %943 = "llvm.extractelement"(%941, %942) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %944 = "llvm.bitcast"(%943) : (i32) -> f32 loc(#loc10)
    %945 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %946 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %947 = "llvm.insertelement"(%945, %944, %946) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %948 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %949 = "llvm.extractelement"(%947, %948) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %950 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %951 = "llvm.xor"(%608, %950) : (i32, i32) -> i32 loc(#loc10)
    %952 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %953 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %954 = "llvm.lshr"(%951, %953) : (i32, i32) -> i32 loc(#loc10)
    %955 = "llvm.shl"(%954, %952) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %956 = "llvm.add"(%955, %951) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %957 = "llvm.getelementptr"(%521, %956) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %958 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %959 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %960 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %961 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %962 = "llvm.insertelement"(%960, %959, %961) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %963 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %964 = "llvm.extractelement"(%962, %963) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %965 = "llvm.bitcast"(%964) : (i32) -> f32 loc(#loc10)
    %966 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %967 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %968 = "llvm.insertelement"(%966, %965, %967) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %969 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %970 = "llvm.extractelement"(%968, %969) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %971 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %972 = "llvm.xor"(%608, %971) : (i32, i32) -> i32 loc(#loc10)
    %973 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %974 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %975 = "llvm.lshr"(%972, %974) : (i32, i32) -> i32 loc(#loc10)
    %976 = "llvm.shl"(%975, %973) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %977 = "llvm.add"(%976, %972) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %978 = "llvm.getelementptr"(%521, %977) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %979 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %980 = "llvm.load"(%978) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %981 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %982 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %983 = "llvm.insertelement"(%981, %980, %982) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %984 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %985 = "llvm.extractelement"(%983, %984) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %986 = "llvm.bitcast"(%985) : (i32) -> f32 loc(#loc10)
    %987 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %988 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %989 = "llvm.insertelement"(%987, %986, %988) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %990 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %991 = "llvm.extractelement"(%989, %990) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %992 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc10)
    %993 = "llvm.xor"(%608, %992) : (i32, i32) -> i32 loc(#loc10)
    %994 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %995 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %996 = "llvm.lshr"(%993, %995) : (i32, i32) -> i32 loc(#loc10)
    %997 = "llvm.shl"(%996, %994) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %998 = "llvm.add"(%997, %993) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %999 = "llvm.getelementptr"(%521, %998) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1000 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1001 = "llvm.load"(%999) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1002 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1003 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1004 = "llvm.insertelement"(%1002, %1001, %1003) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1005 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1006 = "llvm.extractelement"(%1004, %1005) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1007 = "llvm.bitcast"(%1006) : (i32) -> f32 loc(#loc10)
    %1008 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1009 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1010 = "llvm.insertelement"(%1008, %1007, %1009) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1011 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1012 = "llvm.extractelement"(%1010, %1011) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1013 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %1014 = "llvm.xor"(%608, %1013) : (i32, i32) -> i32 loc(#loc10)
    %1015 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1016 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1017 = "llvm.lshr"(%1014, %1016) : (i32, i32) -> i32 loc(#loc10)
    %1018 = "llvm.shl"(%1017, %1015) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1019 = "llvm.add"(%1018, %1014) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1020 = "llvm.getelementptr"(%521, %1019) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1021 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1022 = "llvm.load"(%1020) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1023 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1024 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1025 = "llvm.insertelement"(%1023, %1022, %1024) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1026 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1027 = "llvm.extractelement"(%1025, %1026) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1028 = "llvm.bitcast"(%1027) : (i32) -> f32 loc(#loc10)
    %1029 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1030 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1031 = "llvm.insertelement"(%1029, %1028, %1030) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1032 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1033 = "llvm.extractelement"(%1031, %1032) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1034 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc10)
    %1035 = "llvm.xor"(%608, %1034) : (i32, i32) -> i32 loc(#loc10)
    %1036 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1037 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1038 = "llvm.lshr"(%1035, %1037) : (i32, i32) -> i32 loc(#loc10)
    %1039 = "llvm.shl"(%1038, %1036) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1040 = "llvm.add"(%1039, %1035) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1041 = "llvm.getelementptr"(%521, %1040) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1042 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1043 = "llvm.load"(%1041) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1044 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1045 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1046 = "llvm.insertelement"(%1044, %1043, %1045) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1047 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1048 = "llvm.extractelement"(%1046, %1047) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1049 = "llvm.bitcast"(%1048) : (i32) -> f32 loc(#loc10)
    %1050 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1051 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1052 = "llvm.insertelement"(%1050, %1049, %1051) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1053 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1054 = "llvm.extractelement"(%1052, %1053) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1055 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc10)
    %1056 = "llvm.xor"(%608, %1055) : (i32, i32) -> i32 loc(#loc10)
    %1057 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1058 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1059 = "llvm.lshr"(%1056, %1058) : (i32, i32) -> i32 loc(#loc10)
    %1060 = "llvm.shl"(%1059, %1057) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1061 = "llvm.add"(%1060, %1056) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1062 = "llvm.getelementptr"(%521, %1061) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1063 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1064 = "llvm.load"(%1062) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1065 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1066 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1067 = "llvm.insertelement"(%1065, %1064, %1066) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1068 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1069 = "llvm.extractelement"(%1067, %1068) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1070 = "llvm.bitcast"(%1069) : (i32) -> f32 loc(#loc10)
    %1071 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1072 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1073 = "llvm.insertelement"(%1071, %1070, %1072) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1074 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1075 = "llvm.extractelement"(%1073, %1074) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1076 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc10)
    %1077 = "llvm.xor"(%608, %1076) : (i32, i32) -> i32 loc(#loc10)
    %1078 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1079 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1080 = "llvm.lshr"(%1077, %1079) : (i32, i32) -> i32 loc(#loc10)
    %1081 = "llvm.shl"(%1080, %1078) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1082 = "llvm.add"(%1081, %1077) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1083 = "llvm.getelementptr"(%521, %1082) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1084 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1085 = "llvm.load"(%1083) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1086 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1087 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1088 = "llvm.insertelement"(%1086, %1085, %1087) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1089 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1090 = "llvm.extractelement"(%1088, %1089) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1091 = "llvm.bitcast"(%1090) : (i32) -> f32 loc(#loc10)
    %1092 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1093 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1094 = "llvm.insertelement"(%1092, %1091, %1093) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1095 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1096 = "llvm.extractelement"(%1094, %1095) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1097 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1098 = "llvm.insertvalue"(%1097, %705) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1099 = "llvm.insertvalue"(%1098, %726) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1100 = "llvm.insertvalue"(%1099, %747) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1101 = "llvm.insertvalue"(%1100, %768) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1102 = "llvm.insertvalue"(%1101, %789) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1103 = "llvm.insertvalue"(%1102, %810) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1104 = "llvm.insertvalue"(%1103, %831) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1105 = "llvm.insertvalue"(%1104, %852) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1106 = "llvm.insertvalue"(%1105, %949) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1107 = "llvm.insertvalue"(%1106, %970) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1108 = "llvm.insertvalue"(%1107, %991) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1109 = "llvm.insertvalue"(%1108, %1012) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1110 = "llvm.insertvalue"(%1109, %1033) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1111 = "llvm.insertvalue"(%1110, %1054) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1112 = "llvm.insertvalue"(%1111, %1075) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1113 = "llvm.insertvalue"(%1112, %1096) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1114 = "llvm.extractvalue"(%1113) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1115 = "llvm.extractvalue"(%1113) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1116 = "llvm.extractvalue"(%1113) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1117 = "llvm.extractvalue"(%1113) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1118 = "llvm.extractvalue"(%1113) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1119 = "llvm.extractvalue"(%1113) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1120 = "llvm.extractvalue"(%1113) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1121 = "llvm.extractvalue"(%1113) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1122 = "llvm.extractvalue"(%1113) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1123 = "llvm.extractvalue"(%1113) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1124 = "llvm.extractvalue"(%1113) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1125 = "llvm.extractvalue"(%1113) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1126 = "llvm.extractvalue"(%1113) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1127 = "llvm.extractvalue"(%1113) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1128 = "llvm.extractvalue"(%1113) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1129 = "llvm.extractvalue"(%1113) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1130 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1131 = "llvm.insertvalue"(%1130, %1114) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1132 = "llvm.insertvalue"(%1131, %1115) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1133 = "llvm.insertvalue"(%1132, %1116) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1134 = "llvm.insertvalue"(%1133, %1117) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1135 = "llvm.insertvalue"(%1134, %1118) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1136 = "llvm.insertvalue"(%1135, %1119) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1137 = "llvm.insertvalue"(%1136, %1120) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1138 = "llvm.insertvalue"(%1137, %1121) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1139 = "llvm.insertvalue"(%1138, %1122) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1140 = "llvm.insertvalue"(%1139, %1123) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1141 = "llvm.insertvalue"(%1140, %1124) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1142 = "llvm.insertvalue"(%1141, %1125) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1143 = "llvm.insertvalue"(%1142, %1126) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1144 = "llvm.insertvalue"(%1143, %1127) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1145 = "llvm.insertvalue"(%1144, %1128) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1146 = "llvm.insertvalue"(%1145, %1129) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1147 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1148 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1149 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1150 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1151 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1152 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1153 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1154 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1155 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1156 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1157 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1158 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1159 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1160 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1161 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1162 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1163 = "llvm.add"(%1147, %1155) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1164 = "llvm.add"(%1148, %1156) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1165 = "llvm.add"(%1149, %1157) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1166 = "llvm.add"(%1150, %1158) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1167 = "llvm.add"(%1151, %1159) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1168 = "llvm.add"(%1152, %1160) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1169 = "llvm.add"(%1153, %1161) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1170 = "llvm.add"(%1154, %1162) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1171 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1172 = "llvm.insertvalue"(%1171, %1163) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1173 = "llvm.insertvalue"(%1172, %1164) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1174 = "llvm.insertvalue"(%1173, %1165) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1175 = "llvm.insertvalue"(%1174, %1166) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1176 = "llvm.insertvalue"(%1175, %1167) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1177 = "llvm.insertvalue"(%1176, %1168) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1178 = "llvm.insertvalue"(%1177, %1169) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1179 = "llvm.insertvalue"(%1178, %1170) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1180 = "llvm.mul"(%arg2, %1) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1181 = "llvm.bitcast"(%1180) : (i32) -> i32 loc(#loc13)
    %1182 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1183 = "llvm.insertvalue"(%1182, %1181) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1184 = "llvm.insertvalue"(%1183, %1181) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1185 = "llvm.insertvalue"(%1184, %1181) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1186 = "llvm.insertvalue"(%1185, %1181) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1187 = "llvm.insertvalue"(%1186, %1181) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1188 = "llvm.insertvalue"(%1187, %1181) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1189 = "llvm.insertvalue"(%1188, %1181) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1190 = "llvm.insertvalue"(%1189, %1181) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1191 = "llvm.extractvalue"(%1179) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1192 = "llvm.extractvalue"(%1179) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1193 = "llvm.extractvalue"(%1179) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1194 = "llvm.extractvalue"(%1179) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1195 = "llvm.extractvalue"(%1179) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1196 = "llvm.extractvalue"(%1179) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1197 = "llvm.extractvalue"(%1179) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1198 = "llvm.extractvalue"(%1179) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1199 = "llvm.extractvalue"(%1190) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1200 = "llvm.extractvalue"(%1190) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1201 = "llvm.extractvalue"(%1190) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1202 = "llvm.extractvalue"(%1190) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1203 = "llvm.extractvalue"(%1190) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1204 = "llvm.extractvalue"(%1190) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1205 = "llvm.extractvalue"(%1190) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1206 = "llvm.extractvalue"(%1190) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1207 = "llvm.icmp"(%1191, %1199) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1208 = "llvm.icmp"(%1192, %1200) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1209 = "llvm.icmp"(%1193, %1201) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1210 = "llvm.icmp"(%1194, %1202) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1211 = "llvm.icmp"(%1195, %1203) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1212 = "llvm.icmp"(%1196, %1204) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1213 = "llvm.icmp"(%1197, %1205) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1214 = "llvm.icmp"(%1198, %1206) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1215 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1216 = "llvm.insertvalue"(%1215, %1207) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1217 = "llvm.insertvalue"(%1216, %1208) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1218 = "llvm.insertvalue"(%1217, %1209) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1219 = "llvm.insertvalue"(%1218, %1210) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1220 = "llvm.insertvalue"(%1219, %1211) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1221 = "llvm.insertvalue"(%1220, %1212) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1222 = "llvm.insertvalue"(%1221, %1213) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1223 = "llvm.insertvalue"(%1222, %1214) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1224 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1225 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1226 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1227 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1228 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1229 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1230 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1231 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1232 = "llvm.extractvalue"(%1179) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1233 = "llvm.extractvalue"(%1179) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1234 = "llvm.extractvalue"(%1179) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1235 = "llvm.extractvalue"(%1179) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1236 = "llvm.extractvalue"(%1179) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1237 = "llvm.extractvalue"(%1179) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1238 = "llvm.extractvalue"(%1179) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1239 = "llvm.extractvalue"(%1179) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1240 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1241 = "llvm.insertvalue"(%1240, %1224) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1242 = "llvm.insertvalue"(%1241, %1232) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1243 = "llvm.insertvalue"(%1242, %1225) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1244 = "llvm.insertvalue"(%1243, %1233) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1245 = "llvm.insertvalue"(%1244, %1226) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1246 = "llvm.insertvalue"(%1245, %1234) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1247 = "llvm.insertvalue"(%1246, %1227) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1248 = "llvm.insertvalue"(%1247, %1235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1249 = "llvm.insertvalue"(%1248, %1228) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1250 = "llvm.insertvalue"(%1249, %1236) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1251 = "llvm.insertvalue"(%1250, %1229) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1252 = "llvm.insertvalue"(%1251, %1237) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1253 = "llvm.insertvalue"(%1252, %1230) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1254 = "llvm.insertvalue"(%1253, %1238) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1255 = "llvm.insertvalue"(%1254, %1231) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1256 = "llvm.insertvalue"(%1255, %1239) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1257 = "llvm.extractvalue"(%1256) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1258 = "llvm.extractvalue"(%1256) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1259 = "llvm.extractvalue"(%1256) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1260 = "llvm.extractvalue"(%1256) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1261 = "llvm.extractvalue"(%1256) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1262 = "llvm.extractvalue"(%1256) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1263 = "llvm.extractvalue"(%1256) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1264 = "llvm.extractvalue"(%1256) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1265 = "llvm.extractvalue"(%1256) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1266 = "llvm.extractvalue"(%1256) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1267 = "llvm.extractvalue"(%1256) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1268 = "llvm.extractvalue"(%1256) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1269 = "llvm.extractvalue"(%1256) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1270 = "llvm.extractvalue"(%1256) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1271 = "llvm.extractvalue"(%1256) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1272 = "llvm.extractvalue"(%1256) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1273 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc15)
    %1274 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1275 = "llvm.urem"(%1273, %1274) : (i32, i32) -> i32 loc(#loc15)
    %1276 = "llvm.udiv"(%1273, %1274) : (i32, i32) -> i32 loc(#loc15)
    %1277 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1278 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1279 = "llvm.getelementptr"(%1278, %1277) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1280 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1281 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1282 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1283 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1284 = "llvm.and"(%1275, %1283) : (i32, i32) -> i32 loc(#loc15)
    %1285 = "llvm.icmp"(%1284, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1286 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1287 = "llvm.select"(%1285, %1282, %1286) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1288 = "llvm.xor"(%1282, %1287) : (i32, i32) -> i32 loc(#loc15)
    %1289 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1290 = "llvm.and"(%1275, %1289) : (i32, i32) -> i32 loc(#loc15)
    %1291 = "llvm.icmp"(%1290, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1292 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1293 = "llvm.select"(%1291, %1282, %1292) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1294 = "llvm.xor"(%1288, %1293) : (i32, i32) -> i32 loc(#loc15)
    %1295 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1296 = "llvm.and"(%1275, %1295) : (i32, i32) -> i32 loc(#loc15)
    %1297 = "llvm.icmp"(%1296, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1298 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1299 = "llvm.select"(%1297, %1282, %1298) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1300 = "llvm.xor"(%1294, %1299) : (i32, i32) -> i32 loc(#loc15)
    %1301 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1302 = "llvm.and"(%1275, %1301) : (i32, i32) -> i32 loc(#loc15)
    %1303 = "llvm.icmp"(%1302, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1304 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1305 = "llvm.select"(%1303, %1282, %1304) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1306 = "llvm.xor"(%1300, %1305) : (i32, i32) -> i32 loc(#loc15)
    %1307 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1308 = "llvm.and"(%1275, %1307) : (i32, i32) -> i32 loc(#loc15)
    %1309 = "llvm.icmp"(%1308, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1310 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1311 = "llvm.select"(%1309, %1282, %1310) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1312 = "llvm.xor"(%1306, %1311) : (i32, i32) -> i32 loc(#loc15)
    %1313 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1314 = "llvm.and"(%1276, %1313) : (i32, i32) -> i32 loc(#loc15)
    %1315 = "llvm.icmp"(%1314, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1316 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc15)
    %1317 = "llvm.select"(%1315, %1282, %1316) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1318 = "llvm.xor"(%1312, %1317) : (i32, i32) -> i32 loc(#loc15)
    %1319 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1320 = "llvm.and"(%1276, %1319) : (i32, i32) -> i32 loc(#loc15)
    %1321 = "llvm.icmp"(%1320, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1322 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1323 = "llvm.select"(%1321, %1282, %1322) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1324 = "llvm.xor"(%1318, %1323) : (i32, i32) -> i32 loc(#loc15)
    %1325 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1326 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1327 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1328 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1329 = "llvm.and"(%1275, %1328) : (i32, i32) -> i32 loc(#loc15)
    %1330 = "llvm.icmp"(%1329, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1331 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1332 = "llvm.select"(%1330, %1327, %1331) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1333 = "llvm.xor"(%1327, %1332) : (i32, i32) -> i32 loc(#loc15)
    %1334 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1335 = "llvm.and"(%1275, %1334) : (i32, i32) -> i32 loc(#loc15)
    %1336 = "llvm.icmp"(%1335, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1337 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1338 = "llvm.select"(%1336, %1327, %1337) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1339 = "llvm.xor"(%1333, %1338) : (i32, i32) -> i32 loc(#loc15)
    %1340 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1341 = "llvm.and"(%1275, %1340) : (i32, i32) -> i32 loc(#loc15)
    %1342 = "llvm.icmp"(%1341, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1343 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1344 = "llvm.select"(%1342, %1327, %1343) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1345 = "llvm.xor"(%1339, %1344) : (i32, i32) -> i32 loc(#loc15)
    %1346 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1347 = "llvm.and"(%1275, %1346) : (i32, i32) -> i32 loc(#loc15)
    %1348 = "llvm.icmp"(%1347, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1349 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1350 = "llvm.select"(%1348, %1327, %1349) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1351 = "llvm.xor"(%1345, %1350) : (i32, i32) -> i32 loc(#loc15)
    %1352 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1353 = "llvm.and"(%1275, %1352) : (i32, i32) -> i32 loc(#loc15)
    %1354 = "llvm.icmp"(%1353, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1355 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1356 = "llvm.select"(%1354, %1327, %1355) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1357 = "llvm.xor"(%1351, %1356) : (i32, i32) -> i32 loc(#loc15)
    %1358 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1359 = "llvm.and"(%1276, %1358) : (i32, i32) -> i32 loc(#loc15)
    %1360 = "llvm.icmp"(%1359, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1361 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1362 = "llvm.select"(%1360, %1327, %1361) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1363 = "llvm.xor"(%1357, %1362) : (i32, i32) -> i32 loc(#loc15)
    %1364 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1365 = "llvm.and"(%1276, %1364) : (i32, i32) -> i32 loc(#loc15)
    %1366 = "llvm.icmp"(%1365, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1367 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc15)
    %1368 = "llvm.select"(%1366, %1327, %1367) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1369 = "llvm.xor"(%1363, %1368) : (i32, i32) -> i32 loc(#loc15)
    %1370 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1371 = "llvm.xor"(%1324, %1370) : (i32, i32) -> i32 loc(#loc15)
    %1372 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1373 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1374 = "llvm.lshr"(%1371, %1373) : (i32, i32) -> i32 loc(#loc15)
    %1375 = "llvm.shl"(%1374, %1372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1376 = "llvm.add"(%1375, %1371) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1377 = "llvm.getelementptr"(%1279, %1376) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1378 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1379 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1380 = "llvm.insertelement"(%1378, %1257, %1379) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1381 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1382 = "llvm.insertelement"(%1380, %1258, %1381) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1383 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1384 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1385 = "llvm.extractelement"(%1382, %1384) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1386 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1387 = "llvm.extractelement"(%1382, %1386) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1388 = "llvm.inline_asm"(%1377, %1385, %1387, %1383) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1389 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1390 = "llvm.xor"(%1369, %1389) : (i32, i32) -> i32 loc(#loc15)
    %1391 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1392 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1393 = "llvm.lshr"(%1390, %1392) : (i32, i32) -> i32 loc(#loc15)
    %1394 = "llvm.shl"(%1393, %1391) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1395 = "llvm.add"(%1394, %1390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1396 = "llvm.getelementptr"(%1279, %1395) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1397 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1398 = "llvm.load"(%1396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1399 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1400 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1401 = "llvm.insertelement"(%1399, %1398, %1400) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1402 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1403 = "llvm.extractelement"(%1401, %1402) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1404 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1405 = "llvm.xor"(%1369, %1404) : (i32, i32) -> i32 loc(#loc15)
    %1406 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1407 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1408 = "llvm.lshr"(%1405, %1407) : (i32, i32) -> i32 loc(#loc15)
    %1409 = "llvm.shl"(%1408, %1406) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1410 = "llvm.add"(%1409, %1405) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1411 = "llvm.getelementptr"(%1279, %1410) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1412 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1413 = "llvm.load"(%1411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1414 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1415 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1416 = "llvm.insertelement"(%1414, %1413, %1415) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1417 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1418 = "llvm.extractelement"(%1416, %1417) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1419 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1420 = "llvm.xor"(%1324, %1419) : (i32, i32) -> i32 loc(#loc15)
    %1421 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1422 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1423 = "llvm.lshr"(%1420, %1422) : (i32, i32) -> i32 loc(#loc15)
    %1424 = "llvm.shl"(%1423, %1421) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1425 = "llvm.add"(%1424, %1420) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1426 = "llvm.getelementptr"(%1279, %1425) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1427 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1428 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1429 = "llvm.insertelement"(%1427, %1259, %1428) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1430 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1431 = "llvm.insertelement"(%1429, %1260, %1430) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1432 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1433 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1434 = "llvm.extractelement"(%1431, %1433) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1435 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1436 = "llvm.extractelement"(%1431, %1435) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1437 = "llvm.inline_asm"(%1426, %1434, %1436, %1432) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1438 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1439 = "llvm.xor"(%1369, %1438) : (i32, i32) -> i32 loc(#loc15)
    %1440 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1441 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1442 = "llvm.lshr"(%1439, %1441) : (i32, i32) -> i32 loc(#loc15)
    %1443 = "llvm.shl"(%1442, %1440) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1444 = "llvm.add"(%1443, %1439) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1445 = "llvm.getelementptr"(%1279, %1444) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1446 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1447 = "llvm.load"(%1445) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1448 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1449 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1450 = "llvm.insertelement"(%1448, %1447, %1449) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1451 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1452 = "llvm.extractelement"(%1450, %1451) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1453 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1454 = "llvm.xor"(%1369, %1453) : (i32, i32) -> i32 loc(#loc15)
    %1455 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1456 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1457 = "llvm.lshr"(%1454, %1456) : (i32, i32) -> i32 loc(#loc15)
    %1458 = "llvm.shl"(%1457, %1455) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1459 = "llvm.add"(%1458, %1454) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1460 = "llvm.getelementptr"(%1279, %1459) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1461 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1462 = "llvm.load"(%1460) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1463 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1464 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1465 = "llvm.insertelement"(%1463, %1462, %1464) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1466 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1467 = "llvm.extractelement"(%1465, %1466) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1468 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1469 = "llvm.xor"(%1324, %1468) : (i32, i32) -> i32 loc(#loc15)
    %1470 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1471 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1472 = "llvm.lshr"(%1469, %1471) : (i32, i32) -> i32 loc(#loc15)
    %1473 = "llvm.shl"(%1472, %1470) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1474 = "llvm.add"(%1473, %1469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1475 = "llvm.getelementptr"(%1279, %1474) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1476 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1477 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1478 = "llvm.insertelement"(%1476, %1261, %1477) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1479 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1480 = "llvm.insertelement"(%1478, %1262, %1479) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1481 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1482 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1483 = "llvm.extractelement"(%1480, %1482) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1484 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1485 = "llvm.extractelement"(%1480, %1484) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1486 = "llvm.inline_asm"(%1475, %1483, %1485, %1481) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1487 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1488 = "llvm.xor"(%1369, %1487) : (i32, i32) -> i32 loc(#loc15)
    %1489 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1490 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1491 = "llvm.lshr"(%1488, %1490) : (i32, i32) -> i32 loc(#loc15)
    %1492 = "llvm.shl"(%1491, %1489) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1493 = "llvm.add"(%1492, %1488) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1494 = "llvm.getelementptr"(%1279, %1493) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1495 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1496 = "llvm.load"(%1494) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1497 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1498 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1499 = "llvm.insertelement"(%1497, %1496, %1498) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1500 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1501 = "llvm.extractelement"(%1499, %1500) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1502 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1503 = "llvm.xor"(%1369, %1502) : (i32, i32) -> i32 loc(#loc15)
    %1504 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1505 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1506 = "llvm.lshr"(%1503, %1505) : (i32, i32) -> i32 loc(#loc15)
    %1507 = "llvm.shl"(%1506, %1504) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1508 = "llvm.add"(%1507, %1503) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1509 = "llvm.getelementptr"(%1279, %1508) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1510 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1511 = "llvm.load"(%1509) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1512 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1513 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1514 = "llvm.insertelement"(%1512, %1511, %1513) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1515 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1516 = "llvm.extractelement"(%1514, %1515) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1517 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1518 = "llvm.xor"(%1324, %1517) : (i32, i32) -> i32 loc(#loc15)
    %1519 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1520 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1521 = "llvm.lshr"(%1518, %1520) : (i32, i32) -> i32 loc(#loc15)
    %1522 = "llvm.shl"(%1521, %1519) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1523 = "llvm.add"(%1522, %1518) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1524 = "llvm.getelementptr"(%1279, %1523) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1525 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1526 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1527 = "llvm.insertelement"(%1525, %1263, %1526) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1528 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1529 = "llvm.insertelement"(%1527, %1264, %1528) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1530 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1531 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1532 = "llvm.extractelement"(%1529, %1531) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1533 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1534 = "llvm.extractelement"(%1529, %1533) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1535 = "llvm.inline_asm"(%1524, %1532, %1534, %1530) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1536 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1537 = "llvm.xor"(%1369, %1536) : (i32, i32) -> i32 loc(#loc15)
    %1538 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1539 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1540 = "llvm.lshr"(%1537, %1539) : (i32, i32) -> i32 loc(#loc15)
    %1541 = "llvm.shl"(%1540, %1538) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1542 = "llvm.add"(%1541, %1537) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1543 = "llvm.getelementptr"(%1279, %1542) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1544 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1545 = "llvm.load"(%1543) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1546 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1547 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1548 = "llvm.insertelement"(%1546, %1545, %1547) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1549 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1550 = "llvm.extractelement"(%1548, %1549) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1551 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1552 = "llvm.xor"(%1369, %1551) : (i32, i32) -> i32 loc(#loc15)
    %1553 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1554 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1555 = "llvm.lshr"(%1552, %1554) : (i32, i32) -> i32 loc(#loc15)
    %1556 = "llvm.shl"(%1555, %1553) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1557 = "llvm.add"(%1556, %1552) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1558 = "llvm.getelementptr"(%1279, %1557) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1559 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1560 = "llvm.load"(%1558) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1561 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1562 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1563 = "llvm.insertelement"(%1561, %1560, %1562) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1564 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1565 = "llvm.extractelement"(%1563, %1564) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1566 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1567 = "llvm.xor"(%1324, %1566) : (i32, i32) -> i32 loc(#loc15)
    %1568 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1569 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1570 = "llvm.lshr"(%1567, %1569) : (i32, i32) -> i32 loc(#loc15)
    %1571 = "llvm.shl"(%1570, %1568) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1572 = "llvm.add"(%1571, %1567) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1573 = "llvm.getelementptr"(%1279, %1572) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1574 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1575 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1576 = "llvm.insertelement"(%1574, %1265, %1575) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1577 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1578 = "llvm.insertelement"(%1576, %1266, %1577) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1579 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1580 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1581 = "llvm.extractelement"(%1578, %1580) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1582 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1583 = "llvm.extractelement"(%1578, %1582) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1584 = "llvm.inline_asm"(%1573, %1581, %1583, %1579) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1585 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1586 = "llvm.xor"(%1369, %1585) : (i32, i32) -> i32 loc(#loc15)
    %1587 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1588 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1589 = "llvm.lshr"(%1586, %1588) : (i32, i32) -> i32 loc(#loc15)
    %1590 = "llvm.shl"(%1589, %1587) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1591 = "llvm.add"(%1590, %1586) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1592 = "llvm.getelementptr"(%1279, %1591) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1593 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1594 = "llvm.load"(%1592) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1595 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1596 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1597 = "llvm.insertelement"(%1595, %1594, %1596) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1598 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1599 = "llvm.extractelement"(%1597, %1598) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1600 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1601 = "llvm.xor"(%1369, %1600) : (i32, i32) -> i32 loc(#loc15)
    %1602 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1603 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1604 = "llvm.lshr"(%1601, %1603) : (i32, i32) -> i32 loc(#loc15)
    %1605 = "llvm.shl"(%1604, %1602) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1606 = "llvm.add"(%1605, %1601) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1607 = "llvm.getelementptr"(%1279, %1606) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1608 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1609 = "llvm.load"(%1607) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1610 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1611 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1612 = "llvm.insertelement"(%1610, %1609, %1611) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1613 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1614 = "llvm.extractelement"(%1612, %1613) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1615 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1616 = "llvm.xor"(%1324, %1615) : (i32, i32) -> i32 loc(#loc15)
    %1617 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1618 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1619 = "llvm.lshr"(%1616, %1618) : (i32, i32) -> i32 loc(#loc15)
    %1620 = "llvm.shl"(%1619, %1617) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1621 = "llvm.add"(%1620, %1616) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1622 = "llvm.getelementptr"(%1279, %1621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1623 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1624 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1625 = "llvm.insertelement"(%1623, %1267, %1624) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1626 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1627 = "llvm.insertelement"(%1625, %1268, %1626) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1628 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1629 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1630 = "llvm.extractelement"(%1627, %1629) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1631 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1632 = "llvm.extractelement"(%1627, %1631) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1633 = "llvm.inline_asm"(%1622, %1630, %1632, %1628) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1634 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1635 = "llvm.xor"(%1369, %1634) : (i32, i32) -> i32 loc(#loc15)
    %1636 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1637 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1638 = "llvm.lshr"(%1635, %1637) : (i32, i32) -> i32 loc(#loc15)
    %1639 = "llvm.shl"(%1638, %1636) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1640 = "llvm.add"(%1639, %1635) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1641 = "llvm.getelementptr"(%1279, %1640) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1642 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1643 = "llvm.load"(%1641) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1644 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1645 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1646 = "llvm.insertelement"(%1644, %1643, %1645) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1647 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1648 = "llvm.extractelement"(%1646, %1647) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1649 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1650 = "llvm.xor"(%1369, %1649) : (i32, i32) -> i32 loc(#loc15)
    %1651 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1652 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1653 = "llvm.lshr"(%1650, %1652) : (i32, i32) -> i32 loc(#loc15)
    %1654 = "llvm.shl"(%1653, %1651) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1655 = "llvm.add"(%1654, %1650) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1656 = "llvm.getelementptr"(%1279, %1655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1657 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1658 = "llvm.load"(%1656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1659 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1660 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1661 = "llvm.insertelement"(%1659, %1658, %1660) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1662 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1663 = "llvm.extractelement"(%1661, %1662) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1664 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1665 = "llvm.xor"(%1324, %1664) : (i32, i32) -> i32 loc(#loc15)
    %1666 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1667 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1668 = "llvm.lshr"(%1665, %1667) : (i32, i32) -> i32 loc(#loc15)
    %1669 = "llvm.shl"(%1668, %1666) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1670 = "llvm.add"(%1669, %1665) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1671 = "llvm.getelementptr"(%1279, %1670) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1672 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1673 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1674 = "llvm.insertelement"(%1672, %1269, %1673) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1675 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1676 = "llvm.insertelement"(%1674, %1270, %1675) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1677 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1678 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1679 = "llvm.extractelement"(%1676, %1678) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1680 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1681 = "llvm.extractelement"(%1676, %1680) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1682 = "llvm.inline_asm"(%1671, %1679, %1681, %1677) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1683 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1684 = "llvm.xor"(%1369, %1683) : (i32, i32) -> i32 loc(#loc15)
    %1685 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1686 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1687 = "llvm.lshr"(%1684, %1686) : (i32, i32) -> i32 loc(#loc15)
    %1688 = "llvm.shl"(%1687, %1685) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1689 = "llvm.add"(%1688, %1684) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1690 = "llvm.getelementptr"(%1279, %1689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1691 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1692 = "llvm.load"(%1690) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1693 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1694 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1695 = "llvm.insertelement"(%1693, %1692, %1694) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1696 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1697 = "llvm.extractelement"(%1695, %1696) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1698 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1699 = "llvm.xor"(%1369, %1698) : (i32, i32) -> i32 loc(#loc15)
    %1700 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1701 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1702 = "llvm.lshr"(%1699, %1701) : (i32, i32) -> i32 loc(#loc15)
    %1703 = "llvm.shl"(%1702, %1700) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1704 = "llvm.add"(%1703, %1699) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1705 = "llvm.getelementptr"(%1279, %1704) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1706 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1707 = "llvm.load"(%1705) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1708 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1709 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1710 = "llvm.insertelement"(%1708, %1707, %1709) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1711 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1712 = "llvm.extractelement"(%1710, %1711) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1713 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1714 = "llvm.xor"(%1324, %1713) : (i32, i32) -> i32 loc(#loc15)
    %1715 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1716 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1717 = "llvm.lshr"(%1714, %1716) : (i32, i32) -> i32 loc(#loc15)
    %1718 = "llvm.shl"(%1717, %1715) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1719 = "llvm.add"(%1718, %1714) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1720 = "llvm.getelementptr"(%1279, %1719) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1721 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1722 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1723 = "llvm.insertelement"(%1721, %1271, %1722) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1724 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1725 = "llvm.insertelement"(%1723, %1272, %1724) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1726 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1727 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1728 = "llvm.extractelement"(%1725, %1727) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1729 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1730 = "llvm.extractelement"(%1725, %1729) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1731 = "llvm.inline_asm"(%1720, %1728, %1730, %1726) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1732 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1733 = "llvm.xor"(%1369, %1732) : (i32, i32) -> i32 loc(#loc15)
    %1734 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1735 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1736 = "llvm.lshr"(%1733, %1735) : (i32, i32) -> i32 loc(#loc15)
    %1737 = "llvm.shl"(%1736, %1734) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1738 = "llvm.add"(%1737, %1733) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1739 = "llvm.getelementptr"(%1279, %1738) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1740 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1741 = "llvm.load"(%1739) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1742 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1743 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1744 = "llvm.insertelement"(%1742, %1741, %1743) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1745 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1746 = "llvm.extractelement"(%1744, %1745) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1747 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1748 = "llvm.xor"(%1369, %1747) : (i32, i32) -> i32 loc(#loc15)
    %1749 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1750 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1751 = "llvm.lshr"(%1748, %1750) : (i32, i32) -> i32 loc(#loc15)
    %1752 = "llvm.shl"(%1751, %1749) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1753 = "llvm.add"(%1752, %1748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1754 = "llvm.getelementptr"(%1279, %1753) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1755 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1756 = "llvm.load"(%1754) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1757 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1758 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1759 = "llvm.insertelement"(%1757, %1756, %1758) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1760 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1761 = "llvm.extractelement"(%1759, %1760) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1762 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1763 = "llvm.insertvalue"(%1762, %1403) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1764 = "llvm.insertvalue"(%1763, %1418) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1765 = "llvm.insertvalue"(%1764, %1452) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1766 = "llvm.insertvalue"(%1765, %1467) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1767 = "llvm.insertvalue"(%1766, %1501) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1768 = "llvm.insertvalue"(%1767, %1516) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1769 = "llvm.insertvalue"(%1768, %1550) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1770 = "llvm.insertvalue"(%1769, %1565) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1771 = "llvm.insertvalue"(%1770, %1599) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1772 = "llvm.insertvalue"(%1771, %1614) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1773 = "llvm.insertvalue"(%1772, %1648) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1774 = "llvm.insertvalue"(%1773, %1663) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1775 = "llvm.insertvalue"(%1774, %1697) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1776 = "llvm.insertvalue"(%1775, %1712) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1777 = "llvm.insertvalue"(%1776, %1746) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1778 = "llvm.insertvalue"(%1777, %1761) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1779 = "llvm.extractvalue"(%354) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1780 = "llvm.extractvalue"(%354) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1781 = "llvm.extractvalue"(%354) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1782 = "llvm.extractvalue"(%354) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1783 = "llvm.extractvalue"(%354) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1784 = "llvm.extractvalue"(%354) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1785 = "llvm.extractvalue"(%354) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1786 = "llvm.extractvalue"(%354) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1787 = "llvm.extractvalue"(%1223) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1788 = "llvm.extractvalue"(%1223) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1789 = "llvm.extractvalue"(%1223) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1790 = "llvm.extractvalue"(%1223) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1791 = "llvm.extractvalue"(%1223) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1792 = "llvm.extractvalue"(%1223) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1793 = "llvm.extractvalue"(%1223) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1794 = "llvm.extractvalue"(%1223) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1795 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1796 = "llvm.insertvalue"(%1795, %1779) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1797 = "llvm.insertvalue"(%1796, %1787) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1798 = "llvm.insertvalue"(%1797, %1780) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1799 = "llvm.insertvalue"(%1798, %1788) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1800 = "llvm.insertvalue"(%1799, %1781) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1801 = "llvm.insertvalue"(%1800, %1789) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1802 = "llvm.insertvalue"(%1801, %1782) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1803 = "llvm.insertvalue"(%1802, %1790) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1804 = "llvm.insertvalue"(%1803, %1783) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1805 = "llvm.insertvalue"(%1804, %1791) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1806 = "llvm.insertvalue"(%1805, %1784) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1807 = "llvm.insertvalue"(%1806, %1792) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1808 = "llvm.insertvalue"(%1807, %1785) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1809 = "llvm.insertvalue"(%1808, %1793) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1810 = "llvm.insertvalue"(%1809, %1786) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1811 = "llvm.insertvalue"(%1810, %1794) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1812 = "llvm.extractvalue"(%1811) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1813 = "llvm.extractvalue"(%1811) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1814 = "llvm.extractvalue"(%1811) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1815 = "llvm.extractvalue"(%1811) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1816 = "llvm.extractvalue"(%1811) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1817 = "llvm.extractvalue"(%1811) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1818 = "llvm.extractvalue"(%1811) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1819 = "llvm.extractvalue"(%1811) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1820 = "llvm.extractvalue"(%1811) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1821 = "llvm.extractvalue"(%1811) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1822 = "llvm.extractvalue"(%1811) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1823 = "llvm.extractvalue"(%1811) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1824 = "llvm.extractvalue"(%1811) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1825 = "llvm.extractvalue"(%1811) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1826 = "llvm.extractvalue"(%1811) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1827 = "llvm.extractvalue"(%1811) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1828 = "llvm.zext"(%1812) : (i1) -> i8 loc(#loc17)
    %1829 = "llvm.zext"(%1813) : (i1) -> i8 loc(#loc17)
    %1830 = "llvm.zext"(%1814) : (i1) -> i8 loc(#loc17)
    %1831 = "llvm.zext"(%1815) : (i1) -> i8 loc(#loc17)
    %1832 = "llvm.zext"(%1816) : (i1) -> i8 loc(#loc17)
    %1833 = "llvm.zext"(%1817) : (i1) -> i8 loc(#loc17)
    %1834 = "llvm.zext"(%1818) : (i1) -> i8 loc(#loc17)
    %1835 = "llvm.zext"(%1819) : (i1) -> i8 loc(#loc17)
    %1836 = "llvm.zext"(%1820) : (i1) -> i8 loc(#loc17)
    %1837 = "llvm.zext"(%1821) : (i1) -> i8 loc(#loc17)
    %1838 = "llvm.zext"(%1822) : (i1) -> i8 loc(#loc17)
    %1839 = "llvm.zext"(%1823) : (i1) -> i8 loc(#loc17)
    %1840 = "llvm.zext"(%1824) : (i1) -> i8 loc(#loc17)
    %1841 = "llvm.zext"(%1825) : (i1) -> i8 loc(#loc17)
    %1842 = "llvm.zext"(%1826) : (i1) -> i8 loc(#loc17)
    %1843 = "llvm.zext"(%1827) : (i1) -> i8 loc(#loc17)
    %1844 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc17)
    %1845 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1846 = "llvm.urem"(%1844, %1845) : (i32, i32) -> i32 loc(#loc17)
    %1847 = "llvm.udiv"(%1844, %1845) : (i32, i32) -> i32 loc(#loc17)
    %1848 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1849 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1850 = "llvm.getelementptr"(%1849, %1848) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1851 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1852 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1853 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1854 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1855 = "llvm.and"(%1846, %1854) : (i32, i32) -> i32 loc(#loc17)
    %1856 = "llvm.icmp"(%1855, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1857 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1858 = "llvm.select"(%1856, %1853, %1857) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1859 = "llvm.xor"(%1853, %1858) : (i32, i32) -> i32 loc(#loc17)
    %1860 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1861 = "llvm.and"(%1846, %1860) : (i32, i32) -> i32 loc(#loc17)
    %1862 = "llvm.icmp"(%1861, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1863 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1864 = "llvm.select"(%1862, %1853, %1863) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1865 = "llvm.xor"(%1859, %1864) : (i32, i32) -> i32 loc(#loc17)
    %1866 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1867 = "llvm.and"(%1846, %1866) : (i32, i32) -> i32 loc(#loc17)
    %1868 = "llvm.icmp"(%1867, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1869 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1870 = "llvm.select"(%1868, %1853, %1869) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1871 = "llvm.xor"(%1865, %1870) : (i32, i32) -> i32 loc(#loc17)
    %1872 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1873 = "llvm.and"(%1846, %1872) : (i32, i32) -> i32 loc(#loc17)
    %1874 = "llvm.icmp"(%1873, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1875 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1876 = "llvm.select"(%1874, %1853, %1875) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1877 = "llvm.xor"(%1871, %1876) : (i32, i32) -> i32 loc(#loc17)
    %1878 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1879 = "llvm.and"(%1846, %1878) : (i32, i32) -> i32 loc(#loc17)
    %1880 = "llvm.icmp"(%1879, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1881 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1882 = "llvm.select"(%1880, %1853, %1881) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1883 = "llvm.xor"(%1877, %1882) : (i32, i32) -> i32 loc(#loc17)
    %1884 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1885 = "llvm.and"(%1847, %1884) : (i32, i32) -> i32 loc(#loc17)
    %1886 = "llvm.icmp"(%1885, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1887 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc17)
    %1888 = "llvm.select"(%1886, %1853, %1887) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1889 = "llvm.xor"(%1883, %1888) : (i32, i32) -> i32 loc(#loc17)
    %1890 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1891 = "llvm.and"(%1847, %1890) : (i32, i32) -> i32 loc(#loc17)
    %1892 = "llvm.icmp"(%1891, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1893 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %1894 = "llvm.select"(%1892, %1853, %1893) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1895 = "llvm.xor"(%1889, %1894) : (i32, i32) -> i32 loc(#loc17)
    %1896 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1897 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1898 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1899 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1900 = "llvm.and"(%1846, %1899) : (i32, i32) -> i32 loc(#loc17)
    %1901 = "llvm.icmp"(%1900, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1902 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1903 = "llvm.select"(%1901, %1898, %1902) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1904 = "llvm.xor"(%1898, %1903) : (i32, i32) -> i32 loc(#loc17)
    %1905 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1906 = "llvm.and"(%1846, %1905) : (i32, i32) -> i32 loc(#loc17)
    %1907 = "llvm.icmp"(%1906, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1908 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1909 = "llvm.select"(%1907, %1898, %1908) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1910 = "llvm.xor"(%1904, %1909) : (i32, i32) -> i32 loc(#loc17)
    %1911 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1912 = "llvm.and"(%1846, %1911) : (i32, i32) -> i32 loc(#loc17)
    %1913 = "llvm.icmp"(%1912, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1914 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1915 = "llvm.select"(%1913, %1898, %1914) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1916 = "llvm.xor"(%1910, %1915) : (i32, i32) -> i32 loc(#loc17)
    %1917 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1918 = "llvm.and"(%1846, %1917) : (i32, i32) -> i32 loc(#loc17)
    %1919 = "llvm.icmp"(%1918, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1920 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1921 = "llvm.select"(%1919, %1898, %1920) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1922 = "llvm.xor"(%1916, %1921) : (i32, i32) -> i32 loc(#loc17)
    %1923 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1924 = "llvm.and"(%1846, %1923) : (i32, i32) -> i32 loc(#loc17)
    %1925 = "llvm.icmp"(%1924, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1926 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1927 = "llvm.select"(%1925, %1898, %1926) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1928 = "llvm.xor"(%1922, %1927) : (i32, i32) -> i32 loc(#loc17)
    %1929 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1930 = "llvm.and"(%1847, %1929) : (i32, i32) -> i32 loc(#loc17)
    %1931 = "llvm.icmp"(%1930, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1932 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1933 = "llvm.select"(%1931, %1898, %1932) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1934 = "llvm.xor"(%1928, %1933) : (i32, i32) -> i32 loc(#loc17)
    %1935 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1936 = "llvm.and"(%1847, %1935) : (i32, i32) -> i32 loc(#loc17)
    %1937 = "llvm.icmp"(%1936, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1938 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc17)
    %1939 = "llvm.select"(%1937, %1898, %1938) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1940 = "llvm.xor"(%1934, %1939) : (i32, i32) -> i32 loc(#loc17)
    %1941 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1942 = "llvm.xor"(%1895, %1941) : (i32, i32) -> i32 loc(#loc17)
    %1943 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1944 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1945 = "llvm.lshr"(%1942, %1944) : (i32, i32) -> i32 loc(#loc17)
    %1946 = "llvm.shl"(%1945, %1943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1947 = "llvm.add"(%1946, %1942) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1948 = "llvm.getelementptr"(%1850, %1947) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1949 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %1950 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1951 = "llvm.insertelement"(%1949, %1828, %1950) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %1952 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1953 = "llvm.insertelement"(%1951, %1829, %1952) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %1954 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1955 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1956 = "llvm.extractelement"(%1953, %1955) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %1957 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1958 = "llvm.extractelement"(%1953, %1957) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %1959 = "llvm.inline_asm"(%1948, %1956, %1958, %1954) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1960 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1961 = "llvm.xor"(%1940, %1960) : (i32, i32) -> i32 loc(#loc17)
    %1962 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1963 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1964 = "llvm.lshr"(%1961, %1963) : (i32, i32) -> i32 loc(#loc17)
    %1965 = "llvm.shl"(%1964, %1962) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1966 = "llvm.add"(%1965, %1961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1967 = "llvm.getelementptr"(%1850, %1966) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1968 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1969 = "llvm.load"(%1967) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %1970 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %1971 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1972 = "llvm.insertelement"(%1970, %1969, %1971) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %1973 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1974 = "llvm.extractelement"(%1972, %1973) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %1975 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %1976 = "llvm.xor"(%1940, %1975) : (i32, i32) -> i32 loc(#loc17)
    %1977 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1978 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1979 = "llvm.lshr"(%1976, %1978) : (i32, i32) -> i32 loc(#loc17)
    %1980 = "llvm.shl"(%1979, %1977) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1981 = "llvm.add"(%1980, %1976) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1982 = "llvm.getelementptr"(%1850, %1981) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1983 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1984 = "llvm.load"(%1982) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %1985 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %1986 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1987 = "llvm.insertelement"(%1985, %1984, %1986) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %1988 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1989 = "llvm.extractelement"(%1987, %1988) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1990 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1991 = "llvm.xor"(%1895, %1990) : (i32, i32) -> i32 loc(#loc17)
    %1992 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1993 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1994 = "llvm.lshr"(%1991, %1993) : (i32, i32) -> i32 loc(#loc17)
    %1995 = "llvm.shl"(%1994, %1992) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1996 = "llvm.add"(%1995, %1991) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1997 = "llvm.getelementptr"(%1850, %1996) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1998 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %1999 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2000 = "llvm.insertelement"(%1998, %1830, %1999) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2001 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2002 = "llvm.insertelement"(%2000, %1831, %2001) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2003 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2004 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2005 = "llvm.extractelement"(%2002, %2004) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2006 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2007 = "llvm.extractelement"(%2002, %2006) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2008 = "llvm.inline_asm"(%1997, %2005, %2007, %2003) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2009 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2010 = "llvm.xor"(%1940, %2009) : (i32, i32) -> i32 loc(#loc17)
    %2011 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2012 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2013 = "llvm.lshr"(%2010, %2012) : (i32, i32) -> i32 loc(#loc17)
    %2014 = "llvm.shl"(%2013, %2011) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2015 = "llvm.add"(%2014, %2010) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2016 = "llvm.getelementptr"(%1850, %2015) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2017 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2018 = "llvm.load"(%2016) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2019 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2020 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2021 = "llvm.insertelement"(%2019, %2018, %2020) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2022 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2023 = "llvm.extractelement"(%2021, %2022) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2024 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2025 = "llvm.xor"(%1940, %2024) : (i32, i32) -> i32 loc(#loc17)
    %2026 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2027 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2028 = "llvm.lshr"(%2025, %2027) : (i32, i32) -> i32 loc(#loc17)
    %2029 = "llvm.shl"(%2028, %2026) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2030 = "llvm.add"(%2029, %2025) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2031 = "llvm.getelementptr"(%1850, %2030) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2032 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2033 = "llvm.load"(%2031) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2034 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2035 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2036 = "llvm.insertelement"(%2034, %2033, %2035) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2037 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2038 = "llvm.extractelement"(%2036, %2037) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2039 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2040 = "llvm.xor"(%1895, %2039) : (i32, i32) -> i32 loc(#loc17)
    %2041 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2042 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2043 = "llvm.lshr"(%2040, %2042) : (i32, i32) -> i32 loc(#loc17)
    %2044 = "llvm.shl"(%2043, %2041) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2045 = "llvm.add"(%2044, %2040) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2046 = "llvm.getelementptr"(%1850, %2045) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2047 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2048 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2049 = "llvm.insertelement"(%2047, %1832, %2048) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2050 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2051 = "llvm.insertelement"(%2049, %1833, %2050) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2052 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2053 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2054 = "llvm.extractelement"(%2051, %2053) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2055 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2056 = "llvm.extractelement"(%2051, %2055) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2057 = "llvm.inline_asm"(%2046, %2054, %2056, %2052) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2058 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2059 = "llvm.xor"(%1940, %2058) : (i32, i32) -> i32 loc(#loc17)
    %2060 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2061 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2062 = "llvm.lshr"(%2059, %2061) : (i32, i32) -> i32 loc(#loc17)
    %2063 = "llvm.shl"(%2062, %2060) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2064 = "llvm.add"(%2063, %2059) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2065 = "llvm.getelementptr"(%1850, %2064) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2066 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2067 = "llvm.load"(%2065) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2068 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2069 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2070 = "llvm.insertelement"(%2068, %2067, %2069) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2071 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2072 = "llvm.extractelement"(%2070, %2071) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2073 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2074 = "llvm.xor"(%1940, %2073) : (i32, i32) -> i32 loc(#loc17)
    %2075 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2076 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2077 = "llvm.lshr"(%2074, %2076) : (i32, i32) -> i32 loc(#loc17)
    %2078 = "llvm.shl"(%2077, %2075) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2079 = "llvm.add"(%2078, %2074) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2080 = "llvm.getelementptr"(%1850, %2079) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2081 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2082 = "llvm.load"(%2080) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2083 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2084 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2085 = "llvm.insertelement"(%2083, %2082, %2084) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2086 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2087 = "llvm.extractelement"(%2085, %2086) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2088 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2089 = "llvm.xor"(%1895, %2088) : (i32, i32) -> i32 loc(#loc17)
    %2090 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2091 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2092 = "llvm.lshr"(%2089, %2091) : (i32, i32) -> i32 loc(#loc17)
    %2093 = "llvm.shl"(%2092, %2090) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2094 = "llvm.add"(%2093, %2089) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2095 = "llvm.getelementptr"(%1850, %2094) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2096 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2097 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2098 = "llvm.insertelement"(%2096, %1834, %2097) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2099 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2100 = "llvm.insertelement"(%2098, %1835, %2099) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2101 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2102 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2103 = "llvm.extractelement"(%2100, %2102) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2104 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2105 = "llvm.extractelement"(%2100, %2104) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2106 = "llvm.inline_asm"(%2095, %2103, %2105, %2101) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2108 = "llvm.xor"(%1940, %2107) : (i32, i32) -> i32 loc(#loc17)
    %2109 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2110 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2111 = "llvm.lshr"(%2108, %2110) : (i32, i32) -> i32 loc(#loc17)
    %2112 = "llvm.shl"(%2111, %2109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2113 = "llvm.add"(%2112, %2108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2114 = "llvm.getelementptr"(%1850, %2113) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2115 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2116 = "llvm.load"(%2114) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2117 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2118 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2119 = "llvm.insertelement"(%2117, %2116, %2118) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2120 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2121 = "llvm.extractelement"(%2119, %2120) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2122 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2123 = "llvm.xor"(%1940, %2122) : (i32, i32) -> i32 loc(#loc17)
    %2124 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2125 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2126 = "llvm.lshr"(%2123, %2125) : (i32, i32) -> i32 loc(#loc17)
    %2127 = "llvm.shl"(%2126, %2124) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2128 = "llvm.add"(%2127, %2123) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2129 = "llvm.getelementptr"(%1850, %2128) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2130 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2131 = "llvm.load"(%2129) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2132 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2133 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2134 = "llvm.insertelement"(%2132, %2131, %2133) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2135 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2136 = "llvm.extractelement"(%2134, %2135) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2137 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2138 = "llvm.xor"(%1895, %2137) : (i32, i32) -> i32 loc(#loc17)
    %2139 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2140 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2141 = "llvm.lshr"(%2138, %2140) : (i32, i32) -> i32 loc(#loc17)
    %2142 = "llvm.shl"(%2141, %2139) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2143 = "llvm.add"(%2142, %2138) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2144 = "llvm.getelementptr"(%1850, %2143) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2145 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2146 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2147 = "llvm.insertelement"(%2145, %1836, %2146) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2148 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2149 = "llvm.insertelement"(%2147, %1837, %2148) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2150 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2151 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2152 = "llvm.extractelement"(%2149, %2151) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2153 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2154 = "llvm.extractelement"(%2149, %2153) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2155 = "llvm.inline_asm"(%2144, %2152, %2154, %2150) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2156 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2157 = "llvm.xor"(%1940, %2156) : (i32, i32) -> i32 loc(#loc17)
    %2158 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2159 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2160 = "llvm.lshr"(%2157, %2159) : (i32, i32) -> i32 loc(#loc17)
    %2161 = "llvm.shl"(%2160, %2158) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2162 = "llvm.add"(%2161, %2157) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2163 = "llvm.getelementptr"(%1850, %2162) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2164 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2165 = "llvm.load"(%2163) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2166 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2167 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2168 = "llvm.insertelement"(%2166, %2165, %2167) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2169 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2170 = "llvm.extractelement"(%2168, %2169) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2171 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2172 = "llvm.xor"(%1940, %2171) : (i32, i32) -> i32 loc(#loc17)
    %2173 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2174 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2175 = "llvm.lshr"(%2172, %2174) : (i32, i32) -> i32 loc(#loc17)
    %2176 = "llvm.shl"(%2175, %2173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2177 = "llvm.add"(%2176, %2172) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2178 = "llvm.getelementptr"(%1850, %2177) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2179 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2180 = "llvm.load"(%2178) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2181 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2182 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2183 = "llvm.insertelement"(%2181, %2180, %2182) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2184 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2185 = "llvm.extractelement"(%2183, %2184) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2186 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2187 = "llvm.xor"(%1895, %2186) : (i32, i32) -> i32 loc(#loc17)
    %2188 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2189 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2190 = "llvm.lshr"(%2187, %2189) : (i32, i32) -> i32 loc(#loc17)
    %2191 = "llvm.shl"(%2190, %2188) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2192 = "llvm.add"(%2191, %2187) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2193 = "llvm.getelementptr"(%1850, %2192) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2194 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2195 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2196 = "llvm.insertelement"(%2194, %1838, %2195) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2197 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2198 = "llvm.insertelement"(%2196, %1839, %2197) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2199 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2200 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2201 = "llvm.extractelement"(%2198, %2200) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2202 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2203 = "llvm.extractelement"(%2198, %2202) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2204 = "llvm.inline_asm"(%2193, %2201, %2203, %2199) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2205 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2206 = "llvm.xor"(%1940, %2205) : (i32, i32) -> i32 loc(#loc17)
    %2207 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2208 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2209 = "llvm.lshr"(%2206, %2208) : (i32, i32) -> i32 loc(#loc17)
    %2210 = "llvm.shl"(%2209, %2207) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2211 = "llvm.add"(%2210, %2206) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2212 = "llvm.getelementptr"(%1850, %2211) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2213 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2214 = "llvm.load"(%2212) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2215 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2216 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2217 = "llvm.insertelement"(%2215, %2214, %2216) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2218 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2219 = "llvm.extractelement"(%2217, %2218) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2220 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2221 = "llvm.xor"(%1940, %2220) : (i32, i32) -> i32 loc(#loc17)
    %2222 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2223 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2224 = "llvm.lshr"(%2221, %2223) : (i32, i32) -> i32 loc(#loc17)
    %2225 = "llvm.shl"(%2224, %2222) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2226 = "llvm.add"(%2225, %2221) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2227 = "llvm.getelementptr"(%1850, %2226) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2228 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2229 = "llvm.load"(%2227) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2230 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2231 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2232 = "llvm.insertelement"(%2230, %2229, %2231) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2233 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2234 = "llvm.extractelement"(%2232, %2233) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2235 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2236 = "llvm.xor"(%1895, %2235) : (i32, i32) -> i32 loc(#loc17)
    %2237 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2238 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2239 = "llvm.lshr"(%2236, %2238) : (i32, i32) -> i32 loc(#loc17)
    %2240 = "llvm.shl"(%2239, %2237) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2241 = "llvm.add"(%2240, %2236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2242 = "llvm.getelementptr"(%1850, %2241) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2243 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2244 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2245 = "llvm.insertelement"(%2243, %1840, %2244) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2246 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2247 = "llvm.insertelement"(%2245, %1841, %2246) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2248 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2249 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2250 = "llvm.extractelement"(%2247, %2249) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2251 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2252 = "llvm.extractelement"(%2247, %2251) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2253 = "llvm.inline_asm"(%2242, %2250, %2252, %2248) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2254 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2255 = "llvm.xor"(%1940, %2254) : (i32, i32) -> i32 loc(#loc17)
    %2256 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2257 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2258 = "llvm.lshr"(%2255, %2257) : (i32, i32) -> i32 loc(#loc17)
    %2259 = "llvm.shl"(%2258, %2256) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2260 = "llvm.add"(%2259, %2255) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2261 = "llvm.getelementptr"(%1850, %2260) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2262 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2263 = "llvm.load"(%2261) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2264 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2265 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2266 = "llvm.insertelement"(%2264, %2263, %2265) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2267 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2268 = "llvm.extractelement"(%2266, %2267) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2269 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2270 = "llvm.xor"(%1940, %2269) : (i32, i32) -> i32 loc(#loc17)
    %2271 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2272 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2273 = "llvm.lshr"(%2270, %2272) : (i32, i32) -> i32 loc(#loc17)
    %2274 = "llvm.shl"(%2273, %2271) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2275 = "llvm.add"(%2274, %2270) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2276 = "llvm.getelementptr"(%1850, %2275) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2277 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2278 = "llvm.load"(%2276) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2279 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2280 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2281 = "llvm.insertelement"(%2279, %2278, %2280) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2282 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2283 = "llvm.extractelement"(%2281, %2282) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2284 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2285 = "llvm.xor"(%1895, %2284) : (i32, i32) -> i32 loc(#loc17)
    %2286 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2287 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2288 = "llvm.lshr"(%2285, %2287) : (i32, i32) -> i32 loc(#loc17)
    %2289 = "llvm.shl"(%2288, %2286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2290 = "llvm.add"(%2289, %2285) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2291 = "llvm.getelementptr"(%1850, %2290) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2292 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2293 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2294 = "llvm.insertelement"(%2292, %1842, %2293) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2295 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2296 = "llvm.insertelement"(%2294, %1843, %2295) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2297 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2298 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2299 = "llvm.extractelement"(%2296, %2298) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2300 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2301 = "llvm.extractelement"(%2296, %2300) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2302 = "llvm.inline_asm"(%2291, %2299, %2301, %2297) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2303 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2304 = "llvm.xor"(%1940, %2303) : (i32, i32) -> i32 loc(#loc17)
    %2305 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2306 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2307 = "llvm.lshr"(%2304, %2306) : (i32, i32) -> i32 loc(#loc17)
    %2308 = "llvm.shl"(%2307, %2305) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2309 = "llvm.add"(%2308, %2304) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2310 = "llvm.getelementptr"(%1850, %2309) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2311 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2312 = "llvm.load"(%2310) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2313 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2314 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2315 = "llvm.insertelement"(%2313, %2312, %2314) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2316 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2317 = "llvm.extractelement"(%2315, %2316) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2318 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2319 = "llvm.xor"(%1940, %2318) : (i32, i32) -> i32 loc(#loc17)
    %2320 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2321 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2322 = "llvm.lshr"(%2319, %2321) : (i32, i32) -> i32 loc(#loc17)
    %2323 = "llvm.shl"(%2322, %2320) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2324 = "llvm.add"(%2323, %2319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2325 = "llvm.getelementptr"(%1850, %2324) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2326 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2327 = "llvm.load"(%2325) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2328 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2329 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2330 = "llvm.insertelement"(%2328, %2327, %2329) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2331 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2332 = "llvm.extractelement"(%2330, %2331) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2333 = "llvm.trunc"(%1974) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2334 = "llvm.trunc"(%1989) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2335 = "llvm.trunc"(%2023) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2336 = "llvm.trunc"(%2038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2337 = "llvm.trunc"(%2072) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2338 = "llvm.trunc"(%2087) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2339 = "llvm.trunc"(%2121) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2340 = "llvm.trunc"(%2136) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2341 = "llvm.trunc"(%2170) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2342 = "llvm.trunc"(%2185) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2343 = "llvm.trunc"(%2219) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2344 = "llvm.trunc"(%2234) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2345 = "llvm.trunc"(%2268) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2346 = "llvm.trunc"(%2283) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2347 = "llvm.trunc"(%2317) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2348 = "llvm.trunc"(%2332) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2349 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2350 = "llvm.insertvalue"(%2349, %2333) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2351 = "llvm.insertvalue"(%2350, %2334) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2352 = "llvm.insertvalue"(%2351, %2335) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2353 = "llvm.insertvalue"(%2352, %2336) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2354 = "llvm.insertvalue"(%2353, %2337) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2355 = "llvm.insertvalue"(%2354, %2338) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2356 = "llvm.insertvalue"(%2355, %2339) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2357 = "llvm.insertvalue"(%2356, %2340) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2358 = "llvm.insertvalue"(%2357, %2341) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2359 = "llvm.insertvalue"(%2358, %2342) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2360 = "llvm.insertvalue"(%2359, %2343) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2361 = "llvm.insertvalue"(%2360, %2344) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2362 = "llvm.insertvalue"(%2361, %2345) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2363 = "llvm.insertvalue"(%2362, %2346) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2364 = "llvm.insertvalue"(%2363, %2347) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2365 = "llvm.insertvalue"(%2364, %2348) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2366 = "llvm.bitcast"(%arg1) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc18)
    %2367 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2368 = "llvm.insertvalue"(%2367, %2366) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2369 = "llvm.insertvalue"(%2368, %2366) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2370 = "llvm.insertvalue"(%2369, %2366) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2371 = "llvm.insertvalue"(%2370, %2366) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2372 = "llvm.insertvalue"(%2371, %2366) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2373 = "llvm.insertvalue"(%2372, %2366) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2374 = "llvm.insertvalue"(%2373, %2366) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2375 = "llvm.insertvalue"(%2374, %2366) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2376 = "llvm.insertvalue"(%2375, %2366) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2377 = "llvm.insertvalue"(%2376, %2366) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2378 = "llvm.insertvalue"(%2377, %2366) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2379 = "llvm.insertvalue"(%2378, %2366) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2380 = "llvm.insertvalue"(%2379, %2366) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2381 = "llvm.insertvalue"(%2380, %2366) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2382 = "llvm.insertvalue"(%2381, %2366) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2383 = "llvm.insertvalue"(%2382, %2366) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2384 = "llvm.extractvalue"(%2383) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2385 = "llvm.extractvalue"(%2383) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2386 = "llvm.extractvalue"(%2383) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2387 = "llvm.extractvalue"(%2383) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2388 = "llvm.extractvalue"(%2383) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2389 = "llvm.extractvalue"(%2383) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2390 = "llvm.extractvalue"(%2383) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2391 = "llvm.extractvalue"(%2383) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2392 = "llvm.extractvalue"(%2383) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2393 = "llvm.extractvalue"(%2383) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2394 = "llvm.extractvalue"(%2383) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2395 = "llvm.extractvalue"(%2383) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2396 = "llvm.extractvalue"(%2383) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2397 = "llvm.extractvalue"(%2383) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2398 = "llvm.extractvalue"(%2383) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2399 = "llvm.extractvalue"(%2383) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2400 = "llvm.extractvalue"(%1778) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2401 = "llvm.extractvalue"(%1778) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2402 = "llvm.extractvalue"(%1778) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2403 = "llvm.extractvalue"(%1778) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2404 = "llvm.extractvalue"(%1778) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2405 = "llvm.extractvalue"(%1778) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2406 = "llvm.extractvalue"(%1778) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2407 = "llvm.extractvalue"(%1778) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2408 = "llvm.extractvalue"(%1778) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2409 = "llvm.extractvalue"(%1778) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2410 = "llvm.extractvalue"(%1778) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2411 = "llvm.extractvalue"(%1778) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2412 = "llvm.extractvalue"(%1778) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2413 = "llvm.extractvalue"(%1778) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2414 = "llvm.extractvalue"(%1778) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2415 = "llvm.extractvalue"(%1778) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2416 = "llvm.getelementptr"(%2384, %2400) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2417 = "llvm.getelementptr"(%2385, %2401) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2418 = "llvm.getelementptr"(%2386, %2402) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2419 = "llvm.getelementptr"(%2387, %2403) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2420 = "llvm.getelementptr"(%2388, %2404) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2421 = "llvm.getelementptr"(%2389, %2405) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2422 = "llvm.getelementptr"(%2390, %2406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2423 = "llvm.getelementptr"(%2391, %2407) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2424 = "llvm.getelementptr"(%2392, %2408) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2425 = "llvm.getelementptr"(%2393, %2409) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2426 = "llvm.getelementptr"(%2394, %2410) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2427 = "llvm.getelementptr"(%2395, %2411) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2428 = "llvm.getelementptr"(%2396, %2412) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2429 = "llvm.getelementptr"(%2397, %2413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2430 = "llvm.getelementptr"(%2398, %2414) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2431 = "llvm.getelementptr"(%2399, %2415) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2432 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2433 = "llvm.insertvalue"(%2432, %2416) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2434 = "llvm.insertvalue"(%2433, %2417) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2435 = "llvm.insertvalue"(%2434, %2418) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2436 = "llvm.insertvalue"(%2435, %2419) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2437 = "llvm.insertvalue"(%2436, %2420) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2438 = "llvm.insertvalue"(%2437, %2421) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2439 = "llvm.insertvalue"(%2438, %2422) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2440 = "llvm.insertvalue"(%2439, %2423) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2441 = "llvm.insertvalue"(%2440, %2424) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2442 = "llvm.insertvalue"(%2441, %2425) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2443 = "llvm.insertvalue"(%2442, %2426) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2444 = "llvm.insertvalue"(%2443, %2427) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2445 = "llvm.insertvalue"(%2444, %2428) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2446 = "llvm.insertvalue"(%2445, %2429) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2447 = "llvm.insertvalue"(%2446, %2430) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2448 = "llvm.insertvalue"(%2447, %2431) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2449 = "llvm.extractvalue"(%2448) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2450 = "llvm.extractvalue"(%2448) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2451 = "llvm.extractvalue"(%2448) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2452 = "llvm.extractvalue"(%2448) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2453 = "llvm.extractvalue"(%2448) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2454 = "llvm.extractvalue"(%2448) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2455 = "llvm.extractvalue"(%2448) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2456 = "llvm.extractvalue"(%2448) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2457 = "llvm.extractvalue"(%2448) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2458 = "llvm.extractvalue"(%2448) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2459 = "llvm.extractvalue"(%2448) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2460 = "llvm.extractvalue"(%2448) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2461 = "llvm.extractvalue"(%2448) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2462 = "llvm.extractvalue"(%2448) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2463 = "llvm.extractvalue"(%2448) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2464 = "llvm.extractvalue"(%2448) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2465 = "llvm.extractvalue"(%1146) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2466 = "llvm.extractvalue"(%1146) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2467 = "llvm.extractvalue"(%1146) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2468 = "llvm.extractvalue"(%1146) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2469 = "llvm.extractvalue"(%1146) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2470 = "llvm.extractvalue"(%1146) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2471 = "llvm.extractvalue"(%1146) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2472 = "llvm.extractvalue"(%1146) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2473 = "llvm.extractvalue"(%1146) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2474 = "llvm.extractvalue"(%1146) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2475 = "llvm.extractvalue"(%1146) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2476 = "llvm.extractvalue"(%1146) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2477 = "llvm.extractvalue"(%1146) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2478 = "llvm.extractvalue"(%1146) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2479 = "llvm.extractvalue"(%1146) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2480 = "llvm.extractvalue"(%1146) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2481 = "llvm.extractvalue"(%2365) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2482 = "llvm.extractvalue"(%2365) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2483 = "llvm.extractvalue"(%2365) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2484 = "llvm.extractvalue"(%2365) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2485 = "llvm.extractvalue"(%2365) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2486 = "llvm.extractvalue"(%2365) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2487 = "llvm.extractvalue"(%2365) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2488 = "llvm.extractvalue"(%2365) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2489 = "llvm.extractvalue"(%2365) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2490 = "llvm.extractvalue"(%2365) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2491 = "llvm.extractvalue"(%2365) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2492 = "llvm.extractvalue"(%2365) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2493 = "llvm.extractvalue"(%2365) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2494 = "llvm.extractvalue"(%2365) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2495 = "llvm.extractvalue"(%2365) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2496 = "llvm.extractvalue"(%2365) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc19)
    %2498 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc19)
    %2499 = "llvm.urem"(%2497, %2498) : (i32, i32) -> i32 loc(#loc19)
    %2500 = "llvm.udiv"(%2497, %2498) : (i32, i32) -> i32 loc(#loc19)
    %2501 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2502 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2503 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2504 = "llvm.bitcast"(%2465) : (f32) -> f32 loc(#loc19)
    %2505 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2506 = "llvm.insertelement"(%2503, %2504, %2505) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2507 = "llvm.bitcast"(%2506) : (vector<1xf32>) -> i32 loc(#loc19)
    %2508 = "llvm.inline_asm"(%2507, %2449, %2481) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2509 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2510 = "llvm.bitcast"(%2466) : (f32) -> f32 loc(#loc19)
    %2511 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2512 = "llvm.insertelement"(%2509, %2510, %2511) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2513 = "llvm.bitcast"(%2512) : (vector<1xf32>) -> i32 loc(#loc19)
    %2514 = "llvm.inline_asm"(%2513, %2450, %2482) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2515 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2516 = "llvm.bitcast"(%2467) : (f32) -> f32 loc(#loc19)
    %2517 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2518 = "llvm.insertelement"(%2515, %2516, %2517) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2519 = "llvm.bitcast"(%2518) : (vector<1xf32>) -> i32 loc(#loc19)
    %2520 = "llvm.inline_asm"(%2519, %2451, %2483) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2521 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2522 = "llvm.bitcast"(%2468) : (f32) -> f32 loc(#loc19)
    %2523 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2524 = "llvm.insertelement"(%2521, %2522, %2523) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2525 = "llvm.bitcast"(%2524) : (vector<1xf32>) -> i32 loc(#loc19)
    %2526 = "llvm.inline_asm"(%2525, %2452, %2484) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2527 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2528 = "llvm.bitcast"(%2469) : (f32) -> f32 loc(#loc19)
    %2529 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2530 = "llvm.insertelement"(%2527, %2528, %2529) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2531 = "llvm.bitcast"(%2530) : (vector<1xf32>) -> i32 loc(#loc19)
    %2532 = "llvm.inline_asm"(%2531, %2453, %2485) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2533 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2534 = "llvm.bitcast"(%2470) : (f32) -> f32 loc(#loc19)
    %2535 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2536 = "llvm.insertelement"(%2533, %2534, %2535) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2537 = "llvm.bitcast"(%2536) : (vector<1xf32>) -> i32 loc(#loc19)
    %2538 = "llvm.inline_asm"(%2537, %2454, %2486) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2539 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2540 = "llvm.bitcast"(%2471) : (f32) -> f32 loc(#loc19)
    %2541 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2542 = "llvm.insertelement"(%2539, %2540, %2541) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2543 = "llvm.bitcast"(%2542) : (vector<1xf32>) -> i32 loc(#loc19)
    %2544 = "llvm.inline_asm"(%2543, %2455, %2487) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2545 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2546 = "llvm.bitcast"(%2472) : (f32) -> f32 loc(#loc19)
    %2547 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2548 = "llvm.insertelement"(%2545, %2546, %2547) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2549 = "llvm.bitcast"(%2548) : (vector<1xf32>) -> i32 loc(#loc19)
    %2550 = "llvm.inline_asm"(%2549, %2456, %2488) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2551 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2552 = "llvm.bitcast"(%2473) : (f32) -> f32 loc(#loc19)
    %2553 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2554 = "llvm.insertelement"(%2551, %2552, %2553) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2555 = "llvm.bitcast"(%2554) : (vector<1xf32>) -> i32 loc(#loc19)
    %2556 = "llvm.inline_asm"(%2555, %2457, %2489) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2557 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2558 = "llvm.bitcast"(%2474) : (f32) -> f32 loc(#loc19)
    %2559 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2560 = "llvm.insertelement"(%2557, %2558, %2559) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2561 = "llvm.bitcast"(%2560) : (vector<1xf32>) -> i32 loc(#loc19)
    %2562 = "llvm.inline_asm"(%2561, %2458, %2490) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2563 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2564 = "llvm.bitcast"(%2475) : (f32) -> f32 loc(#loc19)
    %2565 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2566 = "llvm.insertelement"(%2563, %2564, %2565) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2567 = "llvm.bitcast"(%2566) : (vector<1xf32>) -> i32 loc(#loc19)
    %2568 = "llvm.inline_asm"(%2567, %2459, %2491) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2569 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2570 = "llvm.bitcast"(%2476) : (f32) -> f32 loc(#loc19)
    %2571 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2572 = "llvm.insertelement"(%2569, %2570, %2571) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2573 = "llvm.bitcast"(%2572) : (vector<1xf32>) -> i32 loc(#loc19)
    %2574 = "llvm.inline_asm"(%2573, %2460, %2492) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2575 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2576 = "llvm.bitcast"(%2477) : (f32) -> f32 loc(#loc19)
    %2577 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2578 = "llvm.insertelement"(%2575, %2576, %2577) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2579 = "llvm.bitcast"(%2578) : (vector<1xf32>) -> i32 loc(#loc19)
    %2580 = "llvm.inline_asm"(%2579, %2461, %2493) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2581 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2582 = "llvm.bitcast"(%2478) : (f32) -> f32 loc(#loc19)
    %2583 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2584 = "llvm.insertelement"(%2581, %2582, %2583) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2585 = "llvm.bitcast"(%2584) : (vector<1xf32>) -> i32 loc(#loc19)
    %2586 = "llvm.inline_asm"(%2585, %2462, %2494) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2587 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2588 = "llvm.bitcast"(%2479) : (f32) -> f32 loc(#loc19)
    %2589 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2590 = "llvm.insertelement"(%2587, %2588, %2589) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2591 = "llvm.bitcast"(%2590) : (vector<1xf32>) -> i32 loc(#loc19)
    %2592 = "llvm.inline_asm"(%2591, %2463, %2495) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2593 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2594 = "llvm.bitcast"(%2480) : (f32) -> f32 loc(#loc19)
    %2595 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2596 = "llvm.insertelement"(%2593, %2594, %2595) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2597 = "llvm.bitcast"(%2596) : (vector<1xf32>) -> i32 loc(#loc19)
    %2598 = "llvm.inline_asm"(%2597, %2464, %2496) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    "llvm.return"() : () -> () loc(#loc20)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":19:58)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":20:56)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc18 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc19 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc20 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %153 = "llvm.xor"(%23, %152) : (i32, i32) -> i32 loc(#loc9)
    %154 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %155 = "llvm.xor"(%153, %154) : (i32, i32) -> i32 loc(#loc9)
    %156 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %157 = "llvm.xor"(%155, %156) : (i32, i32) -> i32 loc(#loc9)
    %158 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %159 = "llvm.xor"(%157, %158) : (i32, i32) -> i32 loc(#loc9)
    %160 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %161 = "llvm.xor"(%159, %160) : (i32, i32) -> i32 loc(#loc9)
    %162 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc9)
    %164 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc9)
    %165 = "llvm.shl"(%164, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %166 = "llvm.add"(%165, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %167 = "llvm.getelementptr"(%9, %166) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %168 = "llvm.insertelement"(%8, %144, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %169 = "llvm.extractelement"(%168, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %170 = "llvm.bitcast"(%169) : (f32) -> i32 loc(#loc9)
    %171 = "llvm.insertelement"(%6, %170, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %172 = "llvm.inline_asm"(%167, %171, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %173 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc9)
    %174 = "llvm.lshr"(%173, %23) : (i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.shl"(%174, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.add"(%175, %173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.getelementptr"(%9, %176) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %178 = "llvm.insertelement"(%8, %145, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %179 = "llvm.extractelement"(%178, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %180 = "llvm.bitcast"(%179) : (f32) -> i32 loc(#loc9)
    %181 = "llvm.insertelement"(%6, %180, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %182 = "llvm.inline_asm"(%177, %181, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %183 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.lshr"(%183, %23) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.shl"(%184, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %186 = "llvm.add"(%185, %183) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.getelementptr"(%9, %186) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %188 = "llvm.insertelement"(%8, %146, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %189 = "llvm.extractelement"(%188, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %190 = "llvm.bitcast"(%189) : (f32) -> i32 loc(#loc9)
    %191 = "llvm.insertelement"(%6, %190, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %192 = "llvm.inline_asm"(%187, %191, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %193 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc9)
    %194 = "llvm.lshr"(%193, %23) : (i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.shl"(%194, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.add"(%195, %193) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.getelementptr"(%9, %196) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %198 = "llvm.insertelement"(%8, %147, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %199 = "llvm.extractelement"(%198, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %200 = "llvm.bitcast"(%199) : (f32) -> i32 loc(#loc9)
    %201 = "llvm.insertelement"(%6, %200, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %202 = "llvm.inline_asm"(%197, %201, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %203 = "llvm.xor"(%163, %23) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.lshr"(%203, %23) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.shl"(%204, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %206 = "llvm.add"(%205, %203) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.getelementptr"(%9, %206) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %208 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %210 = "llvm.extractelement"(%209, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %211 = "llvm.bitcast"(%210) : (i32) -> f32 loc(#loc9)
    %212 = "llvm.insertelement"(%8, %211, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %213 = "llvm.extractelement"(%212, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %214 = "llvm.xor"(%163, %18) : (i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.lshr"(%214, %23) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.shl"(%215, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.add"(%216, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %218 = "llvm.getelementptr"(%9, %217) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %219 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %220 = "llvm.insertelement"(%6, %219, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %222 = "llvm.bitcast"(%221) : (i32) -> f32 loc(#loc9)
    %223 = "llvm.insertelement"(%8, %222, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %224 = "llvm.extractelement"(%223, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %225 = "llvm.xor"(%163, %17) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.lshr"(%225, %23) : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.shl"(%226, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.add"(%227, %225) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %229 = "llvm.getelementptr"(%9, %228) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %230 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %231 = "llvm.insertelement"(%6, %230, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %233 = "llvm.bitcast"(%232) : (i32) -> f32 loc(#loc9)
    %234 = "llvm.insertelement"(%8, %233, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %235 = "llvm.extractelement"(%234, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %236 = "llvm.xor"(%163, %5) : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.lshr"(%236, %23) : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.shl"(%237, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %239 = "llvm.add"(%238, %236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %240 = "llvm.getelementptr"(%9, %239) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %241 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %244 = "llvm.bitcast"(%243) : (i32) -> f32 loc(#loc9)
    %245 = "llvm.insertelement"(%8, %244, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %246 = "llvm.extractelement"(%245, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %247 = "llvm.xor"(%163, %16) : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.lshr"(%247, %23) : (i32, i32) -> i32 loc(#loc9)
    %249 = "llvm.shl"(%248, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %250 = "llvm.add"(%249, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %251 = "llvm.getelementptr"(%9, %250) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %252 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %253 = "llvm.insertelement"(%6, %252, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %255 = "llvm.bitcast"(%254) : (i32) -> f32 loc(#loc9)
    %256 = "llvm.insertelement"(%8, %255, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %257 = "llvm.extractelement"(%256, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %258 = "llvm.xor"(%163, %4) : (i32, i32) -> i32 loc(#loc9)
    %259 = "llvm.lshr"(%258, %23) : (i32, i32) -> i32 loc(#loc9)
    %260 = "llvm.shl"(%259, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %261 = "llvm.add"(%260, %258) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %262 = "llvm.getelementptr"(%9, %261) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %263 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %264 = "llvm.insertelement"(%6, %263, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %266 = "llvm.bitcast"(%265) : (i32) -> f32 loc(#loc9)
    %267 = "llvm.insertelement"(%8, %266, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %269 = "llvm.xor"(%163, %13) : (i32, i32) -> i32 loc(#loc9)
    %270 = "llvm.lshr"(%269, %23) : (i32, i32) -> i32 loc(#loc9)
    %271 = "llvm.shl"(%270, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %272 = "llvm.add"(%271, %269) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %273 = "llvm.getelementptr"(%9, %272) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %274 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %275 = "llvm.insertelement"(%6, %274, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %277 = "llvm.bitcast"(%276) : (i32) -> f32 loc(#loc9)
    %278 = "llvm.insertelement"(%8, %277, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %280 = "llvm.xor"(%163, %3) : (i32, i32) -> i32 loc(#loc9)
    %281 = "llvm.lshr"(%280, %23) : (i32, i32) -> i32 loc(#loc9)
    %282 = "llvm.shl"(%281, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %283 = "llvm.add"(%282, %280) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %284 = "llvm.getelementptr"(%9, %283) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %285 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %286 = "llvm.insertelement"(%6, %285, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %288 = "llvm.bitcast"(%287) : (i32) -> f32 loc(#loc9)
    %289 = "llvm.insertelement"(%8, %288, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %291 = "llvm.insertelement"(%8, %148, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %292 = "llvm.extractelement"(%291, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %293 = "llvm.bitcast"(%292) : (f32) -> i32 loc(#loc9)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %295 = "llvm.inline_asm"(%167, %294, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %296 = "llvm.insertelement"(%8, %149, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %297 = "llvm.extractelement"(%296, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %298 = "llvm.bitcast"(%297) : (f32) -> i32 loc(#loc9)
    %299 = "llvm.insertelement"(%6, %298, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %300 = "llvm.inline_asm"(%177, %299, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %301 = "llvm.insertelement"(%8, %150, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %302 = "llvm.extractelement"(%301, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %303 = "llvm.bitcast"(%302) : (f32) -> i32 loc(#loc9)
    %304 = "llvm.insertelement"(%6, %303, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %305 = "llvm.inline_asm"(%187, %304, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %306 = "llvm.insertelement"(%8, %151, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.bitcast"(%307) : (f32) -> i32 loc(#loc9)
    %309 = "llvm.insertelement"(%6, %308, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %310 = "llvm.inline_asm"(%197, %309, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %311 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %313 = "llvm.extractelement"(%312, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %314 = "llvm.bitcast"(%313) : (i32) -> f32 loc(#loc9)
    %315 = "llvm.insertelement"(%8, %314, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %316 = "llvm.extractelement"(%315, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %317 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %318 = "llvm.insertelement"(%6, %317, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %319 = "llvm.extractelement"(%318, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %320 = "llvm.bitcast"(%319) : (i32) -> f32 loc(#loc9)
    %321 = "llvm.insertelement"(%8, %320, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %322 = "llvm.extractelement"(%321, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %323 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %324 = "llvm.insertelement"(%6, %323, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %325 = "llvm.extractelement"(%324, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %326 = "llvm.bitcast"(%325) : (i32) -> f32 loc(#loc9)
    %327 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %328 = "llvm.extractelement"(%327, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %329 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %330 = "llvm.insertelement"(%6, %329, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %331 = "llvm.extractelement"(%330, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %332 = "llvm.bitcast"(%331) : (i32) -> f32 loc(#loc9)
    %333 = "llvm.insertelement"(%8, %332, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %335 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %342 = "llvm.insertelement"(%6, %341, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %343 = "llvm.extractelement"(%342, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %344 = "llvm.bitcast"(%343) : (i32) -> f32 loc(#loc9)
    %345 = "llvm.insertelement"(%8, %344, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %346 = "llvm.extractelement"(%345, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %347 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %348 = "llvm.insertelement"(%6, %347, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %349 = "llvm.extractelement"(%348, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %350 = "llvm.bitcast"(%349) : (i32) -> f32 loc(#loc9)
    %351 = "llvm.insertelement"(%8, %350, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %352 = "llvm.extractelement"(%351, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %353 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %354 = "llvm.insertelement"(%6, %353, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %355 = "llvm.extractelement"(%354, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %356 = "llvm.bitcast"(%355) : (i32) -> f32 loc(#loc9)
    %357 = "llvm.insertelement"(%8, %356, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %360 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %365 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %366 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %367 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.icmp"(%359, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %369 = "llvm.icmp"(%360, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %370 = "llvm.icmp"(%361, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %371 = "llvm.icmp"(%362, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %372 = "llvm.icmp"(%363, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %373 = "llvm.icmp"(%364, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %374 = "llvm.icmp"(%365, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %375 = "llvm.icmp"(%366, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %376 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %377 = "llvm.xor"(%23, %376) : (i32, i32) -> i32 loc(#loc13)
    %378 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %379 = "llvm.xor"(%377, %378) : (i32, i32) -> i32 loc(#loc13)
    %380 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %381 = "llvm.xor"(%379, %380) : (i32, i32) -> i32 loc(#loc13)
    %382 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %383 = "llvm.xor"(%381, %382) : (i32, i32) -> i32 loc(#loc13)
    %384 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %385 = "llvm.xor"(%383, %384) : (i32, i32) -> i32 loc(#loc13)
    %386 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc13)
    %388 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc13)
    %390 = "llvm.xor"(%389, %23) : (i32, i32) -> i32 loc(#loc13)
    %391 = "llvm.lshr"(%390, %22) : (i32, i32) -> i32 loc(#loc13)
    %392 = "llvm.shl"(%391, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %395 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %396 = "llvm.insertelement"(%395, %359, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %397 = "llvm.extractelement"(%396, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %398 = "llvm.extractelement"(%396, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %399 = "llvm.inline_asm"(%394, %397, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %400 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc13)
    %401 = "llvm.shl"(%400, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %402 = "llvm.add"(%401, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %403 = "llvm.getelementptr"(%9, %402) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %404 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %405 = "llvm.insertelement"(%6, %404, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %406 = "llvm.extractelement"(%405, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %407 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc13)
    %408 = "llvm.shl"(%407, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %409 = "llvm.add"(%408, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %410 = "llvm.getelementptr"(%9, %409) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %411 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %412 = "llvm.insertelement"(%6, %411, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %414 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %415 = "llvm.insertelement"(%414, %360, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %416 = "llvm.extractelement"(%415, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %417 = "llvm.extractelement"(%415, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %418 = "llvm.inline_asm"(%394, %416, %417, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %419 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %422 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %423 = "llvm.insertelement"(%6, %422, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %425 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %426 = "llvm.insertelement"(%425, %361, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %427 = "llvm.extractelement"(%426, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %428 = "llvm.extractelement"(%426, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %429 = "llvm.inline_asm"(%394, %427, %428, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %430 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %433 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %434 = "llvm.insertelement"(%6, %433, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %436 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %437 = "llvm.insertelement"(%436, %362, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %438 = "llvm.extractelement"(%437, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %439 = "llvm.extractelement"(%437, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %440 = "llvm.inline_asm"(%394, %438, %439, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %441 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %444 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %445 = "llvm.insertelement"(%6, %444, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %447 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %448 = "llvm.insertelement"(%447, %363, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %449 = "llvm.extractelement"(%448, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %450 = "llvm.extractelement"(%448, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %451 = "llvm.inline_asm"(%394, %449, %450, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %452 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %455 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %456 = "llvm.insertelement"(%6, %455, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %458 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %459 = "llvm.insertelement"(%458, %364, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %460 = "llvm.extractelement"(%459, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %461 = "llvm.extractelement"(%459, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %462 = "llvm.inline_asm"(%394, %460, %461, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %463 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %466 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %467 = "llvm.insertelement"(%6, %466, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %469 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %470 = "llvm.insertelement"(%469, %365, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %471 = "llvm.extractelement"(%470, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %472 = "llvm.extractelement"(%470, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %473 = "llvm.inline_asm"(%394, %471, %472, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %474 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %477 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %478 = "llvm.insertelement"(%6, %477, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %480 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %481 = "llvm.insertelement"(%480, %366, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %482 = "llvm.extractelement"(%481, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %483 = "llvm.extractelement"(%481, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %484 = "llvm.inline_asm"(%394, %482, %483, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %485 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %488 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %489 = "llvm.insertelement"(%6, %488, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %490 = "llvm.extractelement"(%489, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %491 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc14)
    %492 = "llvm.zext"(%368) : (i1) -> i8 loc(#loc14)
    %493 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc14)
    %494 = "llvm.zext"(%369) : (i1) -> i8 loc(#loc14)
    %495 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc14)
    %496 = "llvm.zext"(%370) : (i1) -> i8 loc(#loc14)
    %497 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc14)
    %498 = "llvm.zext"(%371) : (i1) -> i8 loc(#loc14)
    %499 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc14)
    %500 = "llvm.zext"(%372) : (i1) -> i8 loc(#loc14)
    %501 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc14)
    %502 = "llvm.zext"(%373) : (i1) -> i8 loc(#loc14)
    %503 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc14)
    %504 = "llvm.zext"(%374) : (i1) -> i8 loc(#loc14)
    %505 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc14)
    %506 = "llvm.zext"(%375) : (i1) -> i8 loc(#loc14)
    %507 = "llvm.getelementptr"(%9, %393) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %508 = "llvm.insertelement"(%1, %491, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %509 = "llvm.insertelement"(%508, %492, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %510 = "llvm.extractelement"(%509, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %511 = "llvm.extractelement"(%509, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %512 = "llvm.inline_asm"(%507, %510, %511, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %513 = "llvm.getelementptr"(%9, %402) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %514 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %515 = "llvm.insertelement"(%0, %514, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %516 = "llvm.extractelement"(%515, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %517 = "llvm.getelementptr"(%9, %409) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %518 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %519 = "llvm.insertelement"(%0, %518, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %520 = "llvm.extractelement"(%519, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %521 = "llvm.insertelement"(%1, %493, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %522 = "llvm.insertelement"(%521, %494, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %523 = "llvm.extractelement"(%522, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %524 = "llvm.extractelement"(%522, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %525 = "llvm.inline_asm"(%507, %523, %524, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %526 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %529 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %530 = "llvm.insertelement"(%0, %529, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %531 = "llvm.extractelement"(%530, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %532 = "llvm.insertelement"(%1, %495, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %533 = "llvm.insertelement"(%532, %496, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %534 = "llvm.extractelement"(%533, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %535 = "llvm.extractelement"(%533, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %536 = "llvm.inline_asm"(%507, %534, %535, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %537 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %540 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %541 = "llvm.insertelement"(%0, %540, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %542 = "llvm.extractelement"(%541, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %543 = "llvm.insertelement"(%1, %497, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %544 = "llvm.insertelement"(%543, %498, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %545 = "llvm.extractelement"(%544, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %546 = "llvm.extractelement"(%544, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %547 = "llvm.inline_asm"(%507, %545, %546, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %548 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %551 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %552 = "llvm.insertelement"(%0, %551, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %553 = "llvm.extractelement"(%552, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %554 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %555 = "llvm.insertelement"(%554, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %556 = "llvm.extractelement"(%555, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %557 = "llvm.extractelement"(%555, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %558 = "llvm.inline_asm"(%507, %556, %557, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %559 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %562 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %563 = "llvm.insertelement"(%0, %562, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %564 = "llvm.extractelement"(%563, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %565 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %566 = "llvm.insertelement"(%565, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %567 = "llvm.extractelement"(%566, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %568 = "llvm.extractelement"(%566, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %569 = "llvm.inline_asm"(%507, %567, %568, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %570 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %573 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %574 = "llvm.insertelement"(%0, %573, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %575 = "llvm.extractelement"(%574, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %576 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %577 = "llvm.insertelement"(%576, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %578 = "llvm.extractelement"(%577, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %579 = "llvm.extractelement"(%577, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %580 = "llvm.inline_asm"(%507, %578, %579, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %581 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %584 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %585 = "llvm.insertelement"(%0, %584, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %586 = "llvm.extractelement"(%585, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %587 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %588 = "llvm.insertelement"(%587, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %591 = "llvm.inline_asm"(%507, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %592 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %595 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %596 = "llvm.insertelement"(%0, %595, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %598 = "llvm.trunc"(%516) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %599 = "llvm.trunc"(%520) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %600 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %601 = "llvm.trunc"(%531) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %602 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %603 = "llvm.trunc"(%542) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %604 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %605 = "llvm.trunc"(%553) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %606 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %607 = "llvm.trunc"(%564) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %608 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %609 = "llvm.trunc"(%575) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %610 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %611 = "llvm.trunc"(%586) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %612 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %613 = "llvm.trunc"(%597) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %614 = "llvm.getelementptr"(%arg1, %406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %615 = "llvm.getelementptr"(%arg1, %413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %616 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %617 = "llvm.getelementptr"(%arg1, %424) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %618 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %619 = "llvm.getelementptr"(%arg1, %435) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %620 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %621 = "llvm.getelementptr"(%arg1, %446) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %623 = "llvm.getelementptr"(%arg1, %457) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %624 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %625 = "llvm.getelementptr"(%arg1, %468) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %626 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %627 = "llvm.getelementptr"(%arg1, %479) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %628 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %629 = "llvm.getelementptr"(%arg1, %490) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %630 = "llvm.insertelement"(%8, %213, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %631 = "llvm.bitcast"(%630) : (vector<1xf32>) -> i32 loc(#loc16)
    %632 = "llvm.inline_asm"(%631, %614, %598) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %633 = "llvm.insertelement"(%8, %224, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %634 = "llvm.bitcast"(%633) : (vector<1xf32>) -> i32 loc(#loc16)
    %635 = "llvm.inline_asm"(%634, %615, %599) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %636 = "llvm.insertelement"(%8, %235, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %637 = "llvm.bitcast"(%636) : (vector<1xf32>) -> i32 loc(#loc16)
    %638 = "llvm.inline_asm"(%637, %616, %600) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %639 = "llvm.insertelement"(%8, %246, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %640 = "llvm.bitcast"(%639) : (vector<1xf32>) -> i32 loc(#loc16)
    %641 = "llvm.inline_asm"(%640, %617, %601) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %642 = "llvm.insertelement"(%8, %257, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %643 = "llvm.bitcast"(%642) : (vector<1xf32>) -> i32 loc(#loc16)
    %644 = "llvm.inline_asm"(%643, %618, %602) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %645 = "llvm.insertelement"(%8, %268, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %646 = "llvm.bitcast"(%645) : (vector<1xf32>) -> i32 loc(#loc16)
    %647 = "llvm.inline_asm"(%646, %619, %603) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %648 = "llvm.insertelement"(%8, %279, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %649 = "llvm.bitcast"(%648) : (vector<1xf32>) -> i32 loc(#loc16)
    %650 = "llvm.inline_asm"(%649, %620, %604) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %651 = "llvm.insertelement"(%8, %290, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %652 = "llvm.bitcast"(%651) : (vector<1xf32>) -> i32 loc(#loc16)
    %653 = "llvm.inline_asm"(%652, %621, %605) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %654 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %655 = "llvm.bitcast"(%654) : (vector<1xf32>) -> i32 loc(#loc16)
    %656 = "llvm.inline_asm"(%655, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %657 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %658 = "llvm.bitcast"(%657) : (vector<1xf32>) -> i32 loc(#loc16)
    %659 = "llvm.inline_asm"(%658, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %660 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %661 = "llvm.bitcast"(%660) : (vector<1xf32>) -> i32 loc(#loc16)
    %662 = "llvm.inline_asm"(%661, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %663 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %664 = "llvm.bitcast"(%663) : (vector<1xf32>) -> i32 loc(#loc16)
    %665 = "llvm.inline_asm"(%664, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %666 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %667 = "llvm.bitcast"(%666) : (vector<1xf32>) -> i32 loc(#loc16)
    %668 = "llvm.inline_asm"(%667, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %669 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %670 = "llvm.bitcast"(%669) : (vector<1xf32>) -> i32 loc(#loc16)
    %671 = "llvm.inline_asm"(%670, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %672 = "llvm.insertelement"(%8, %352, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %673 = "llvm.bitcast"(%672) : (vector<1xf32>) -> i32 loc(#loc16)
    %674 = "llvm.inline_asm"(%673, %628, %612) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %675 = "llvm.insertelement"(%8, %358, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %676 = "llvm.bitcast"(%675) : (vector<1xf32>) -> i32 loc(#loc16)
    %677 = "llvm.inline_asm"(%676, %629, %613) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/115710755.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/115710755.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/115710755.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %153 = "llvm.xor"(%23, %152) : (i32, i32) -> i32 loc(#loc9)
    %154 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %155 = "llvm.xor"(%153, %154) : (i32, i32) -> i32 loc(#loc9)
    %156 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %157 = "llvm.xor"(%155, %156) : (i32, i32) -> i32 loc(#loc9)
    %158 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %159 = "llvm.xor"(%157, %158) : (i32, i32) -> i32 loc(#loc9)
    %160 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %161 = "llvm.xor"(%159, %160) : (i32, i32) -> i32 loc(#loc9)
    %162 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc9)
    %164 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc9)
    %165 = "llvm.shl"(%164, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %166 = "llvm.add"(%165, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %167 = "llvm.getelementptr"(%9, %166) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %168 = "llvm.insertelement"(%8, %144, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %169 = "llvm.extractelement"(%168, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %170 = "llvm.bitcast"(%169) : (f32) -> i32 loc(#loc9)
    %171 = "llvm.insertelement"(%6, %170, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %172 = "llvm.inline_asm"(%167, %171, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %173 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc9)
    %174 = "llvm.lshr"(%173, %23) : (i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.shl"(%174, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.add"(%175, %173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.getelementptr"(%9, %176) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %178 = "llvm.insertelement"(%8, %145, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %179 = "llvm.extractelement"(%178, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %180 = "llvm.bitcast"(%179) : (f32) -> i32 loc(#loc9)
    %181 = "llvm.insertelement"(%6, %180, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %182 = "llvm.inline_asm"(%177, %181, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %183 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.lshr"(%183, %23) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.shl"(%184, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %186 = "llvm.add"(%185, %183) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.getelementptr"(%9, %186) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %188 = "llvm.insertelement"(%8, %146, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %189 = "llvm.extractelement"(%188, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %190 = "llvm.bitcast"(%189) : (f32) -> i32 loc(#loc9)
    %191 = "llvm.insertelement"(%6, %190, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %192 = "llvm.inline_asm"(%187, %191, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %193 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc9)
    %194 = "llvm.lshr"(%193, %23) : (i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.shl"(%194, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.add"(%195, %193) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.getelementptr"(%9, %196) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %198 = "llvm.insertelement"(%8, %147, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %199 = "llvm.extractelement"(%198, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %200 = "llvm.bitcast"(%199) : (f32) -> i32 loc(#loc9)
    %201 = "llvm.insertelement"(%6, %200, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %202 = "llvm.inline_asm"(%197, %201, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %203 = "llvm.xor"(%163, %23) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.lshr"(%203, %23) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.shl"(%204, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %206 = "llvm.add"(%205, %203) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.getelementptr"(%9, %206) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %208 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %210 = "llvm.extractelement"(%209, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %211 = "llvm.bitcast"(%210) : (i32) -> f32 loc(#loc9)
    %212 = "llvm.insertelement"(%8, %211, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %213 = "llvm.extractelement"(%212, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %214 = "llvm.xor"(%163, %18) : (i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.lshr"(%214, %23) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.shl"(%215, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.add"(%216, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %218 = "llvm.getelementptr"(%9, %217) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %219 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %220 = "llvm.insertelement"(%6, %219, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %222 = "llvm.bitcast"(%221) : (i32) -> f32 loc(#loc9)
    %223 = "llvm.insertelement"(%8, %222, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %224 = "llvm.extractelement"(%223, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %225 = "llvm.xor"(%163, %17) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.lshr"(%225, %23) : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.shl"(%226, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.add"(%227, %225) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %229 = "llvm.getelementptr"(%9, %228) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %230 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %231 = "llvm.insertelement"(%6, %230, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %233 = "llvm.bitcast"(%232) : (i32) -> f32 loc(#loc9)
    %234 = "llvm.insertelement"(%8, %233, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %235 = "llvm.extractelement"(%234, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %236 = "llvm.xor"(%163, %5) : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.lshr"(%236, %23) : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.shl"(%237, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %239 = "llvm.add"(%238, %236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %240 = "llvm.getelementptr"(%9, %239) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %241 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %244 = "llvm.bitcast"(%243) : (i32) -> f32 loc(#loc9)
    %245 = "llvm.insertelement"(%8, %244, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %246 = "llvm.extractelement"(%245, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %247 = "llvm.xor"(%163, %16) : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.lshr"(%247, %23) : (i32, i32) -> i32 loc(#loc9)
    %249 = "llvm.shl"(%248, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %250 = "llvm.add"(%249, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %251 = "llvm.getelementptr"(%9, %250) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %252 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %253 = "llvm.insertelement"(%6, %252, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %255 = "llvm.bitcast"(%254) : (i32) -> f32 loc(#loc9)
    %256 = "llvm.insertelement"(%8, %255, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %257 = "llvm.extractelement"(%256, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %258 = "llvm.xor"(%163, %4) : (i32, i32) -> i32 loc(#loc9)
    %259 = "llvm.lshr"(%258, %23) : (i32, i32) -> i32 loc(#loc9)
    %260 = "llvm.shl"(%259, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %261 = "llvm.add"(%260, %258) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %262 = "llvm.getelementptr"(%9, %261) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %263 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %264 = "llvm.insertelement"(%6, %263, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %266 = "llvm.bitcast"(%265) : (i32) -> f32 loc(#loc9)
    %267 = "llvm.insertelement"(%8, %266, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %269 = "llvm.xor"(%163, %13) : (i32, i32) -> i32 loc(#loc9)
    %270 = "llvm.lshr"(%269, %23) : (i32, i32) -> i32 loc(#loc9)
    %271 = "llvm.shl"(%270, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %272 = "llvm.add"(%271, %269) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %273 = "llvm.getelementptr"(%9, %272) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %274 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %275 = "llvm.insertelement"(%6, %274, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %277 = "llvm.bitcast"(%276) : (i32) -> f32 loc(#loc9)
    %278 = "llvm.insertelement"(%8, %277, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %280 = "llvm.xor"(%163, %3) : (i32, i32) -> i32 loc(#loc9)
    %281 = "llvm.lshr"(%280, %23) : (i32, i32) -> i32 loc(#loc9)
    %282 = "llvm.shl"(%281, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %283 = "llvm.add"(%282, %280) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %284 = "llvm.getelementptr"(%9, %283) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %285 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %286 = "llvm.insertelement"(%6, %285, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %288 = "llvm.bitcast"(%287) : (i32) -> f32 loc(#loc9)
    %289 = "llvm.insertelement"(%8, %288, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %291 = "llvm.insertelement"(%8, %148, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %292 = "llvm.extractelement"(%291, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %293 = "llvm.bitcast"(%292) : (f32) -> i32 loc(#loc9)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %295 = "llvm.inline_asm"(%167, %294, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %296 = "llvm.insertelement"(%8, %149, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %297 = "llvm.extractelement"(%296, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %298 = "llvm.bitcast"(%297) : (f32) -> i32 loc(#loc9)
    %299 = "llvm.insertelement"(%6, %298, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %300 = "llvm.inline_asm"(%177, %299, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %301 = "llvm.insertelement"(%8, %150, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %302 = "llvm.extractelement"(%301, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %303 = "llvm.bitcast"(%302) : (f32) -> i32 loc(#loc9)
    %304 = "llvm.insertelement"(%6, %303, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %305 = "llvm.inline_asm"(%187, %304, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %306 = "llvm.insertelement"(%8, %151, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.bitcast"(%307) : (f32) -> i32 loc(#loc9)
    %309 = "llvm.insertelement"(%6, %308, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %310 = "llvm.inline_asm"(%197, %309, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %311 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %313 = "llvm.extractelement"(%312, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %314 = "llvm.bitcast"(%313) : (i32) -> f32 loc(#loc9)
    %315 = "llvm.insertelement"(%8, %314, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %316 = "llvm.extractelement"(%315, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %317 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %318 = "llvm.insertelement"(%6, %317, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %319 = "llvm.extractelement"(%318, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %320 = "llvm.bitcast"(%319) : (i32) -> f32 loc(#loc9)
    %321 = "llvm.insertelement"(%8, %320, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %322 = "llvm.extractelement"(%321, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %323 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %324 = "llvm.insertelement"(%6, %323, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %325 = "llvm.extractelement"(%324, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %326 = "llvm.bitcast"(%325) : (i32) -> f32 loc(#loc9)
    %327 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %328 = "llvm.extractelement"(%327, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %329 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %330 = "llvm.insertelement"(%6, %329, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %331 = "llvm.extractelement"(%330, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %332 = "llvm.bitcast"(%331) : (i32) -> f32 loc(#loc9)
    %333 = "llvm.insertelement"(%8, %332, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %335 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %342 = "llvm.insertelement"(%6, %341, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %343 = "llvm.extractelement"(%342, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %344 = "llvm.bitcast"(%343) : (i32) -> f32 loc(#loc9)
    %345 = "llvm.insertelement"(%8, %344, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %346 = "llvm.extractelement"(%345, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %347 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %348 = "llvm.insertelement"(%6, %347, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %349 = "llvm.extractelement"(%348, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %350 = "llvm.bitcast"(%349) : (i32) -> f32 loc(#loc9)
    %351 = "llvm.insertelement"(%8, %350, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %352 = "llvm.extractelement"(%351, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %353 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %354 = "llvm.insertelement"(%6, %353, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %355 = "llvm.extractelement"(%354, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %356 = "llvm.bitcast"(%355) : (i32) -> f32 loc(#loc9)
    %357 = "llvm.insertelement"(%8, %356, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %360 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %365 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %366 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %367 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.icmp"(%359, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %369 = "llvm.icmp"(%360, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %370 = "llvm.icmp"(%361, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %371 = "llvm.icmp"(%362, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %372 = "llvm.icmp"(%363, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %373 = "llvm.icmp"(%364, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %374 = "llvm.icmp"(%365, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %375 = "llvm.icmp"(%366, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %376 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %377 = "llvm.xor"(%23, %376) : (i32, i32) -> i32 loc(#loc13)
    %378 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %379 = "llvm.xor"(%377, %378) : (i32, i32) -> i32 loc(#loc13)
    %380 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %381 = "llvm.xor"(%379, %380) : (i32, i32) -> i32 loc(#loc13)
    %382 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %383 = "llvm.xor"(%381, %382) : (i32, i32) -> i32 loc(#loc13)
    %384 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %385 = "llvm.xor"(%383, %384) : (i32, i32) -> i32 loc(#loc13)
    %386 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc13)
    %388 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc13)
    %390 = "llvm.xor"(%389, %23) : (i32, i32) -> i32 loc(#loc13)
    %391 = "llvm.lshr"(%390, %22) : (i32, i32) -> i32 loc(#loc13)
    %392 = "llvm.shl"(%391, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %395 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %396 = "llvm.insertelement"(%395, %359, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %397 = "llvm.extractelement"(%396, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %398 = "llvm.extractelement"(%396, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %399 = "llvm.inline_asm"(%394, %397, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %400 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc13)
    %401 = "llvm.shl"(%400, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %402 = "llvm.add"(%401, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %403 = "llvm.getelementptr"(%9, %402) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %404 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %405 = "llvm.insertelement"(%6, %404, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %406 = "llvm.extractelement"(%405, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %407 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc13)
    %408 = "llvm.shl"(%407, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %409 = "llvm.add"(%408, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %410 = "llvm.getelementptr"(%9, %409) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %411 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %412 = "llvm.insertelement"(%6, %411, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %414 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %415 = "llvm.insertelement"(%414, %360, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %416 = "llvm.extractelement"(%415, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %417 = "llvm.extractelement"(%415, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %418 = "llvm.inline_asm"(%394, %416, %417, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %419 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %422 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %423 = "llvm.insertelement"(%6, %422, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %425 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %426 = "llvm.insertelement"(%425, %361, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %427 = "llvm.extractelement"(%426, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %428 = "llvm.extractelement"(%426, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %429 = "llvm.inline_asm"(%394, %427, %428, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %430 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %433 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %434 = "llvm.insertelement"(%6, %433, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %436 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %437 = "llvm.insertelement"(%436, %362, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %438 = "llvm.extractelement"(%437, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %439 = "llvm.extractelement"(%437, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %440 = "llvm.inline_asm"(%394, %438, %439, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %441 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %444 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %445 = "llvm.insertelement"(%6, %444, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %447 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %448 = "llvm.insertelement"(%447, %363, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %449 = "llvm.extractelement"(%448, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %450 = "llvm.extractelement"(%448, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %451 = "llvm.inline_asm"(%394, %449, %450, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %452 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %455 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %456 = "llvm.insertelement"(%6, %455, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %458 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %459 = "llvm.insertelement"(%458, %364, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %460 = "llvm.extractelement"(%459, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %461 = "llvm.extractelement"(%459, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %462 = "llvm.inline_asm"(%394, %460, %461, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %463 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %466 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %467 = "llvm.insertelement"(%6, %466, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %469 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %470 = "llvm.insertelement"(%469, %365, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %471 = "llvm.extractelement"(%470, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %472 = "llvm.extractelement"(%470, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %473 = "llvm.inline_asm"(%394, %471, %472, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %474 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %477 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %478 = "llvm.insertelement"(%6, %477, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %480 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %481 = "llvm.insertelement"(%480, %366, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %482 = "llvm.extractelement"(%481, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %483 = "llvm.extractelement"(%481, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %484 = "llvm.inline_asm"(%394, %482, %483, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %485 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %488 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %489 = "llvm.insertelement"(%6, %488, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %490 = "llvm.extractelement"(%489, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %491 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc14)
    %492 = "llvm.zext"(%368) : (i1) -> i8 loc(#loc14)
    %493 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc14)
    %494 = "llvm.zext"(%369) : (i1) -> i8 loc(#loc14)
    %495 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc14)
    %496 = "llvm.zext"(%370) : (i1) -> i8 loc(#loc14)
    %497 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc14)
    %498 = "llvm.zext"(%371) : (i1) -> i8 loc(#loc14)
    %499 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc14)
    %500 = "llvm.zext"(%372) : (i1) -> i8 loc(#loc14)
    %501 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc14)
    %502 = "llvm.zext"(%373) : (i1) -> i8 loc(#loc14)
    %503 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc14)
    %504 = "llvm.zext"(%374) : (i1) -> i8 loc(#loc14)
    %505 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc14)
    %506 = "llvm.zext"(%375) : (i1) -> i8 loc(#loc14)
    %507 = "llvm.getelementptr"(%9, %393) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %508 = "llvm.insertelement"(%1, %491, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %509 = "llvm.insertelement"(%508, %492, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %510 = "llvm.extractelement"(%509, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %511 = "llvm.extractelement"(%509, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %512 = "llvm.inline_asm"(%507, %510, %511, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %513 = "llvm.getelementptr"(%9, %402) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %514 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %515 = "llvm.insertelement"(%0, %514, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %516 = "llvm.extractelement"(%515, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %517 = "llvm.getelementptr"(%9, %409) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %518 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %519 = "llvm.insertelement"(%0, %518, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %520 = "llvm.extractelement"(%519, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %521 = "llvm.insertelement"(%1, %493, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %522 = "llvm.insertelement"(%521, %494, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %523 = "llvm.extractelement"(%522, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %524 = "llvm.extractelement"(%522, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %525 = "llvm.inline_asm"(%507, %523, %524, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %526 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %529 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %530 = "llvm.insertelement"(%0, %529, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %531 = "llvm.extractelement"(%530, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %532 = "llvm.insertelement"(%1, %495, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %533 = "llvm.insertelement"(%532, %496, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %534 = "llvm.extractelement"(%533, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %535 = "llvm.extractelement"(%533, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %536 = "llvm.inline_asm"(%507, %534, %535, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %537 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %540 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %541 = "llvm.insertelement"(%0, %540, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %542 = "llvm.extractelement"(%541, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %543 = "llvm.insertelement"(%1, %497, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %544 = "llvm.insertelement"(%543, %498, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %545 = "llvm.extractelement"(%544, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %546 = "llvm.extractelement"(%544, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %547 = "llvm.inline_asm"(%507, %545, %546, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %548 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %551 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %552 = "llvm.insertelement"(%0, %551, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %553 = "llvm.extractelement"(%552, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %554 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %555 = "llvm.insertelement"(%554, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %556 = "llvm.extractelement"(%555, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %557 = "llvm.extractelement"(%555, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %558 = "llvm.inline_asm"(%507, %556, %557, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %559 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %562 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %563 = "llvm.insertelement"(%0, %562, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %564 = "llvm.extractelement"(%563, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %565 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %566 = "llvm.insertelement"(%565, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %567 = "llvm.extractelement"(%566, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %568 = "llvm.extractelement"(%566, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %569 = "llvm.inline_asm"(%507, %567, %568, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %570 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %573 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %574 = "llvm.insertelement"(%0, %573, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %575 = "llvm.extractelement"(%574, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %576 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %577 = "llvm.insertelement"(%576, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %578 = "llvm.extractelement"(%577, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %579 = "llvm.extractelement"(%577, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %580 = "llvm.inline_asm"(%507, %578, %579, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %581 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %584 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %585 = "llvm.insertelement"(%0, %584, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %586 = "llvm.extractelement"(%585, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %587 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %588 = "llvm.insertelement"(%587, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %591 = "llvm.inline_asm"(%507, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %592 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %595 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %596 = "llvm.insertelement"(%0, %595, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %598 = "llvm.trunc"(%516) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %599 = "llvm.trunc"(%520) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %600 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %601 = "llvm.trunc"(%531) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %602 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %603 = "llvm.trunc"(%542) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %604 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %605 = "llvm.trunc"(%553) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %606 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %607 = "llvm.trunc"(%564) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %608 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %609 = "llvm.trunc"(%575) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %610 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %611 = "llvm.trunc"(%586) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %612 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %613 = "llvm.trunc"(%597) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %614 = "llvm.getelementptr"(%arg1, %406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %615 = "llvm.getelementptr"(%arg1, %413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %616 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %617 = "llvm.getelementptr"(%arg1, %424) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %618 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %619 = "llvm.getelementptr"(%arg1, %435) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %620 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %621 = "llvm.getelementptr"(%arg1, %446) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %623 = "llvm.getelementptr"(%arg1, %457) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %624 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %625 = "llvm.getelementptr"(%arg1, %468) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %626 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %627 = "llvm.getelementptr"(%arg1, %479) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %628 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %629 = "llvm.getelementptr"(%arg1, %490) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %630 = "llvm.insertelement"(%8, %213, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %631 = "llvm.bitcast"(%630) : (vector<1xf32>) -> i32 loc(#loc16)
    %632 = "llvm.inline_asm"(%631, %614, %598) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %633 = "llvm.insertelement"(%8, %224, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %634 = "llvm.bitcast"(%633) : (vector<1xf32>) -> i32 loc(#loc16)
    %635 = "llvm.inline_asm"(%634, %615, %599) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %636 = "llvm.insertelement"(%8, %235, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %637 = "llvm.bitcast"(%636) : (vector<1xf32>) -> i32 loc(#loc16)
    %638 = "llvm.inline_asm"(%637, %616, %600) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %639 = "llvm.insertelement"(%8, %246, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %640 = "llvm.bitcast"(%639) : (vector<1xf32>) -> i32 loc(#loc16)
    %641 = "llvm.inline_asm"(%640, %617, %601) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %642 = "llvm.insertelement"(%8, %257, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %643 = "llvm.bitcast"(%642) : (vector<1xf32>) -> i32 loc(#loc16)
    %644 = "llvm.inline_asm"(%643, %618, %602) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %645 = "llvm.insertelement"(%8, %268, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %646 = "llvm.bitcast"(%645) : (vector<1xf32>) -> i32 loc(#loc16)
    %647 = "llvm.inline_asm"(%646, %619, %603) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %648 = "llvm.insertelement"(%8, %279, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %649 = "llvm.bitcast"(%648) : (vector<1xf32>) -> i32 loc(#loc16)
    %650 = "llvm.inline_asm"(%649, %620, %604) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %651 = "llvm.insertelement"(%8, %290, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %652 = "llvm.bitcast"(%651) : (vector<1xf32>) -> i32 loc(#loc16)
    %653 = "llvm.inline_asm"(%652, %621, %605) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %654 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %655 = "llvm.bitcast"(%654) : (vector<1xf32>) -> i32 loc(#loc16)
    %656 = "llvm.inline_asm"(%655, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %657 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %658 = "llvm.bitcast"(%657) : (vector<1xf32>) -> i32 loc(#loc16)
    %659 = "llvm.inline_asm"(%658, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %660 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %661 = "llvm.bitcast"(%660) : (vector<1xf32>) -> i32 loc(#loc16)
    %662 = "llvm.inline_asm"(%661, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %663 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %664 = "llvm.bitcast"(%663) : (vector<1xf32>) -> i32 loc(#loc16)
    %665 = "llvm.inline_asm"(%664, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %666 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %667 = "llvm.bitcast"(%666) : (vector<1xf32>) -> i32 loc(#loc16)
    %668 = "llvm.inline_asm"(%667, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %669 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %670 = "llvm.bitcast"(%669) : (vector<1xf32>) -> i32 loc(#loc16)
    %671 = "llvm.inline_asm"(%670, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %672 = "llvm.insertelement"(%8, %352, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %673 = "llvm.bitcast"(%672) : (vector<1xf32>) -> i32 loc(#loc16)
    %674 = "llvm.inline_asm"(%673, %628, %612) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %675 = "llvm.insertelement"(%8, %358, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %676 = "llvm.bitcast"(%675) : (vector<1xf32>) -> i32 loc(#loc16)
    %677 = "llvm.inline_asm"(%676, %629, %613) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/115710755.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/115710755.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/115710755.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/115710755.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/115710755.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/115710755.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/115710755.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/115710755.py":12:17)
#loc10 = loc("/tmp/ipykernel_14131/115710755.py":15:62)
#loc11 = loc("/tmp/ipykernel_14131/115710755.py":17:53)
#loc12 = loc("/tmp/ipykernel_14131/115710755.py":17:40)
#loc13 = loc("/tmp/ipykernel_14131/115710755.py":19:35)
#loc14 = loc("/tmp/ipykernel_14131/115710755.py":20:32)
#loc15 = loc("/tmp/ipykernel_14131/115710755.py":22:26)
#loc16 = loc("/tmp/ipykernel_14131/115710755.py":22:47)
#loc17 = loc("/tmp/ipykernel_14131/115710755.py":22:4)


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc10)
    %34 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc10)
    %35 = "arith.mulf"(%34, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %36 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %37 = "arith.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc11)
    %38 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc11)
    %39 = "arith.mulf"(%38, %35) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %40 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %41 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc13)
    %42 = "arith.extsi"(%41) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc13)
    %43 = "arith.extsi"(%40) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc13)
    %44 = "arith.addi"(%42, %43) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc13)
    %45 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc13)
    %46 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc13)
    %47 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc13)
    %48 = "arith.cmpi"(%44, %47) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc13)
    %49 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc13)
    %50 = "arith.cmpi"(%44, %49) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc13)
    %51 = "arith.andi"(%48, %50) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc13)
    %52 = "arith.addi"(%41, %40) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %53 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %54 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc15)
    %55 = "arith.extsi"(%54) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %56 = "arith.extsi"(%53) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %57 = "arith.addi"(%55, %56) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc15)
    %58 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc15)
    %59 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc15)
    %60 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %61 = "arith.cmpi"(%57, %60) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %62 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %63 = "arith.cmpi"(%57, %62) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %64 = "arith.andi"(%61, %63) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc15)
    %65 = "arith.addi"(%54, %53) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %66 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %67 = "arith.extsi"(%65) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %68 = "arith.extsi"(%66) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %69 = "arith.addi"(%67, %68) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc16)
    %70 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc16)
    %71 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc16)
    %72 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %73 = "arith.cmpi"(%69, %72) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %74 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %75 = "arith.cmpi"(%69, %74) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %76 = "arith.andi"(%73, %75) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc16)
    %77 = "arith.addi"(%65, %66) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %78 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %79 = "arith.cmpi"(%52, %78) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %80 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %81 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %82 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc18)
    %83 = "arith.extsi"(%81) : (i32) -> i64 loc(#loc18)
    %84 = "arith.muli"(%82, %83) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc18)
    %85 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc18)
    %86 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc18)
    %87 = "arith.cmpi"(%84, %85) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc18)
    %88 = "arith.cmpi"(%84, %86) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc18)
    %89 = "arith.andi"(%87, %88) : (i1, i1) -> i1 loc(#loc18)
    %90 = "arith.muli"(%arg2, %81) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %91 = "tt.splat"(%90) : (i32) -> tensor<1024xi32> loc(#loc19)
    %92 = "arith.cmpi"(%77, %91) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %93 = "tt.join"(%52, %77) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %94 = "tt.trans"(%93) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %95 = "tt.join"(%79, %92) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %96 = "tt.trans"(%95) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %97 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %98 = "tt.addptr"(%97, %94) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%98, %39, %96) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @scalar_mult_duplicate) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc10)
    %34 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc10)
    %35 = "arith.mulf"(%34, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %36 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %37 = "arith.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc11)
    %38 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc11)
    %39 = "arith.mulf"(%38, %35) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %40 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %41 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc13)
    %42 = "arith.extsi"(%41) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc13)
    %43 = "arith.extsi"(%40) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc13)
    %44 = "arith.addi"(%42, %43) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc13)
    %45 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc13)
    %46 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc13)
    %47 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc13)
    %48 = "arith.cmpi"(%44, %47) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc13)
    %49 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc13)
    %50 = "arith.cmpi"(%44, %49) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc13)
    %51 = "arith.andi"(%48, %50) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc13)
    %52 = "arith.addi"(%41, %40) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %53 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %54 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc15)
    %55 = "arith.extsi"(%54) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %56 = "arith.extsi"(%53) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc15)
    %57 = "arith.addi"(%55, %56) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc15)
    %58 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc15)
    %59 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc15)
    %60 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %61 = "arith.cmpi"(%57, %60) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %62 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc15)
    %63 = "arith.cmpi"(%57, %62) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc15)
    %64 = "arith.andi"(%61, %63) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc15)
    %65 = "arith.addi"(%54, %53) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %66 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %67 = "arith.extsi"(%65) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %68 = "arith.extsi"(%66) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %69 = "arith.addi"(%67, %68) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc16)
    %70 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc16)
    %71 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc16)
    %72 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %73 = "arith.cmpi"(%69, %72) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %74 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %75 = "arith.cmpi"(%69, %74) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %76 = "arith.andi"(%73, %75) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc16)
    %77 = "arith.addi"(%65, %66) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %78 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %79 = "arith.cmpi"(%52, %78) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %80 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %81 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %82 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc18)
    %83 = "arith.extsi"(%81) : (i32) -> i64 loc(#loc18)
    %84 = "arith.muli"(%82, %83) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc18)
    %85 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc18)
    %86 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc18)
    %87 = "arith.cmpi"(%84, %85) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc18)
    %88 = "arith.cmpi"(%84, %86) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc18)
    %89 = "arith.andi"(%87, %88) : (i1, i1) -> i1 loc(#loc18)
    %90 = "arith.muli"(%arg2, %81) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %91 = "tt.splat"(%90) : (i32) -> tensor<1024xi32> loc(#loc19)
    %92 = "arith.cmpi"(%77, %91) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %93 = "tt.join"(%52, %77) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %94 = "tt.trans"(%93) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %95 = "tt.join"(%79, %92) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %96 = "tt.trans"(%95) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %97 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %98 = "tt.addptr"(%97, %94) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%98, %39, %96) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "arith.mulf"(%15, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %17 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %18 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %19 = "arith.addi"(%18, %17) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %21 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc16)
    %22 = "arith.addi"(%21, %20) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %23 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %24 = "arith.addi"(%22, %23) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %26 = "arith.cmpi"(%19, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %27 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %28 = "tt.splat"(%27) : (i32) -> tensor<1024xi32> loc(#loc20)
    %29 = "arith.cmpi"(%24, %28) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %30 = "tt.join"(%19, %24) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %32 = "tt.join"(%26, %29) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %33 = "tt.trans"(%32) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %34 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %35 = "tt.addptr"(%34, %31) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%35, %16, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "arith.mulf"(%15, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %17 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %18 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %19 = "arith.addi"(%18, %17) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %21 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc16)
    %22 = "arith.addi"(%21, %20) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %23 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %24 = "arith.addi"(%22, %23) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %26 = "arith.cmpi"(%19, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %27 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %28 = "tt.splat"(%27) : (i32) -> tensor<1024xi32> loc(#loc20)
    %29 = "arith.cmpi"(%24, %28) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %30 = "tt.join"(%19, %24) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %32 = "tt.join"(%26, %29) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %33 = "tt.trans"(%32) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %34 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %35 = "tt.addptr"(%34, %31) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%35, %16, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "arith.mulf"(%15, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %17 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %18 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %19 = "arith.addi"(%18, %17) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %21 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc16)
    %22 = "arith.addi"(%21, %20) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %23 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %24 = "arith.addi"(%22, %23) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %26 = "arith.cmpi"(%19, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %27 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %28 = "tt.splat"(%27) : (i32) -> tensor<1024xi32> loc(#loc20)
    %29 = "arith.cmpi"(%24, %28) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %30 = "tt.join"(%19, %24) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %32 = "tt.join"(%26, %29) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %33 = "tt.trans"(%32) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %34 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %35 = "tt.addptr"(%34, %31) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%35, %16, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "arith.mulf"(%15, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %17 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %18 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %19 = "arith.addi"(%18, %17) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %21 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc16)
    %22 = "arith.addi"(%21, %20) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %23 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %24 = "arith.addi"(%22, %23) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %26 = "arith.cmpi"(%19, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %27 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %28 = "tt.splat"(%27) : (i32) -> tensor<1024xi32> loc(#loc20)
    %29 = "arith.cmpi"(%24, %28) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %30 = "tt.join"(%19, %24) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %32 = "tt.join"(%26, %29) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %33 = "tt.trans"(%32) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %34 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %35 = "tt.addptr"(%34, %31) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%35, %16, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %17 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %18 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.addi"(%18, %17) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %20 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %21 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %22 = "arith.addi"(%21, %20) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %23 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %24 = "arith.addi"(%22, %23) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %26 = "arith.cmpi"(%19, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %27 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %28 = "tt.splat"(%27) : (i32) -> tensor<1024xi32> loc(#loc19)
    %29 = "arith.cmpi"(%24, %28) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %30 = "tt.join"(%19, %24) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %32 = "tt.join"(%26, %29) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %33 = "tt.trans"(%32) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %34 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %35 = "tt.addptr"(%34, %31) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%35, %16, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %19 = "tt.splat"(%18) : (i32) -> tensor<1024xi32> loc(#loc14)
    %20 = "arith.cmpi"(%17, %19) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc14)
    %21 = "tt.join"(%7, %17) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc16)
    %23 = "tt.join"(%9, %20) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc17)
    %24 = "tt.trans"(%23) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc18)
    %25 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    %26 = "tt.addptr"(%25, %22) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    "tt.store"(%26, %16, %24) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %19 = "tt.splat"(%18) : (i32) -> tensor<1024xi32> loc(#loc14)
    %20 = "arith.cmpi"(%17, %19) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc14)
    %21 = "tt.join"(%7, %17) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc16)
    %23 = "tt.join"(%9, %20) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc17)
    %24 = "tt.trans"(%23) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc18)
    %25 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    %26 = "tt.addptr"(%25, %22) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    "tt.store"(%26, %16, %24) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %19 = "tt.splat"(%18) : (i32) -> tensor<1024xi32> loc(#loc14)
    %20 = "arith.cmpi"(%17, %19) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc14)
    %21 = "tt.join"(%7, %17) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc16)
    %23 = "tt.join"(%9, %20) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc17)
    %24 = "tt.trans"(%23) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc18)
    %25 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    %26 = "tt.addptr"(%25, %22) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    "tt.store"(%26, %16, %24) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %19 = "tt.splat"(%18) : (i32) -> tensor<1024xi32> loc(#loc14)
    %20 = "arith.cmpi"(%17, %19) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc14)
    %21 = "tt.join"(%7, %17) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc16)
    %23 = "tt.join"(%9, %20) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc17)
    %24 = "tt.trans"(%23) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc18)
    %25 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    %26 = "tt.addptr"(%25, %22) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc19)
    "tt.store"(%26, %16, %24) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %16 = "tt.broadcast"(%15) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc11)
    %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc12)
    %18 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %19 = "tt.splat"(%18) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc14)
    %20 = "arith.cmpi"(%17, %19) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc14)
    %21 = "tt.join"(%7, %17) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked2> loc(#loc15)
    %22 = "ttg.convert_layout"(%21) : (tensor<1024x2xi32, #blocked2>) -> tensor<1024x2xi32, #blocked3> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked3>) -> tensor<2x1024xi32, #blocked4> loc(#loc16)
    %24 = "ttg.convert_layout"(%23) : (tensor<2x1024xi32, #blocked4>) -> tensor<2x1024xi32, #blocked> loc(#loc17)
    %25 = "tt.join"(%9, %20) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked2> loc(#loc18)
    %26 = "ttg.convert_layout"(%25) : (tensor<1024x2xi1, #blocked2>) -> tensor<1024x2xi1, #blocked3> loc(#loc19)
    %27 = "tt.trans"(%26) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked3>) -> tensor<2x1024xi1, #blocked4> loc(#loc19)
    %28 = "ttg.convert_layout"(%27) : (tensor<2x1024xi1, #blocked4>) -> tensor<2x1024xi1, #blocked> loc(#loc20)
    %29 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %30 = "tt.addptr"(%29, %24) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    "tt.store"(%30, %16, %28) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xf32, #blocked>, tensor<2x1024xi1, #blocked>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "arith.mulf"(%17, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %19 = "tt.broadcast"(%18) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc11)
    %20 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc12)
    %21 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %22 = "tt.splat"(%21) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc14)
    %23 = "arith.cmpi"(%20, %22) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc14)
    %24 = "tt.join"(%7, %20) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc15)
    %25 = "ttg.convert_layout"(%24) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %26 = "tt.trans"(%25) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc16)
    %27 = "ttg.convert_layout"(%26) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc17)
    %28 = "tt.join"(%9, %23) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc18)
    %29 = "ttg.convert_layout"(%28) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc19)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    %31 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc20)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %33 = "tt.addptr"(%32, %27) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %34 = "ttg.convert_layout"(%33) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc20)
    %35 = "ttg.convert_layout"(%19) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc20)
    %36 = "ttg.convert_layout"(%31) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc20)
    "tt.store"(%34, %35, %36) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "arith.mulf"(%17, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %19 = "tt.broadcast"(%18) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc11)
    %20 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc12)
    %21 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %22 = "tt.splat"(%21) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc14)
    %23 = "arith.cmpi"(%20, %22) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc14)
    %24 = "tt.join"(%7, %20) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc15)
    %25 = "ttg.convert_layout"(%24) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %26 = "tt.trans"(%25) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc16)
    %27 = "ttg.convert_layout"(%26) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc17)
    %28 = "tt.join"(%9, %23) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc18)
    %29 = "ttg.convert_layout"(%28) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc19)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    %31 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc20)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %33 = "tt.addptr"(%32, %27) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %34 = "ttg.convert_layout"(%33) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc20)
    %35 = "ttg.convert_layout"(%19) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc20)
    %36 = "ttg.convert_layout"(%31) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc20)
    "tt.store"(%34, %35, %36) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "arith.mulf"(%17, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %19 = "tt.broadcast"(%18) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc11)
    %20 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc12)
    %21 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %22 = "tt.splat"(%21) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc14)
    %23 = "arith.cmpi"(%20, %22) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc14)
    %24 = "tt.join"(%7, %20) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc15)
    %25 = "ttg.convert_layout"(%24) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %26 = "tt.trans"(%25) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc16)
    %27 = "ttg.convert_layout"(%26) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc17)
    %28 = "tt.join"(%9, %23) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc18)
    %29 = "ttg.convert_layout"(%28) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc19)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    %31 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc20)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %33 = "tt.addptr"(%32, %27) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc17)
    %34 = "ttg.convert_layout"(%33) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc20)
    %35 = "ttg.convert_layout"(%19) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc20)
    %36 = "ttg.convert_layout"(%31) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc20)
    "tt.store"(%34, %35, %36) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc12)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc15)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc15)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc17)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc17)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc19)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc19)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc12)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc12)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc15)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc15)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc17)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc17)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc19)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc19)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc12)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc12)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc15)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc15)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc16)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc17)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc17)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc19)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc19)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc20)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc12)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<2.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "arith.mulf"(%19, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc11)
    %21 = "ttg.convert_layout"(%20) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %22 = "tt.broadcast"(%21) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc11)
    %23 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %24 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %25 = "tt.splat"(%24) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %26 = "arith.cmpi"(%23, %25) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %27 = "tt.join"(%10, %23) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %28 = "ttg.convert_layout"(%27) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %30 = "tt.join"(%14, %26) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %31 = "ttg.convert_layout"(%30) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %34 = "tt.addptr"(%33, %29) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%34, %22, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc20)
    "tt.return"() : () -> () loc(#loc21)
  }) {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %3 = "llvm.bitcast"(%2) : (f32) -> f32 loc(#loc1)
    %4 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %5 = "llvm.insertvalue"(%4, %3) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %6 = "llvm.insertvalue"(%5, %3) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %7 = "llvm.insertvalue"(%6, %3) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %8 = "llvm.insertvalue"(%7, %3) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %9 = "llvm.insertvalue"(%8, %3) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %10 = "llvm.insertvalue"(%9, %3) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %11 = "llvm.insertvalue"(%10, %3) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %12 = "llvm.insertvalue"(%11, %3) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %13 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %14 = "llvm.mul"(%13, %0) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %15 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %16 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %17 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %18 = "llvm.urem"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %19 = "llvm.udiv"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %20 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %21 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %22 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %24 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %25 = "llvm.and"(%18, %24) : (i32, i32) -> i32 loc(#loc4)
    %26 = "llvm.icmp"(%25, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %27 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %28 = "llvm.select"(%26, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %29 = "llvm.xor"(%23, %28) : (i32, i32) -> i32 loc(#loc4)
    %30 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %31 = "llvm.and"(%18, %30) : (i32, i32) -> i32 loc(#loc4)
    %32 = "llvm.icmp"(%31, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %33 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %34 = "llvm.select"(%32, %23, %33) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.xor"(%29, %34) : (i32, i32) -> i32 loc(#loc4)
    %36 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %37 = "llvm.and"(%18, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.icmp"(%37, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %39 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %40 = "llvm.select"(%38, %23, %39) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%35, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %43 = "llvm.and"(%18, %42) : (i32, i32) -> i32 loc(#loc4)
    %44 = "llvm.icmp"(%43, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %45 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %46 = "llvm.select"(%44, %23, %45) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.xor"(%41, %46) : (i32, i32) -> i32 loc(#loc4)
    %48 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %49 = "llvm.and"(%18, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.icmp"(%49, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %51 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %52 = "llvm.select"(%50, %23, %51) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%47, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %55 = "llvm.and"(%19, %54) : (i32, i32) -> i32 loc(#loc4)
    %56 = "llvm.icmp"(%55, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %57 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %58 = "llvm.select"(%56, %23, %57) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.xor"(%53, %58) : (i32, i32) -> i32 loc(#loc4)
    %60 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %61 = "llvm.and"(%19, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.icmp"(%61, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %63 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %64 = "llvm.select"(%62, %23, %63) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.xor"(%59, %64) : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %67 = "llvm.xor"(%65, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %69 = "llvm.xor"(%65, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %71 = "llvm.xor"(%65, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc4)
    %73 = "llvm.xor"(%65, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %75 = "llvm.xor"(%65, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.mlir.constant"() <{value = 513 : i32}> : () -> i32 loc(#loc4)
    %77 = "llvm.xor"(%65, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.mlir.constant"() <{value = 514 : i32}> : () -> i32 loc(#loc4)
    %79 = "llvm.xor"(%65, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.mlir.constant"() <{value = 515 : i32}> : () -> i32 loc(#loc4)
    %81 = "llvm.xor"(%65, %80) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.add"(%67, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.add"(%69, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.add"(%71, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.add"(%73, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.add"(%75, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.add"(%77, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%79, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %91 = "llvm.insertvalue"(%90, %82) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %92 = "llvm.insertvalue"(%91, %83) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %93 = "llvm.insertvalue"(%92, %84) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %94 = "llvm.insertvalue"(%93, %85) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %95 = "llvm.insertvalue"(%94, %86) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %96 = "llvm.insertvalue"(%95, %87) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %97 = "llvm.insertvalue"(%96, %88) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %98 = "llvm.insertvalue"(%97, %89) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %99 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %100 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %101 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %102 = "llvm.urem"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.udiv"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %105 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %106 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %108 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %109 = "llvm.and"(%102, %108) : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.icmp"(%109, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %111 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %112 = "llvm.select"(%110, %107, %111) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.xor"(%107, %112) : (i32, i32) -> i32 loc(#loc4)
    %114 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %115 = "llvm.and"(%102, %114) : (i32, i32) -> i32 loc(#loc4)
    %116 = "llvm.icmp"(%115, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %117 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %118 = "llvm.select"(%116, %107, %117) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %119 = "llvm.xor"(%113, %118) : (i32, i32) -> i32 loc(#loc4)
    %120 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %121 = "llvm.and"(%102, %120) : (i32, i32) -> i32 loc(#loc4)
    %122 = "llvm.icmp"(%121, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %123 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %124 = "llvm.select"(%122, %107, %123) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %125 = "llvm.xor"(%119, %124) : (i32, i32) -> i32 loc(#loc4)
    %126 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %127 = "llvm.and"(%102, %126) : (i32, i32) -> i32 loc(#loc4)
    %128 = "llvm.icmp"(%127, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %129 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %130 = "llvm.select"(%128, %107, %129) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %131 = "llvm.xor"(%125, %130) : (i32, i32) -> i32 loc(#loc4)
    %132 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %133 = "llvm.and"(%102, %132) : (i32, i32) -> i32 loc(#loc4)
    %134 = "llvm.icmp"(%133, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %135 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %136 = "llvm.select"(%134, %107, %135) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %137 = "llvm.xor"(%131, %136) : (i32, i32) -> i32 loc(#loc4)
    %138 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %139 = "llvm.and"(%103, %138) : (i32, i32) -> i32 loc(#loc4)
    %140 = "llvm.icmp"(%139, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %141 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %142 = "llvm.select"(%140, %107, %141) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %143 = "llvm.xor"(%137, %142) : (i32, i32) -> i32 loc(#loc4)
    %144 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %145 = "llvm.and"(%103, %144) : (i32, i32) -> i32 loc(#loc4)
    %146 = "llvm.icmp"(%145, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %147 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %148 = "llvm.select"(%146, %107, %147) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %149 = "llvm.xor"(%143, %148) : (i32, i32) -> i32 loc(#loc4)
    %150 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %151 = "llvm.xor"(%149, %150) : (i32, i32) -> i32 loc(#loc4)
    %152 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %153 = "llvm.xor"(%149, %152) : (i32, i32) -> i32 loc(#loc4)
    %154 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %155 = "llvm.xor"(%149, %154) : (i32, i32) -> i32 loc(#loc4)
    %156 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc4)
    %157 = "llvm.xor"(%149, %156) : (i32, i32) -> i32 loc(#loc4)
    %158 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %159 = "llvm.xor"(%149, %158) : (i32, i32) -> i32 loc(#loc4)
    %160 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc4)
    %161 = "llvm.xor"(%149, %160) : (i32, i32) -> i32 loc(#loc4)
    %162 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc4)
    %163 = "llvm.xor"(%149, %162) : (i32, i32) -> i32 loc(#loc4)
    %164 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc4)
    %165 = "llvm.xor"(%149, %164) : (i32, i32) -> i32 loc(#loc4)
    %166 = "llvm.add"(%151, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %167 = "llvm.add"(%153, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %168 = "llvm.add"(%155, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %169 = "llvm.add"(%157, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %170 = "llvm.add"(%159, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %171 = "llvm.add"(%161, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %172 = "llvm.add"(%163, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %173 = "llvm.add"(%165, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %174 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %175 = "llvm.insertvalue"(%174, %166) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %176 = "llvm.insertvalue"(%175, %167) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %177 = "llvm.insertvalue"(%176, %168) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %178 = "llvm.insertvalue"(%177, %169) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %179 = "llvm.insertvalue"(%178, %170) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %180 = "llvm.insertvalue"(%179, %171) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %181 = "llvm.insertvalue"(%180, %172) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %182 = "llvm.insertvalue"(%181, %173) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %183 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %185 = "llvm.insertvalue"(%184, %183) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %186 = "llvm.insertvalue"(%185, %183) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %187 = "llvm.insertvalue"(%186, %183) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %188 = "llvm.insertvalue"(%187, %183) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %189 = "llvm.insertvalue"(%188, %183) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %190 = "llvm.insertvalue"(%189, %183) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %191 = "llvm.insertvalue"(%190, %183) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %192 = "llvm.insertvalue"(%191, %183) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %193 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %194 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %195 = "llvm.insertvalue"(%194, %193) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %196 = "llvm.insertvalue"(%195, %193) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %197 = "llvm.insertvalue"(%196, %193) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %198 = "llvm.insertvalue"(%197, %193) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %199 = "llvm.insertvalue"(%198, %193) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %200 = "llvm.insertvalue"(%199, %193) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %201 = "llvm.insertvalue"(%200, %193) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %202 = "llvm.insertvalue"(%201, %193) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %203 = "llvm.extractvalue"(%192) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %204 = "llvm.extractvalue"(%192) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %205 = "llvm.extractvalue"(%192) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %206 = "llvm.extractvalue"(%192) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %207 = "llvm.extractvalue"(%192) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %208 = "llvm.extractvalue"(%192) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %209 = "llvm.extractvalue"(%192) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %210 = "llvm.extractvalue"(%192) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %211 = "llvm.extractvalue"(%98) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %212 = "llvm.extractvalue"(%98) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %213 = "llvm.extractvalue"(%98) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %214 = "llvm.extractvalue"(%98) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %215 = "llvm.extractvalue"(%98) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %216 = "llvm.extractvalue"(%98) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %217 = "llvm.extractvalue"(%98) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %218 = "llvm.extractvalue"(%98) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %219 = "llvm.add"(%203, %211) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %220 = "llvm.add"(%204, %212) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %221 = "llvm.add"(%205, %213) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %222 = "llvm.add"(%206, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %223 = "llvm.add"(%207, %215) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %224 = "llvm.add"(%208, %216) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %225 = "llvm.add"(%209, %217) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %226 = "llvm.add"(%210, %218) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %227 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %228 = "llvm.insertvalue"(%227, %219) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %229 = "llvm.insertvalue"(%228, %220) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %230 = "llvm.insertvalue"(%229, %221) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %231 = "llvm.insertvalue"(%230, %222) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %232 = "llvm.insertvalue"(%231, %223) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %233 = "llvm.insertvalue"(%232, %224) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %234 = "llvm.insertvalue"(%233, %225) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %235 = "llvm.insertvalue"(%234, %226) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %236 = "llvm.extractvalue"(%202) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %237 = "llvm.extractvalue"(%202) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %238 = "llvm.extractvalue"(%202) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %239 = "llvm.extractvalue"(%202) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %240 = "llvm.extractvalue"(%202) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %241 = "llvm.extractvalue"(%202) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %242 = "llvm.extractvalue"(%202) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %243 = "llvm.extractvalue"(%202) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %244 = "llvm.extractvalue"(%182) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %245 = "llvm.extractvalue"(%182) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %246 = "llvm.extractvalue"(%182) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %247 = "llvm.extractvalue"(%182) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %248 = "llvm.extractvalue"(%182) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %249 = "llvm.extractvalue"(%182) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %250 = "llvm.extractvalue"(%182) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %251 = "llvm.extractvalue"(%182) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %252 = "llvm.add"(%236, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %253 = "llvm.add"(%237, %245) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %254 = "llvm.add"(%238, %246) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %255 = "llvm.add"(%239, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %256 = "llvm.add"(%240, %248) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %257 = "llvm.add"(%241, %249) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %258 = "llvm.add"(%242, %250) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %259 = "llvm.add"(%243, %251) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %260 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %261 = "llvm.insertvalue"(%260, %252) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %262 = "llvm.insertvalue"(%261, %253) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %263 = "llvm.insertvalue"(%262, %254) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %264 = "llvm.insertvalue"(%263, %255) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %265 = "llvm.insertvalue"(%264, %256) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %266 = "llvm.insertvalue"(%265, %257) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %267 = "llvm.insertvalue"(%266, %258) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %268 = "llvm.insertvalue"(%267, %259) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %269 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %270 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %271 = "llvm.insertvalue"(%270, %269) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %272 = "llvm.insertvalue"(%271, %269) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %273 = "llvm.insertvalue"(%272, %269) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %274 = "llvm.insertvalue"(%273, %269) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %275 = "llvm.insertvalue"(%274, %269) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %276 = "llvm.insertvalue"(%275, %269) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %277 = "llvm.insertvalue"(%276, %269) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %278 = "llvm.insertvalue"(%277, %269) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %279 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %280 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %281 = "llvm.insertvalue"(%280, %279) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %282 = "llvm.insertvalue"(%281, %279) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %283 = "llvm.insertvalue"(%282, %279) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %284 = "llvm.insertvalue"(%283, %279) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %285 = "llvm.insertvalue"(%284, %279) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %286 = "llvm.insertvalue"(%285, %279) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %287 = "llvm.insertvalue"(%286, %279) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %288 = "llvm.insertvalue"(%287, %279) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %289 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %290 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %291 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %292 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %293 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %294 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %295 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %296 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %297 = "llvm.extractvalue"(%278) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %298 = "llvm.extractvalue"(%278) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %299 = "llvm.extractvalue"(%278) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %300 = "llvm.extractvalue"(%278) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %301 = "llvm.extractvalue"(%278) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %302 = "llvm.extractvalue"(%278) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %303 = "llvm.extractvalue"(%278) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %304 = "llvm.extractvalue"(%278) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %305 = "llvm.icmp"(%289, %297) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %306 = "llvm.icmp"(%290, %298) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %307 = "llvm.icmp"(%291, %299) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %308 = "llvm.icmp"(%292, %300) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %309 = "llvm.icmp"(%293, %301) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %310 = "llvm.icmp"(%294, %302) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %311 = "llvm.icmp"(%295, %303) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %312 = "llvm.icmp"(%296, %304) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %313 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %314 = "llvm.insertvalue"(%313, %305) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %315 = "llvm.insertvalue"(%314, %305) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %316 = "llvm.insertvalue"(%315, %305) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %317 = "llvm.insertvalue"(%316, %305) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %318 = "llvm.insertvalue"(%317, %309) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %319 = "llvm.insertvalue"(%318, %309) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %320 = "llvm.insertvalue"(%319, %309) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %321 = "llvm.insertvalue"(%320, %309) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %322 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %323 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %324 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %325 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %326 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %327 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %328 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %329 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %330 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %331 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %332 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %333 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %334 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %335 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %336 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %337 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %338 = "llvm.icmp"(%322, %330) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %339 = "llvm.icmp"(%323, %331) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %340 = "llvm.icmp"(%324, %332) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %341 = "llvm.icmp"(%325, %333) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %342 = "llvm.icmp"(%326, %334) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %343 = "llvm.icmp"(%327, %335) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %344 = "llvm.icmp"(%328, %336) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %345 = "llvm.icmp"(%329, %337) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %346 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %347 = "llvm.insertvalue"(%346, %338) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %348 = "llvm.insertvalue"(%347, %339) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %349 = "llvm.insertvalue"(%348, %340) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %350 = "llvm.insertvalue"(%349, %341) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %351 = "llvm.insertvalue"(%350, %342) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %352 = "llvm.insertvalue"(%351, %343) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %353 = "llvm.insertvalue"(%352, %344) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %354 = "llvm.insertvalue"(%353, %345) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %355 = "llvm.bitcast"(%arg0) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc7)
    %356 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %357 = "llvm.insertvalue"(%356, %355) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %358 = "llvm.insertvalue"(%357, %355) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %359 = "llvm.insertvalue"(%358, %355) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %360 = "llvm.insertvalue"(%359, %355) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %361 = "llvm.insertvalue"(%360, %355) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %362 = "llvm.insertvalue"(%361, %355) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %363 = "llvm.insertvalue"(%362, %355) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %364 = "llvm.insertvalue"(%363, %355) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %365 = "llvm.extractvalue"(%364) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %366 = "llvm.extractvalue"(%364) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %367 = "llvm.extractvalue"(%364) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %368 = "llvm.extractvalue"(%364) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %369 = "llvm.extractvalue"(%364) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %370 = "llvm.extractvalue"(%364) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %371 = "llvm.extractvalue"(%364) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %372 = "llvm.extractvalue"(%364) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %373 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %374 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %375 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %376 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %377 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %378 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %379 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %380 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %381 = "llvm.getelementptr"(%365, %373) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %382 = "llvm.getelementptr"(%366, %374) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %383 = "llvm.getelementptr"(%367, %375) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %384 = "llvm.getelementptr"(%368, %376) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %385 = "llvm.getelementptr"(%369, %377) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %386 = "llvm.getelementptr"(%370, %378) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %387 = "llvm.getelementptr"(%371, %379) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %388 = "llvm.getelementptr"(%372, %380) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %389 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %390 = "llvm.insertvalue"(%389, %381) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %391 = "llvm.insertvalue"(%390, %382) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %392 = "llvm.insertvalue"(%391, %383) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %393 = "llvm.insertvalue"(%392, %384) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %394 = "llvm.insertvalue"(%393, %385) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %395 = "llvm.insertvalue"(%394, %386) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %396 = "llvm.insertvalue"(%395, %387) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %397 = "llvm.insertvalue"(%396, %388) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %398 = "llvm.extractvalue"(%397) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %399 = "llvm.extractvalue"(%397) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %400 = "llvm.extractvalue"(%397) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %401 = "llvm.extractvalue"(%397) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %402 = "llvm.extractvalue"(%397) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %403 = "llvm.extractvalue"(%397) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %404 = "llvm.extractvalue"(%397) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %405 = "llvm.extractvalue"(%397) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %406 = "llvm.extractvalue"(%321) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %407 = "llvm.extractvalue"(%321) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %408 = "llvm.extractvalue"(%321) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %409 = "llvm.extractvalue"(%321) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %410 = "llvm.extractvalue"(%321) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %411 = "llvm.extractvalue"(%321) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %412 = "llvm.extractvalue"(%321) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %413 = "llvm.extractvalue"(%321) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %414 = "llvm.inline_asm"(%398, %406) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %415 = "llvm.extractvalue"(%414) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %416 = "llvm.bitcast"(%415) : (i32) -> vector<1xf32> loc(#loc8)
    %417 = "llvm.extractvalue"(%414) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %418 = "llvm.bitcast"(%417) : (i32) -> vector<1xf32> loc(#loc8)
    %419 = "llvm.extractvalue"(%414) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %420 = "llvm.bitcast"(%419) : (i32) -> vector<1xf32> loc(#loc8)
    %421 = "llvm.extractvalue"(%414) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %422 = "llvm.bitcast"(%421) : (i32) -> vector<1xf32> loc(#loc8)
    %423 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %424 = "llvm.extractelement"(%416, %423) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %425 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %426 = "llvm.extractelement"(%418, %425) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %427 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %428 = "llvm.extractelement"(%420, %427) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %429 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %430 = "llvm.extractelement"(%422, %429) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %431 = "llvm.inline_asm"(%402, %410) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %432 = "llvm.extractvalue"(%431) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %433 = "llvm.bitcast"(%432) : (i32) -> vector<1xf32> loc(#loc8)
    %434 = "llvm.extractvalue"(%431) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %435 = "llvm.bitcast"(%434) : (i32) -> vector<1xf32> loc(#loc8)
    %436 = "llvm.extractvalue"(%431) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %437 = "llvm.bitcast"(%436) : (i32) -> vector<1xf32> loc(#loc8)
    %438 = "llvm.extractvalue"(%431) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %439 = "llvm.bitcast"(%438) : (i32) -> vector<1xf32> loc(#loc8)
    %440 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %441 = "llvm.extractelement"(%433, %440) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %442 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %443 = "llvm.extractelement"(%435, %442) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %444 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %445 = "llvm.extractelement"(%437, %444) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %446 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %447 = "llvm.extractelement"(%439, %446) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %448 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %449 = "llvm.insertvalue"(%448, %424) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %450 = "llvm.insertvalue"(%449, %426) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %451 = "llvm.insertvalue"(%450, %428) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %452 = "llvm.insertvalue"(%451, %430) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %453 = "llvm.insertvalue"(%452, %441) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %454 = "llvm.insertvalue"(%453, %443) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %455 = "llvm.insertvalue"(%454, %445) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %456 = "llvm.insertvalue"(%455, %447) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %457 = "llvm.extractvalue"(%456) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %458 = "llvm.extractvalue"(%456) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %459 = "llvm.extractvalue"(%456) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %460 = "llvm.extractvalue"(%456) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %461 = "llvm.extractvalue"(%456) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %462 = "llvm.extractvalue"(%456) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %463 = "llvm.extractvalue"(%456) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %464 = "llvm.extractvalue"(%456) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %465 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %466 = "llvm.insertvalue"(%465, %457) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %467 = "llvm.insertvalue"(%466, %458) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %468 = "llvm.insertvalue"(%467, %459) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %469 = "llvm.insertvalue"(%468, %460) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %470 = "llvm.insertvalue"(%469, %461) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %471 = "llvm.insertvalue"(%470, %462) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %472 = "llvm.insertvalue"(%471, %463) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %473 = "llvm.insertvalue"(%472, %464) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %474 = "llvm.extractvalue"(%473) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %475 = "llvm.extractvalue"(%473) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %476 = "llvm.extractvalue"(%473) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %477 = "llvm.extractvalue"(%473) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %478 = "llvm.extractvalue"(%473) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %479 = "llvm.extractvalue"(%473) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %480 = "llvm.extractvalue"(%473) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %481 = "llvm.extractvalue"(%473) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %482 = "llvm.extractvalue"(%12) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %483 = "llvm.extractvalue"(%12) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %484 = "llvm.extractvalue"(%12) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %485 = "llvm.extractvalue"(%12) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %486 = "llvm.extractvalue"(%12) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %487 = "llvm.extractvalue"(%12) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %488 = "llvm.extractvalue"(%12) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %489 = "llvm.extractvalue"(%12) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %490 = "llvm.fmul"(%474, %482) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %491 = "llvm.fmul"(%475, %483) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %492 = "llvm.fmul"(%476, %484) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %493 = "llvm.fmul"(%477, %485) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %494 = "llvm.fmul"(%478, %486) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %495 = "llvm.fmul"(%479, %487) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %496 = "llvm.fmul"(%480, %488) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %497 = "llvm.fmul"(%481, %489) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %498 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %499 = "llvm.insertvalue"(%498, %490) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %500 = "llvm.insertvalue"(%499, %491) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %501 = "llvm.insertvalue"(%500, %492) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %502 = "llvm.insertvalue"(%501, %493) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %503 = "llvm.insertvalue"(%502, %494) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %504 = "llvm.insertvalue"(%503, %495) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %505 = "llvm.insertvalue"(%504, %496) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %506 = "llvm.insertvalue"(%505, %497) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %507 = "llvm.extractvalue"(%506) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %508 = "llvm.extractvalue"(%506) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %509 = "llvm.extractvalue"(%506) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %510 = "llvm.extractvalue"(%506) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %511 = "llvm.extractvalue"(%506) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %512 = "llvm.extractvalue"(%506) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %513 = "llvm.extractvalue"(%506) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %514 = "llvm.extractvalue"(%506) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %515 = "llvm.extractvalue"(%12) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %516 = "llvm.extractvalue"(%12) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %517 = "llvm.extractvalue"(%12) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %518 = "llvm.extractvalue"(%12) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %519 = "llvm.extractvalue"(%12) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %520 = "llvm.extractvalue"(%12) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %521 = "llvm.extractvalue"(%12) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %522 = "llvm.extractvalue"(%12) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %523 = "llvm.fmul"(%507, %515) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %524 = "llvm.fmul"(%508, %516) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %525 = "llvm.fmul"(%509, %517) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %526 = "llvm.fmul"(%510, %518) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %527 = "llvm.fmul"(%511, %519) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %528 = "llvm.fmul"(%512, %520) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %529 = "llvm.fmul"(%513, %521) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %530 = "llvm.fmul"(%514, %522) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc11)
    %531 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %532 = "llvm.insertvalue"(%531, %523) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %533 = "llvm.insertvalue"(%532, %524) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %534 = "llvm.insertvalue"(%533, %525) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %535 = "llvm.insertvalue"(%534, %526) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %536 = "llvm.insertvalue"(%535, %527) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %537 = "llvm.insertvalue"(%536, %528) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %538 = "llvm.insertvalue"(%537, %529) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %539 = "llvm.insertvalue"(%538, %530) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %540 = "llvm.extractvalue"(%539) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %541 = "llvm.extractvalue"(%539) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %542 = "llvm.extractvalue"(%539) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %543 = "llvm.extractvalue"(%539) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %544 = "llvm.extractvalue"(%539) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %545 = "llvm.extractvalue"(%539) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %546 = "llvm.extractvalue"(%539) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %547 = "llvm.extractvalue"(%539) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %548 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc11)
    %549 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc11)
    %550 = "llvm.urem"(%548, %549) : (i32, i32) -> i32 loc(#loc11)
    %551 = "llvm.udiv"(%548, %549) : (i32, i32) -> i32 loc(#loc11)
    %552 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %553 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %554 = "llvm.getelementptr"(%553, %552) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %555 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %556 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %557 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %558 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %559 = "llvm.and"(%550, %558) : (i32, i32) -> i32 loc(#loc11)
    %560 = "llvm.icmp"(%559, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %561 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc11)
    %562 = "llvm.select"(%560, %557, %561) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %563 = "llvm.xor"(%557, %562) : (i32, i32) -> i32 loc(#loc11)
    %564 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %565 = "llvm.and"(%550, %564) : (i32, i32) -> i32 loc(#loc11)
    %566 = "llvm.icmp"(%565, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %567 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc11)
    %568 = "llvm.select"(%566, %557, %567) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %569 = "llvm.xor"(%563, %568) : (i32, i32) -> i32 loc(#loc11)
    %570 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc11)
    %571 = "llvm.and"(%550, %570) : (i32, i32) -> i32 loc(#loc11)
    %572 = "llvm.icmp"(%571, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %573 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc11)
    %574 = "llvm.select"(%572, %557, %573) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %575 = "llvm.xor"(%569, %574) : (i32, i32) -> i32 loc(#loc11)
    %576 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc11)
    %577 = "llvm.and"(%550, %576) : (i32, i32) -> i32 loc(#loc11)
    %578 = "llvm.icmp"(%577, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %579 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc11)
    %580 = "llvm.select"(%578, %557, %579) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %581 = "llvm.xor"(%575, %580) : (i32, i32) -> i32 loc(#loc11)
    %582 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc11)
    %583 = "llvm.and"(%550, %582) : (i32, i32) -> i32 loc(#loc11)
    %584 = "llvm.icmp"(%583, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %585 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc11)
    %586 = "llvm.select"(%584, %557, %585) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %587 = "llvm.xor"(%581, %586) : (i32, i32) -> i32 loc(#loc11)
    %588 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %589 = "llvm.and"(%551, %588) : (i32, i32) -> i32 loc(#loc11)
    %590 = "llvm.icmp"(%589, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %591 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc11)
    %592 = "llvm.select"(%590, %557, %591) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %593 = "llvm.xor"(%587, %592) : (i32, i32) -> i32 loc(#loc11)
    %594 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %595 = "llvm.and"(%551, %594) : (i32, i32) -> i32 loc(#loc11)
    %596 = "llvm.icmp"(%595, %557) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %597 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc11)
    %598 = "llvm.select"(%596, %557, %597) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %599 = "llvm.xor"(%593, %598) : (i32, i32) -> i32 loc(#loc11)
    %600 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %601 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %602 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %603 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %604 = "llvm.and"(%550, %603) : (i32, i32) -> i32 loc(#loc11)
    %605 = "llvm.icmp"(%604, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %606 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %607 = "llvm.and"(%550, %606) : (i32, i32) -> i32 loc(#loc11)
    %608 = "llvm.icmp"(%607, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %609 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %610 = "llvm.select"(%608, %602, %609) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %611 = "llvm.xor"(%602, %610) : (i32, i32) -> i32 loc(#loc11)
    %612 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc11)
    %613 = "llvm.and"(%550, %612) : (i32, i32) -> i32 loc(#loc11)
    %614 = "llvm.icmp"(%613, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %615 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %616 = "llvm.select"(%614, %602, %615) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %617 = "llvm.xor"(%611, %616) : (i32, i32) -> i32 loc(#loc11)
    %618 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc11)
    %619 = "llvm.and"(%550, %618) : (i32, i32) -> i32 loc(#loc11)
    %620 = "llvm.icmp"(%619, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %621 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc11)
    %622 = "llvm.select"(%620, %602, %621) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %623 = "llvm.xor"(%617, %622) : (i32, i32) -> i32 loc(#loc11)
    %624 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc11)
    %625 = "llvm.and"(%550, %624) : (i32, i32) -> i32 loc(#loc11)
    %626 = "llvm.icmp"(%625, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %627 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc11)
    %628 = "llvm.select"(%626, %602, %627) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %629 = "llvm.xor"(%623, %628) : (i32, i32) -> i32 loc(#loc11)
    %630 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %631 = "llvm.and"(%551, %630) : (i32, i32) -> i32 loc(#loc11)
    %632 = "llvm.icmp"(%631, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %633 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc11)
    %634 = "llvm.select"(%632, %602, %633) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %635 = "llvm.xor"(%629, %634) : (i32, i32) -> i32 loc(#loc11)
    %636 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %637 = "llvm.and"(%551, %636) : (i32, i32) -> i32 loc(#loc11)
    %638 = "llvm.icmp"(%637, %602) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc11)
    %639 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc11)
    %640 = "llvm.select"(%638, %602, %639) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc11)
    %641 = "llvm.xor"(%635, %640) : (i32, i32) -> i32 loc(#loc11)
    %642 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %643 = "llvm.xor"(%599, %642) : (i32, i32) -> i32 loc(#loc11)
    %644 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %645 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %646 = "llvm.lshr"(%643, %645) : (i32, i32) -> i32 loc(#loc11)
    %647 = "llvm.shl"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %648 = "llvm.add"(%647, %643) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %649 = "llvm.getelementptr"(%554, %648) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %650 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %651 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %652 = "llvm.insertelement"(%650, %540, %651) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %653 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %654 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %655 = "llvm.extractelement"(%652, %654) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %656 = "llvm.bitcast"(%655) : (f32) -> i32 loc(#loc11)
    %657 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %658 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %659 = "llvm.insertelement"(%657, %656, %658) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %660 = "llvm.inline_asm"(%649, %659, %653) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %661 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %662 = "llvm.xor"(%599, %661) : (i32, i32) -> i32 loc(#loc11)
    %663 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %664 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %665 = "llvm.lshr"(%662, %664) : (i32, i32) -> i32 loc(#loc11)
    %666 = "llvm.shl"(%665, %663) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %667 = "llvm.add"(%666, %662) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %668 = "llvm.getelementptr"(%554, %667) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %669 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %670 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %671 = "llvm.insertelement"(%669, %541, %670) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %672 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %673 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %674 = "llvm.extractelement"(%671, %673) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %675 = "llvm.bitcast"(%674) : (f32) -> i32 loc(#loc11)
    %676 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %677 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %678 = "llvm.insertelement"(%676, %675, %677) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %679 = "llvm.inline_asm"(%668, %678, %672) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %680 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %681 = "llvm.xor"(%599, %680) : (i32, i32) -> i32 loc(#loc11)
    %682 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %683 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %684 = "llvm.lshr"(%681, %683) : (i32, i32) -> i32 loc(#loc11)
    %685 = "llvm.shl"(%684, %682) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %686 = "llvm.add"(%685, %681) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %687 = "llvm.getelementptr"(%554, %686) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %688 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %689 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %690 = "llvm.insertelement"(%688, %542, %689) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %691 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %692 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %693 = "llvm.extractelement"(%690, %692) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %694 = "llvm.bitcast"(%693) : (f32) -> i32 loc(#loc11)
    %695 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %696 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %697 = "llvm.insertelement"(%695, %694, %696) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %698 = "llvm.inline_asm"(%687, %697, %691) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %699 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc11)
    %700 = "llvm.xor"(%599, %699) : (i32, i32) -> i32 loc(#loc11)
    %701 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %702 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %703 = "llvm.lshr"(%700, %702) : (i32, i32) -> i32 loc(#loc11)
    %704 = "llvm.shl"(%703, %701) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %705 = "llvm.add"(%704, %700) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %706 = "llvm.getelementptr"(%554, %705) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %707 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %708 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %709 = "llvm.insertelement"(%707, %543, %708) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %710 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %711 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %712 = "llvm.extractelement"(%709, %711) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %713 = "llvm.bitcast"(%712) : (f32) -> i32 loc(#loc11)
    %714 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %715 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %716 = "llvm.insertelement"(%714, %713, %715) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %717 = "llvm.inline_asm"(%706, %716, %710) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    "nvvm.barrier0"() : () -> () loc(#loc11)
    %718 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %719 = "llvm.xor"(%641, %718) : (i32, i32) -> i32 loc(#loc11)
    %720 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %721 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %722 = "llvm.lshr"(%719, %721) : (i32, i32) -> i32 loc(#loc11)
    %723 = "llvm.shl"(%722, %720) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %724 = "llvm.add"(%723, %719) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %725 = "llvm.getelementptr"(%554, %724) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %726 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %727 = "llvm.load"(%725) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %728 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %729 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %730 = "llvm.insertelement"(%728, %727, %729) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %731 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %732 = "llvm.extractelement"(%730, %731) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %733 = "llvm.bitcast"(%732) : (i32) -> f32 loc(#loc11)
    %734 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %735 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %736 = "llvm.insertelement"(%734, %733, %735) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %737 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %738 = "llvm.extractelement"(%736, %737) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %739 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc11)
    %740 = "llvm.xor"(%641, %739) : (i32, i32) -> i32 loc(#loc11)
    %741 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %742 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %743 = "llvm.lshr"(%740, %742) : (i32, i32) -> i32 loc(#loc11)
    %744 = "llvm.shl"(%743, %741) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %745 = "llvm.add"(%744, %740) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %746 = "llvm.getelementptr"(%554, %745) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %747 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %748 = "llvm.load"(%746) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %749 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %750 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %751 = "llvm.insertelement"(%749, %748, %750) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %752 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %753 = "llvm.extractelement"(%751, %752) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %754 = "llvm.bitcast"(%753) : (i32) -> f32 loc(#loc11)
    %755 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %756 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %757 = "llvm.insertelement"(%755, %754, %756) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %758 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %759 = "llvm.extractelement"(%757, %758) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %760 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc11)
    %761 = "llvm.xor"(%641, %760) : (i32, i32) -> i32 loc(#loc11)
    %762 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %763 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %764 = "llvm.lshr"(%761, %763) : (i32, i32) -> i32 loc(#loc11)
    %765 = "llvm.shl"(%764, %762) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %766 = "llvm.add"(%765, %761) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %767 = "llvm.getelementptr"(%554, %766) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %768 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %769 = "llvm.load"(%767) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %770 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %771 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %772 = "llvm.insertelement"(%770, %769, %771) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %773 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %774 = "llvm.extractelement"(%772, %773) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %775 = "llvm.bitcast"(%774) : (i32) -> f32 loc(#loc11)
    %776 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %777 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %778 = "llvm.insertelement"(%776, %775, %777) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %779 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %780 = "llvm.extractelement"(%778, %779) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %781 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc11)
    %782 = "llvm.xor"(%641, %781) : (i32, i32) -> i32 loc(#loc11)
    %783 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %784 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %785 = "llvm.lshr"(%782, %784) : (i32, i32) -> i32 loc(#loc11)
    %786 = "llvm.shl"(%785, %783) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %787 = "llvm.add"(%786, %782) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %788 = "llvm.getelementptr"(%554, %787) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %789 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %790 = "llvm.load"(%788) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %791 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %792 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %793 = "llvm.insertelement"(%791, %790, %792) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %794 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %795 = "llvm.extractelement"(%793, %794) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %796 = "llvm.bitcast"(%795) : (i32) -> f32 loc(#loc11)
    %797 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %798 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %799 = "llvm.insertelement"(%797, %796, %798) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %800 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %801 = "llvm.extractelement"(%799, %800) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %802 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc11)
    %803 = "llvm.xor"(%641, %802) : (i32, i32) -> i32 loc(#loc11)
    %804 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %805 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %806 = "llvm.lshr"(%803, %805) : (i32, i32) -> i32 loc(#loc11)
    %807 = "llvm.shl"(%806, %804) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %808 = "llvm.add"(%807, %803) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %809 = "llvm.getelementptr"(%554, %808) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %810 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %811 = "llvm.load"(%809) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %812 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %813 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %814 = "llvm.insertelement"(%812, %811, %813) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %815 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %816 = "llvm.extractelement"(%814, %815) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %817 = "llvm.bitcast"(%816) : (i32) -> f32 loc(#loc11)
    %818 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %819 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %820 = "llvm.insertelement"(%818, %817, %819) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %821 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %822 = "llvm.extractelement"(%820, %821) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %823 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc11)
    %824 = "llvm.xor"(%641, %823) : (i32, i32) -> i32 loc(#loc11)
    %825 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %826 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %827 = "llvm.lshr"(%824, %826) : (i32, i32) -> i32 loc(#loc11)
    %828 = "llvm.shl"(%827, %825) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %829 = "llvm.add"(%828, %824) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %830 = "llvm.getelementptr"(%554, %829) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %831 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %832 = "llvm.load"(%830) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %833 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %834 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %835 = "llvm.insertelement"(%833, %832, %834) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %836 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %837 = "llvm.extractelement"(%835, %836) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %838 = "llvm.bitcast"(%837) : (i32) -> f32 loc(#loc11)
    %839 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %840 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %841 = "llvm.insertelement"(%839, %838, %840) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %842 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %843 = "llvm.extractelement"(%841, %842) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %844 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc11)
    %845 = "llvm.xor"(%641, %844) : (i32, i32) -> i32 loc(#loc11)
    %846 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %847 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %848 = "llvm.lshr"(%845, %847) : (i32, i32) -> i32 loc(#loc11)
    %849 = "llvm.shl"(%848, %846) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %850 = "llvm.add"(%849, %845) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %851 = "llvm.getelementptr"(%554, %850) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %852 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %853 = "llvm.load"(%851) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %854 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %855 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %856 = "llvm.insertelement"(%854, %853, %855) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %857 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %858 = "llvm.extractelement"(%856, %857) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %859 = "llvm.bitcast"(%858) : (i32) -> f32 loc(#loc11)
    %860 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %861 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %862 = "llvm.insertelement"(%860, %859, %861) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %863 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %864 = "llvm.extractelement"(%862, %863) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %865 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc11)
    %866 = "llvm.xor"(%641, %865) : (i32, i32) -> i32 loc(#loc11)
    %867 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %868 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %869 = "llvm.lshr"(%866, %868) : (i32, i32) -> i32 loc(#loc11)
    %870 = "llvm.shl"(%869, %867) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %871 = "llvm.add"(%870, %866) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %872 = "llvm.getelementptr"(%554, %871) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %873 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %874 = "llvm.load"(%872) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %875 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %876 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %877 = "llvm.insertelement"(%875, %874, %876) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %878 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %879 = "llvm.extractelement"(%877, %878) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %880 = "llvm.bitcast"(%879) : (i32) -> f32 loc(#loc11)
    %881 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %882 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %883 = "llvm.insertelement"(%881, %880, %882) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %884 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %885 = "llvm.extractelement"(%883, %884) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    "nvvm.barrier0"() : () -> () loc(#loc11)
    %886 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %887 = "llvm.xor"(%599, %886) : (i32, i32) -> i32 loc(#loc11)
    %888 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %889 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %890 = "llvm.lshr"(%887, %889) : (i32, i32) -> i32 loc(#loc11)
    %891 = "llvm.shl"(%890, %888) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %892 = "llvm.add"(%891, %887) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %893 = "llvm.getelementptr"(%554, %892) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %894 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %895 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %896 = "llvm.insertelement"(%894, %544, %895) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %897 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %898 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %899 = "llvm.extractelement"(%896, %898) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %900 = "llvm.bitcast"(%899) : (f32) -> i32 loc(#loc11)
    %901 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %902 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %903 = "llvm.insertelement"(%901, %900, %902) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %904 = "llvm.inline_asm"(%893, %903, %897) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %905 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc11)
    %906 = "llvm.xor"(%599, %905) : (i32, i32) -> i32 loc(#loc11)
    %907 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %908 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %909 = "llvm.lshr"(%906, %908) : (i32, i32) -> i32 loc(#loc11)
    %910 = "llvm.shl"(%909, %907) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %911 = "llvm.add"(%910, %906) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %912 = "llvm.getelementptr"(%554, %911) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %913 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %914 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %915 = "llvm.insertelement"(%913, %545, %914) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %916 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %917 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %918 = "llvm.extractelement"(%915, %917) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %919 = "llvm.bitcast"(%918) : (f32) -> i32 loc(#loc11)
    %920 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %921 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %922 = "llvm.insertelement"(%920, %919, %921) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %923 = "llvm.inline_asm"(%912, %922, %916) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %924 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc11)
    %925 = "llvm.xor"(%599, %924) : (i32, i32) -> i32 loc(#loc11)
    %926 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %927 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %928 = "llvm.lshr"(%925, %927) : (i32, i32) -> i32 loc(#loc11)
    %929 = "llvm.shl"(%928, %926) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %930 = "llvm.add"(%929, %925) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %931 = "llvm.getelementptr"(%554, %930) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %932 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %933 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %934 = "llvm.insertelement"(%932, %546, %933) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %935 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %936 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %937 = "llvm.extractelement"(%934, %936) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %938 = "llvm.bitcast"(%937) : (f32) -> i32 loc(#loc11)
    %939 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %940 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %941 = "llvm.insertelement"(%939, %938, %940) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %942 = "llvm.inline_asm"(%931, %941, %935) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    %943 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc11)
    %944 = "llvm.xor"(%599, %943) : (i32, i32) -> i32 loc(#loc11)
    %945 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %946 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %947 = "llvm.lshr"(%944, %946) : (i32, i32) -> i32 loc(#loc11)
    %948 = "llvm.shl"(%947, %945) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %949 = "llvm.add"(%948, %944) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %950 = "llvm.getelementptr"(%554, %949) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %951 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %952 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %953 = "llvm.insertelement"(%951, %547, %952) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %954 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %955 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %956 = "llvm.extractelement"(%953, %955) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %957 = "llvm.bitcast"(%956) : (f32) -> i32 loc(#loc11)
    %958 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %959 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %960 = "llvm.insertelement"(%958, %957, %959) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %961 = "llvm.inline_asm"(%950, %960, %954) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc11)
    "nvvm.barrier0"() : () -> () loc(#loc11)
    %962 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %963 = "llvm.xor"(%641, %962) : (i32, i32) -> i32 loc(#loc11)
    %964 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %965 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %966 = "llvm.lshr"(%963, %965) : (i32, i32) -> i32 loc(#loc11)
    %967 = "llvm.shl"(%966, %964) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %968 = "llvm.add"(%967, %963) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %969 = "llvm.getelementptr"(%554, %968) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %970 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %971 = "llvm.load"(%969) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %972 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %973 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %974 = "llvm.insertelement"(%972, %971, %973) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %975 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %976 = "llvm.extractelement"(%974, %975) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %977 = "llvm.bitcast"(%976) : (i32) -> f32 loc(#loc11)
    %978 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %979 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %980 = "llvm.insertelement"(%978, %977, %979) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %981 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %982 = "llvm.extractelement"(%980, %981) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %983 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc11)
    %984 = "llvm.xor"(%641, %983) : (i32, i32) -> i32 loc(#loc11)
    %985 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %986 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %987 = "llvm.lshr"(%984, %986) : (i32, i32) -> i32 loc(#loc11)
    %988 = "llvm.shl"(%987, %985) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %989 = "llvm.add"(%988, %984) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %990 = "llvm.getelementptr"(%554, %989) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %991 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %992 = "llvm.load"(%990) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %993 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %994 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %995 = "llvm.insertelement"(%993, %992, %994) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %996 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %997 = "llvm.extractelement"(%995, %996) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %998 = "llvm.bitcast"(%997) : (i32) -> f32 loc(#loc11)
    %999 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1000 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1001 = "llvm.insertelement"(%999, %998, %1000) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1002 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1003 = "llvm.extractelement"(%1001, %1002) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1004 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc11)
    %1005 = "llvm.xor"(%641, %1004) : (i32, i32) -> i32 loc(#loc11)
    %1006 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1007 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1008 = "llvm.lshr"(%1005, %1007) : (i32, i32) -> i32 loc(#loc11)
    %1009 = "llvm.shl"(%1008, %1006) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1010 = "llvm.add"(%1009, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1011 = "llvm.getelementptr"(%554, %1010) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1012 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1013 = "llvm.load"(%1011) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1014 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1015 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1016 = "llvm.insertelement"(%1014, %1013, %1015) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1017 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1018 = "llvm.extractelement"(%1016, %1017) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1019 = "llvm.bitcast"(%1018) : (i32) -> f32 loc(#loc11)
    %1020 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1021 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1022 = "llvm.insertelement"(%1020, %1019, %1021) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1023 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1024 = "llvm.extractelement"(%1022, %1023) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1025 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc11)
    %1026 = "llvm.xor"(%641, %1025) : (i32, i32) -> i32 loc(#loc11)
    %1027 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1028 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1029 = "llvm.lshr"(%1026, %1028) : (i32, i32) -> i32 loc(#loc11)
    %1030 = "llvm.shl"(%1029, %1027) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1031 = "llvm.add"(%1030, %1026) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1032 = "llvm.getelementptr"(%554, %1031) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1033 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1034 = "llvm.load"(%1032) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1035 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1036 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1037 = "llvm.insertelement"(%1035, %1034, %1036) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1038 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1039 = "llvm.extractelement"(%1037, %1038) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1040 = "llvm.bitcast"(%1039) : (i32) -> f32 loc(#loc11)
    %1041 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1042 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1043 = "llvm.insertelement"(%1041, %1040, %1042) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1044 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1045 = "llvm.extractelement"(%1043, %1044) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1046 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc11)
    %1047 = "llvm.xor"(%641, %1046) : (i32, i32) -> i32 loc(#loc11)
    %1048 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1049 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1050 = "llvm.lshr"(%1047, %1049) : (i32, i32) -> i32 loc(#loc11)
    %1051 = "llvm.shl"(%1050, %1048) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1052 = "llvm.add"(%1051, %1047) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1053 = "llvm.getelementptr"(%554, %1052) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1054 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1055 = "llvm.load"(%1053) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1056 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1057 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1058 = "llvm.insertelement"(%1056, %1055, %1057) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1059 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1060 = "llvm.extractelement"(%1058, %1059) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1061 = "llvm.bitcast"(%1060) : (i32) -> f32 loc(#loc11)
    %1062 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1063 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1064 = "llvm.insertelement"(%1062, %1061, %1063) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1065 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1066 = "llvm.extractelement"(%1064, %1065) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1067 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc11)
    %1068 = "llvm.xor"(%641, %1067) : (i32, i32) -> i32 loc(#loc11)
    %1069 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1070 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1071 = "llvm.lshr"(%1068, %1070) : (i32, i32) -> i32 loc(#loc11)
    %1072 = "llvm.shl"(%1071, %1069) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1073 = "llvm.add"(%1072, %1068) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1074 = "llvm.getelementptr"(%554, %1073) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1075 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1076 = "llvm.load"(%1074) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1077 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1078 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1079 = "llvm.insertelement"(%1077, %1076, %1078) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1080 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1081 = "llvm.extractelement"(%1079, %1080) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1082 = "llvm.bitcast"(%1081) : (i32) -> f32 loc(#loc11)
    %1083 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1084 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1085 = "llvm.insertelement"(%1083, %1082, %1084) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1086 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1087 = "llvm.extractelement"(%1085, %1086) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1088 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc11)
    %1089 = "llvm.xor"(%641, %1088) : (i32, i32) -> i32 loc(#loc11)
    %1090 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1091 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1092 = "llvm.lshr"(%1089, %1091) : (i32, i32) -> i32 loc(#loc11)
    %1093 = "llvm.shl"(%1092, %1090) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1094 = "llvm.add"(%1093, %1089) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1095 = "llvm.getelementptr"(%554, %1094) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1096 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1097 = "llvm.load"(%1095) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1098 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1099 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1100 = "llvm.insertelement"(%1098, %1097, %1099) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1101 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1102 = "llvm.extractelement"(%1100, %1101) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1103 = "llvm.bitcast"(%1102) : (i32) -> f32 loc(#loc11)
    %1104 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1105 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1106 = "llvm.insertelement"(%1104, %1103, %1105) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1108 = "llvm.extractelement"(%1106, %1107) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1109 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc11)
    %1110 = "llvm.xor"(%641, %1109) : (i32, i32) -> i32 loc(#loc11)
    %1111 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1112 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1113 = "llvm.lshr"(%1110, %1112) : (i32, i32) -> i32 loc(#loc11)
    %1114 = "llvm.shl"(%1113, %1111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1115 = "llvm.add"(%1114, %1110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1116 = "llvm.getelementptr"(%554, %1115) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc11)
    %1117 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc11)
    %1118 = "llvm.load"(%1116) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc11)
    %1119 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc11)
    %1120 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1121 = "llvm.insertelement"(%1119, %1118, %1120) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc11)
    %1122 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1123 = "llvm.extractelement"(%1121, %1122) : (vector<1xi32>, i32) -> i32 loc(#loc11)
    %1124 = "llvm.bitcast"(%1123) : (i32) -> f32 loc(#loc11)
    %1125 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc11)
    %1126 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1127 = "llvm.insertelement"(%1125, %1124, %1126) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc11)
    %1128 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc11)
    %1129 = "llvm.extractelement"(%1127, %1128) : (vector<1xf32>, i32) -> f32 loc(#loc11)
    %1130 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1131 = "llvm.insertvalue"(%1130, %738) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1132 = "llvm.insertvalue"(%1131, %759) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1133 = "llvm.insertvalue"(%1132, %780) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1134 = "llvm.insertvalue"(%1133, %801) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1135 = "llvm.insertvalue"(%1134, %822) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1136 = "llvm.insertvalue"(%1135, %843) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1137 = "llvm.insertvalue"(%1136, %864) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1138 = "llvm.insertvalue"(%1137, %885) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1139 = "llvm.insertvalue"(%1138, %982) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1140 = "llvm.insertvalue"(%1139, %1003) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1141 = "llvm.insertvalue"(%1140, %1024) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1142 = "llvm.insertvalue"(%1141, %1045) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1143 = "llvm.insertvalue"(%1142, %1066) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1144 = "llvm.insertvalue"(%1143, %1087) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1145 = "llvm.insertvalue"(%1144, %1108) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1146 = "llvm.insertvalue"(%1145, %1129) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1147 = "llvm.extractvalue"(%1146) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1148 = "llvm.extractvalue"(%1146) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1149 = "llvm.extractvalue"(%1146) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1150 = "llvm.extractvalue"(%1146) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1151 = "llvm.extractvalue"(%1146) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1152 = "llvm.extractvalue"(%1146) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1153 = "llvm.extractvalue"(%1146) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1154 = "llvm.extractvalue"(%1146) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1155 = "llvm.extractvalue"(%1146) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1156 = "llvm.extractvalue"(%1146) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1157 = "llvm.extractvalue"(%1146) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1158 = "llvm.extractvalue"(%1146) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1159 = "llvm.extractvalue"(%1146) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1160 = "llvm.extractvalue"(%1146) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1161 = "llvm.extractvalue"(%1146) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1162 = "llvm.extractvalue"(%1146) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc11)
    %1163 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1164 = "llvm.insertvalue"(%1163, %1147) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1165 = "llvm.insertvalue"(%1164, %1148) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1166 = "llvm.insertvalue"(%1165, %1149) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1167 = "llvm.insertvalue"(%1166, %1150) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1168 = "llvm.insertvalue"(%1167, %1151) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1169 = "llvm.insertvalue"(%1168, %1152) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1170 = "llvm.insertvalue"(%1169, %1153) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1171 = "llvm.insertvalue"(%1170, %1154) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1172 = "llvm.insertvalue"(%1171, %1155) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1173 = "llvm.insertvalue"(%1172, %1156) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1174 = "llvm.insertvalue"(%1173, %1157) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1175 = "llvm.insertvalue"(%1174, %1158) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1176 = "llvm.insertvalue"(%1175, %1159) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1177 = "llvm.insertvalue"(%1176, %1160) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1178 = "llvm.insertvalue"(%1177, %1161) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1179 = "llvm.insertvalue"(%1178, %1162) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %1180 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1181 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1182 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1183 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1184 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1185 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1186 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1187 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1188 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1189 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1190 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1191 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1192 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1193 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1194 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1195 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc12)
    %1196 = "llvm.add"(%1180, %1188) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1197 = "llvm.add"(%1181, %1189) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1198 = "llvm.add"(%1182, %1190) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1199 = "llvm.add"(%1183, %1191) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1200 = "llvm.add"(%1184, %1192) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1201 = "llvm.add"(%1185, %1193) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1202 = "llvm.add"(%1186, %1194) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1203 = "llvm.add"(%1187, %1195) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1204 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1205 = "llvm.insertvalue"(%1204, %1196) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1206 = "llvm.insertvalue"(%1205, %1197) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1207 = "llvm.insertvalue"(%1206, %1198) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1208 = "llvm.insertvalue"(%1207, %1199) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1209 = "llvm.insertvalue"(%1208, %1200) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1210 = "llvm.insertvalue"(%1209, %1201) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1211 = "llvm.insertvalue"(%1210, %1202) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1212 = "llvm.insertvalue"(%1211, %1203) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc12)
    %1213 = "llvm.mul"(%arg2, %1) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %1214 = "llvm.bitcast"(%1213) : (i32) -> i32 loc(#loc14)
    %1215 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1216 = "llvm.insertvalue"(%1215, %1214) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1217 = "llvm.insertvalue"(%1216, %1214) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1218 = "llvm.insertvalue"(%1217, %1214) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1219 = "llvm.insertvalue"(%1218, %1214) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1220 = "llvm.insertvalue"(%1219, %1214) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1221 = "llvm.insertvalue"(%1220, %1214) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1222 = "llvm.insertvalue"(%1221, %1214) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1223 = "llvm.insertvalue"(%1222, %1214) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1224 = "llvm.extractvalue"(%1212) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1225 = "llvm.extractvalue"(%1212) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1226 = "llvm.extractvalue"(%1212) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1227 = "llvm.extractvalue"(%1212) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1228 = "llvm.extractvalue"(%1212) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1229 = "llvm.extractvalue"(%1212) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1230 = "llvm.extractvalue"(%1212) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1231 = "llvm.extractvalue"(%1212) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1232 = "llvm.extractvalue"(%1223) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1233 = "llvm.extractvalue"(%1223) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1234 = "llvm.extractvalue"(%1223) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1235 = "llvm.extractvalue"(%1223) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1236 = "llvm.extractvalue"(%1223) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1237 = "llvm.extractvalue"(%1223) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1238 = "llvm.extractvalue"(%1223) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1239 = "llvm.extractvalue"(%1223) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1240 = "llvm.icmp"(%1224, %1232) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1241 = "llvm.icmp"(%1225, %1233) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1242 = "llvm.icmp"(%1226, %1234) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1243 = "llvm.icmp"(%1227, %1235) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1244 = "llvm.icmp"(%1228, %1236) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1245 = "llvm.icmp"(%1229, %1237) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1246 = "llvm.icmp"(%1230, %1238) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1247 = "llvm.icmp"(%1231, %1239) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %1248 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1249 = "llvm.insertvalue"(%1248, %1240) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1250 = "llvm.insertvalue"(%1249, %1241) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1251 = "llvm.insertvalue"(%1250, %1242) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1252 = "llvm.insertvalue"(%1251, %1243) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1253 = "llvm.insertvalue"(%1252, %1244) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1254 = "llvm.insertvalue"(%1253, %1245) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1255 = "llvm.insertvalue"(%1254, %1246) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1256 = "llvm.insertvalue"(%1255, %1247) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc14)
    %1257 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1258 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1259 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1260 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1261 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1262 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1263 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1264 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1265 = "llvm.extractvalue"(%1212) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1266 = "llvm.extractvalue"(%1212) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1267 = "llvm.extractvalue"(%1212) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1268 = "llvm.extractvalue"(%1212) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1269 = "llvm.extractvalue"(%1212) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1270 = "llvm.extractvalue"(%1212) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1271 = "llvm.extractvalue"(%1212) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1272 = "llvm.extractvalue"(%1212) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1273 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1274 = "llvm.insertvalue"(%1273, %1257) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1275 = "llvm.insertvalue"(%1274, %1265) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1276 = "llvm.insertvalue"(%1275, %1258) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1277 = "llvm.insertvalue"(%1276, %1266) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1278 = "llvm.insertvalue"(%1277, %1259) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1279 = "llvm.insertvalue"(%1278, %1267) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1280 = "llvm.insertvalue"(%1279, %1260) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1281 = "llvm.insertvalue"(%1280, %1268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1282 = "llvm.insertvalue"(%1281, %1261) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1283 = "llvm.insertvalue"(%1282, %1269) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1284 = "llvm.insertvalue"(%1283, %1262) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1285 = "llvm.insertvalue"(%1284, %1270) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1286 = "llvm.insertvalue"(%1285, %1263) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1287 = "llvm.insertvalue"(%1286, %1271) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1288 = "llvm.insertvalue"(%1287, %1264) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1289 = "llvm.insertvalue"(%1288, %1272) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1290 = "llvm.extractvalue"(%1289) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1291 = "llvm.extractvalue"(%1289) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1292 = "llvm.extractvalue"(%1289) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1293 = "llvm.extractvalue"(%1289) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1294 = "llvm.extractvalue"(%1289) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1295 = "llvm.extractvalue"(%1289) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1296 = "llvm.extractvalue"(%1289) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1297 = "llvm.extractvalue"(%1289) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1298 = "llvm.extractvalue"(%1289) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1299 = "llvm.extractvalue"(%1289) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1300 = "llvm.extractvalue"(%1289) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1301 = "llvm.extractvalue"(%1289) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1302 = "llvm.extractvalue"(%1289) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1303 = "llvm.extractvalue"(%1289) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1304 = "llvm.extractvalue"(%1289) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1305 = "llvm.extractvalue"(%1289) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc16)
    %1306 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc16)
    %1307 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc16)
    %1308 = "llvm.urem"(%1306, %1307) : (i32, i32) -> i32 loc(#loc16)
    %1309 = "llvm.udiv"(%1306, %1307) : (i32, i32) -> i32 loc(#loc16)
    %1310 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1311 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1312 = "llvm.getelementptr"(%1311, %1310) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1313 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1314 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1315 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1316 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1317 = "llvm.and"(%1308, %1316) : (i32, i32) -> i32 loc(#loc16)
    %1318 = "llvm.icmp"(%1317, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1319 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1320 = "llvm.select"(%1318, %1315, %1319) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1321 = "llvm.xor"(%1315, %1320) : (i32, i32) -> i32 loc(#loc16)
    %1322 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1323 = "llvm.and"(%1308, %1322) : (i32, i32) -> i32 loc(#loc16)
    %1324 = "llvm.icmp"(%1323, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1325 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc16)
    %1326 = "llvm.select"(%1324, %1315, %1325) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1327 = "llvm.xor"(%1321, %1326) : (i32, i32) -> i32 loc(#loc16)
    %1328 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc16)
    %1329 = "llvm.and"(%1308, %1328) : (i32, i32) -> i32 loc(#loc16)
    %1330 = "llvm.icmp"(%1329, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1331 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc16)
    %1332 = "llvm.select"(%1330, %1315, %1331) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1333 = "llvm.xor"(%1327, %1332) : (i32, i32) -> i32 loc(#loc16)
    %1334 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc16)
    %1335 = "llvm.and"(%1308, %1334) : (i32, i32) -> i32 loc(#loc16)
    %1336 = "llvm.icmp"(%1335, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1337 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc16)
    %1338 = "llvm.select"(%1336, %1315, %1337) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1339 = "llvm.xor"(%1333, %1338) : (i32, i32) -> i32 loc(#loc16)
    %1340 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc16)
    %1341 = "llvm.and"(%1308, %1340) : (i32, i32) -> i32 loc(#loc16)
    %1342 = "llvm.icmp"(%1341, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1343 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc16)
    %1344 = "llvm.select"(%1342, %1315, %1343) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1345 = "llvm.xor"(%1339, %1344) : (i32, i32) -> i32 loc(#loc16)
    %1346 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1347 = "llvm.and"(%1309, %1346) : (i32, i32) -> i32 loc(#loc16)
    %1348 = "llvm.icmp"(%1347, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1349 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc16)
    %1350 = "llvm.select"(%1348, %1315, %1349) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1351 = "llvm.xor"(%1345, %1350) : (i32, i32) -> i32 loc(#loc16)
    %1352 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1353 = "llvm.and"(%1309, %1352) : (i32, i32) -> i32 loc(#loc16)
    %1354 = "llvm.icmp"(%1353, %1315) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1355 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1356 = "llvm.select"(%1354, %1315, %1355) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1357 = "llvm.xor"(%1351, %1356) : (i32, i32) -> i32 loc(#loc16)
    %1358 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1359 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1360 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1361 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1362 = "llvm.and"(%1308, %1361) : (i32, i32) -> i32 loc(#loc16)
    %1363 = "llvm.icmp"(%1362, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1364 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1365 = "llvm.select"(%1363, %1360, %1364) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1366 = "llvm.xor"(%1360, %1365) : (i32, i32) -> i32 loc(#loc16)
    %1367 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1368 = "llvm.and"(%1308, %1367) : (i32, i32) -> i32 loc(#loc16)
    %1369 = "llvm.icmp"(%1368, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1370 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1371 = "llvm.select"(%1369, %1360, %1370) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1372 = "llvm.xor"(%1366, %1371) : (i32, i32) -> i32 loc(#loc16)
    %1373 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc16)
    %1374 = "llvm.and"(%1308, %1373) : (i32, i32) -> i32 loc(#loc16)
    %1375 = "llvm.icmp"(%1374, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1376 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc16)
    %1377 = "llvm.select"(%1375, %1360, %1376) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1378 = "llvm.xor"(%1372, %1377) : (i32, i32) -> i32 loc(#loc16)
    %1379 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc16)
    %1380 = "llvm.and"(%1308, %1379) : (i32, i32) -> i32 loc(#loc16)
    %1381 = "llvm.icmp"(%1380, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1382 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc16)
    %1383 = "llvm.select"(%1381, %1360, %1382) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1384 = "llvm.xor"(%1378, %1383) : (i32, i32) -> i32 loc(#loc16)
    %1385 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc16)
    %1386 = "llvm.and"(%1308, %1385) : (i32, i32) -> i32 loc(#loc16)
    %1387 = "llvm.icmp"(%1386, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1388 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc16)
    %1389 = "llvm.select"(%1387, %1360, %1388) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1390 = "llvm.xor"(%1384, %1389) : (i32, i32) -> i32 loc(#loc16)
    %1391 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1392 = "llvm.and"(%1309, %1391) : (i32, i32) -> i32 loc(#loc16)
    %1393 = "llvm.icmp"(%1392, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1394 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc16)
    %1395 = "llvm.select"(%1393, %1360, %1394) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1396 = "llvm.xor"(%1390, %1395) : (i32, i32) -> i32 loc(#loc16)
    %1397 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc16)
    %1398 = "llvm.and"(%1309, %1397) : (i32, i32) -> i32 loc(#loc16)
    %1399 = "llvm.icmp"(%1398, %1360) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc16)
    %1400 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc16)
    %1401 = "llvm.select"(%1399, %1360, %1400) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc16)
    %1402 = "llvm.xor"(%1396, %1401) : (i32, i32) -> i32 loc(#loc16)
    %1403 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1404 = "llvm.xor"(%1357, %1403) : (i32, i32) -> i32 loc(#loc16)
    %1405 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1406 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1407 = "llvm.lshr"(%1404, %1406) : (i32, i32) -> i32 loc(#loc16)
    %1408 = "llvm.shl"(%1407, %1405) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1409 = "llvm.add"(%1408, %1404) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1410 = "llvm.getelementptr"(%1312, %1409) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1411 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1412 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1413 = "llvm.insertelement"(%1411, %1290, %1412) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1414 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1415 = "llvm.insertelement"(%1413, %1291, %1414) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1416 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1417 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1418 = "llvm.extractelement"(%1415, %1417) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1419 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1420 = "llvm.extractelement"(%1415, %1419) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1421 = "llvm.inline_asm"(%1410, %1418, %1420, %1416) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1422 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1423 = "llvm.xor"(%1402, %1422) : (i32, i32) -> i32 loc(#loc16)
    %1424 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1425 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1426 = "llvm.lshr"(%1423, %1425) : (i32, i32) -> i32 loc(#loc16)
    %1427 = "llvm.shl"(%1426, %1424) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1428 = "llvm.add"(%1427, %1423) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1429 = "llvm.getelementptr"(%1312, %1428) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1430 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1431 = "llvm.load"(%1429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1432 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1433 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1434 = "llvm.insertelement"(%1432, %1431, %1433) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1435 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1436 = "llvm.extractelement"(%1434, %1435) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1437 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1438 = "llvm.xor"(%1402, %1437) : (i32, i32) -> i32 loc(#loc16)
    %1439 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1440 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1441 = "llvm.lshr"(%1438, %1440) : (i32, i32) -> i32 loc(#loc16)
    %1442 = "llvm.shl"(%1441, %1439) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1443 = "llvm.add"(%1442, %1438) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1444 = "llvm.getelementptr"(%1312, %1443) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1445 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1446 = "llvm.load"(%1444) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1447 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1448 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1449 = "llvm.insertelement"(%1447, %1446, %1448) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1450 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1451 = "llvm.extractelement"(%1449, %1450) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1452 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1453 = "llvm.xor"(%1357, %1452) : (i32, i32) -> i32 loc(#loc16)
    %1454 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1455 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1456 = "llvm.lshr"(%1453, %1455) : (i32, i32) -> i32 loc(#loc16)
    %1457 = "llvm.shl"(%1456, %1454) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1458 = "llvm.add"(%1457, %1453) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1459 = "llvm.getelementptr"(%1312, %1458) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1460 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1461 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1462 = "llvm.insertelement"(%1460, %1292, %1461) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1463 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1464 = "llvm.insertelement"(%1462, %1293, %1463) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1465 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1466 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1467 = "llvm.extractelement"(%1464, %1466) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1468 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1469 = "llvm.extractelement"(%1464, %1468) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1470 = "llvm.inline_asm"(%1459, %1467, %1469, %1465) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1471 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1472 = "llvm.xor"(%1402, %1471) : (i32, i32) -> i32 loc(#loc16)
    %1473 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1474 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1475 = "llvm.lshr"(%1472, %1474) : (i32, i32) -> i32 loc(#loc16)
    %1476 = "llvm.shl"(%1475, %1473) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1477 = "llvm.add"(%1476, %1472) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1478 = "llvm.getelementptr"(%1312, %1477) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1479 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1480 = "llvm.load"(%1478) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1481 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1482 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1483 = "llvm.insertelement"(%1481, %1480, %1482) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1484 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1485 = "llvm.extractelement"(%1483, %1484) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1486 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1487 = "llvm.xor"(%1402, %1486) : (i32, i32) -> i32 loc(#loc16)
    %1488 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1489 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1490 = "llvm.lshr"(%1487, %1489) : (i32, i32) -> i32 loc(#loc16)
    %1491 = "llvm.shl"(%1490, %1488) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1492 = "llvm.add"(%1491, %1487) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1493 = "llvm.getelementptr"(%1312, %1492) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1494 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1495 = "llvm.load"(%1493) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1496 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1497 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1498 = "llvm.insertelement"(%1496, %1495, %1497) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1499 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1500 = "llvm.extractelement"(%1498, %1499) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1501 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1502 = "llvm.xor"(%1357, %1501) : (i32, i32) -> i32 loc(#loc16)
    %1503 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1504 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1505 = "llvm.lshr"(%1502, %1504) : (i32, i32) -> i32 loc(#loc16)
    %1506 = "llvm.shl"(%1505, %1503) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1507 = "llvm.add"(%1506, %1502) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1508 = "llvm.getelementptr"(%1312, %1507) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1509 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1510 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1511 = "llvm.insertelement"(%1509, %1294, %1510) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1512 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1513 = "llvm.insertelement"(%1511, %1295, %1512) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1514 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1515 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1516 = "llvm.extractelement"(%1513, %1515) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1517 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1518 = "llvm.extractelement"(%1513, %1517) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1519 = "llvm.inline_asm"(%1508, %1516, %1518, %1514) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1520 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1521 = "llvm.xor"(%1402, %1520) : (i32, i32) -> i32 loc(#loc16)
    %1522 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1523 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1524 = "llvm.lshr"(%1521, %1523) : (i32, i32) -> i32 loc(#loc16)
    %1525 = "llvm.shl"(%1524, %1522) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1526 = "llvm.add"(%1525, %1521) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1527 = "llvm.getelementptr"(%1312, %1526) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1528 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1529 = "llvm.load"(%1527) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1530 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1531 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1532 = "llvm.insertelement"(%1530, %1529, %1531) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1533 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1534 = "llvm.extractelement"(%1532, %1533) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1535 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1536 = "llvm.xor"(%1402, %1535) : (i32, i32) -> i32 loc(#loc16)
    %1537 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1538 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1539 = "llvm.lshr"(%1536, %1538) : (i32, i32) -> i32 loc(#loc16)
    %1540 = "llvm.shl"(%1539, %1537) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1541 = "llvm.add"(%1540, %1536) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1542 = "llvm.getelementptr"(%1312, %1541) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1543 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1544 = "llvm.load"(%1542) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1545 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1546 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1547 = "llvm.insertelement"(%1545, %1544, %1546) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1548 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1549 = "llvm.extractelement"(%1547, %1548) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1550 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1551 = "llvm.xor"(%1357, %1550) : (i32, i32) -> i32 loc(#loc16)
    %1552 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1553 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1554 = "llvm.lshr"(%1551, %1553) : (i32, i32) -> i32 loc(#loc16)
    %1555 = "llvm.shl"(%1554, %1552) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1556 = "llvm.add"(%1555, %1551) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1557 = "llvm.getelementptr"(%1312, %1556) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1558 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1559 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1560 = "llvm.insertelement"(%1558, %1296, %1559) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1561 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1562 = "llvm.insertelement"(%1560, %1297, %1561) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1563 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1564 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1565 = "llvm.extractelement"(%1562, %1564) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1566 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1567 = "llvm.extractelement"(%1562, %1566) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1568 = "llvm.inline_asm"(%1557, %1565, %1567, %1563) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1569 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1570 = "llvm.xor"(%1402, %1569) : (i32, i32) -> i32 loc(#loc16)
    %1571 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1572 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1573 = "llvm.lshr"(%1570, %1572) : (i32, i32) -> i32 loc(#loc16)
    %1574 = "llvm.shl"(%1573, %1571) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1575 = "llvm.add"(%1574, %1570) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1576 = "llvm.getelementptr"(%1312, %1575) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1577 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1578 = "llvm.load"(%1576) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1579 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1580 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1581 = "llvm.insertelement"(%1579, %1578, %1580) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1582 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1583 = "llvm.extractelement"(%1581, %1582) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1584 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1585 = "llvm.xor"(%1402, %1584) : (i32, i32) -> i32 loc(#loc16)
    %1586 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1587 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1588 = "llvm.lshr"(%1585, %1587) : (i32, i32) -> i32 loc(#loc16)
    %1589 = "llvm.shl"(%1588, %1586) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1590 = "llvm.add"(%1589, %1585) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1591 = "llvm.getelementptr"(%1312, %1590) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1592 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1593 = "llvm.load"(%1591) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1594 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1595 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1596 = "llvm.insertelement"(%1594, %1593, %1595) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1597 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1598 = "llvm.extractelement"(%1596, %1597) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1599 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1600 = "llvm.xor"(%1357, %1599) : (i32, i32) -> i32 loc(#loc16)
    %1601 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1602 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1603 = "llvm.lshr"(%1600, %1602) : (i32, i32) -> i32 loc(#loc16)
    %1604 = "llvm.shl"(%1603, %1601) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1605 = "llvm.add"(%1604, %1600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1606 = "llvm.getelementptr"(%1312, %1605) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1607 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1608 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1609 = "llvm.insertelement"(%1607, %1298, %1608) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1610 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1611 = "llvm.insertelement"(%1609, %1299, %1610) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1612 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1613 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1614 = "llvm.extractelement"(%1611, %1613) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1615 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1616 = "llvm.extractelement"(%1611, %1615) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1617 = "llvm.inline_asm"(%1606, %1614, %1616, %1612) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1618 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1619 = "llvm.xor"(%1402, %1618) : (i32, i32) -> i32 loc(#loc16)
    %1620 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1621 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1622 = "llvm.lshr"(%1619, %1621) : (i32, i32) -> i32 loc(#loc16)
    %1623 = "llvm.shl"(%1622, %1620) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1624 = "llvm.add"(%1623, %1619) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1625 = "llvm.getelementptr"(%1312, %1624) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1626 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1627 = "llvm.load"(%1625) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1628 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1629 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1630 = "llvm.insertelement"(%1628, %1627, %1629) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1631 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1632 = "llvm.extractelement"(%1630, %1631) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1633 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1634 = "llvm.xor"(%1402, %1633) : (i32, i32) -> i32 loc(#loc16)
    %1635 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1636 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1637 = "llvm.lshr"(%1634, %1636) : (i32, i32) -> i32 loc(#loc16)
    %1638 = "llvm.shl"(%1637, %1635) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1639 = "llvm.add"(%1638, %1634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1640 = "llvm.getelementptr"(%1312, %1639) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1641 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1642 = "llvm.load"(%1640) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1643 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1644 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1645 = "llvm.insertelement"(%1643, %1642, %1644) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1646 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1647 = "llvm.extractelement"(%1645, %1646) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1648 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1649 = "llvm.xor"(%1357, %1648) : (i32, i32) -> i32 loc(#loc16)
    %1650 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1651 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1652 = "llvm.lshr"(%1649, %1651) : (i32, i32) -> i32 loc(#loc16)
    %1653 = "llvm.shl"(%1652, %1650) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1654 = "llvm.add"(%1653, %1649) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1655 = "llvm.getelementptr"(%1312, %1654) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1656 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1657 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1658 = "llvm.insertelement"(%1656, %1300, %1657) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1659 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1660 = "llvm.insertelement"(%1658, %1301, %1659) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1661 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1662 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1663 = "llvm.extractelement"(%1660, %1662) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1664 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1665 = "llvm.extractelement"(%1660, %1664) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1666 = "llvm.inline_asm"(%1655, %1663, %1665, %1661) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1667 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1668 = "llvm.xor"(%1402, %1667) : (i32, i32) -> i32 loc(#loc16)
    %1669 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1670 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1671 = "llvm.lshr"(%1668, %1670) : (i32, i32) -> i32 loc(#loc16)
    %1672 = "llvm.shl"(%1671, %1669) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1673 = "llvm.add"(%1672, %1668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1674 = "llvm.getelementptr"(%1312, %1673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1675 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1676 = "llvm.load"(%1674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1677 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1678 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1679 = "llvm.insertelement"(%1677, %1676, %1678) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1680 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1681 = "llvm.extractelement"(%1679, %1680) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1682 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1683 = "llvm.xor"(%1402, %1682) : (i32, i32) -> i32 loc(#loc16)
    %1684 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1685 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1686 = "llvm.lshr"(%1683, %1685) : (i32, i32) -> i32 loc(#loc16)
    %1687 = "llvm.shl"(%1686, %1684) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1688 = "llvm.add"(%1687, %1683) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1689 = "llvm.getelementptr"(%1312, %1688) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1690 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1691 = "llvm.load"(%1689) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1692 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1693 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1694 = "llvm.insertelement"(%1692, %1691, %1693) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1695 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1696 = "llvm.extractelement"(%1694, %1695) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1697 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1698 = "llvm.xor"(%1357, %1697) : (i32, i32) -> i32 loc(#loc16)
    %1699 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1700 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1701 = "llvm.lshr"(%1698, %1700) : (i32, i32) -> i32 loc(#loc16)
    %1702 = "llvm.shl"(%1701, %1699) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1703 = "llvm.add"(%1702, %1698) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1704 = "llvm.getelementptr"(%1312, %1703) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1705 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1706 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1707 = "llvm.insertelement"(%1705, %1302, %1706) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1708 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1709 = "llvm.insertelement"(%1707, %1303, %1708) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1710 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1711 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1712 = "llvm.extractelement"(%1709, %1711) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1713 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1714 = "llvm.extractelement"(%1709, %1713) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1715 = "llvm.inline_asm"(%1704, %1712, %1714, %1710) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1716 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1717 = "llvm.xor"(%1402, %1716) : (i32, i32) -> i32 loc(#loc16)
    %1718 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1719 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1720 = "llvm.lshr"(%1717, %1719) : (i32, i32) -> i32 loc(#loc16)
    %1721 = "llvm.shl"(%1720, %1718) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1722 = "llvm.add"(%1721, %1717) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1723 = "llvm.getelementptr"(%1312, %1722) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1724 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1725 = "llvm.load"(%1723) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1726 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1727 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1728 = "llvm.insertelement"(%1726, %1725, %1727) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1729 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1730 = "llvm.extractelement"(%1728, %1729) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1731 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1732 = "llvm.xor"(%1402, %1731) : (i32, i32) -> i32 loc(#loc16)
    %1733 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1734 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1735 = "llvm.lshr"(%1732, %1734) : (i32, i32) -> i32 loc(#loc16)
    %1736 = "llvm.shl"(%1735, %1733) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1737 = "llvm.add"(%1736, %1732) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1738 = "llvm.getelementptr"(%1312, %1737) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1739 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1740 = "llvm.load"(%1738) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1741 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1742 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1743 = "llvm.insertelement"(%1741, %1740, %1742) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1744 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1745 = "llvm.extractelement"(%1743, %1744) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1746 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1747 = "llvm.xor"(%1357, %1746) : (i32, i32) -> i32 loc(#loc16)
    %1748 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1749 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1750 = "llvm.lshr"(%1747, %1749) : (i32, i32) -> i32 loc(#loc16)
    %1751 = "llvm.shl"(%1750, %1748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1752 = "llvm.add"(%1751, %1747) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1753 = "llvm.getelementptr"(%1312, %1752) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1754 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc16)
    %1755 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1756 = "llvm.insertelement"(%1754, %1304, %1755) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1757 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1758 = "llvm.insertelement"(%1756, %1305, %1757) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc16)
    %1759 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1760 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1761 = "llvm.extractelement"(%1758, %1760) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1762 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1763 = "llvm.extractelement"(%1758, %1762) : (vector<2xi32>, i32) -> i32 loc(#loc16)
    %1764 = "llvm.inline_asm"(%1753, %1761, %1763, %1759) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc16)
    %1765 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1766 = "llvm.xor"(%1402, %1765) : (i32, i32) -> i32 loc(#loc16)
    %1767 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1768 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1769 = "llvm.lshr"(%1766, %1768) : (i32, i32) -> i32 loc(#loc16)
    %1770 = "llvm.shl"(%1769, %1767) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1771 = "llvm.add"(%1770, %1766) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1772 = "llvm.getelementptr"(%1312, %1771) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1773 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1774 = "llvm.load"(%1772) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1775 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1776 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1777 = "llvm.insertelement"(%1775, %1774, %1776) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1778 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1779 = "llvm.extractelement"(%1777, %1778) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1780 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc16)
    %1781 = "llvm.xor"(%1402, %1780) : (i32, i32) -> i32 loc(#loc16)
    %1782 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1783 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc16)
    %1784 = "llvm.lshr"(%1781, %1783) : (i32, i32) -> i32 loc(#loc16)
    %1785 = "llvm.shl"(%1784, %1782) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1786 = "llvm.add"(%1785, %1781) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc16)
    %1787 = "llvm.getelementptr"(%1312, %1786) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc16)
    %1788 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc16)
    %1789 = "llvm.load"(%1787) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc16)
    %1790 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc16)
    %1791 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1792 = "llvm.insertelement"(%1790, %1789, %1791) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc16)
    %1793 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc16)
    %1794 = "llvm.extractelement"(%1792, %1793) : (vector<1xi32>, i32) -> i32 loc(#loc16)
    %1795 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1796 = "llvm.insertvalue"(%1795, %1436) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1797 = "llvm.insertvalue"(%1796, %1451) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1798 = "llvm.insertvalue"(%1797, %1485) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1799 = "llvm.insertvalue"(%1798, %1500) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1800 = "llvm.insertvalue"(%1799, %1534) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1801 = "llvm.insertvalue"(%1800, %1549) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1802 = "llvm.insertvalue"(%1801, %1583) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1803 = "llvm.insertvalue"(%1802, %1598) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1804 = "llvm.insertvalue"(%1803, %1632) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1805 = "llvm.insertvalue"(%1804, %1647) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1806 = "llvm.insertvalue"(%1805, %1681) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1807 = "llvm.insertvalue"(%1806, %1696) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1808 = "llvm.insertvalue"(%1807, %1730) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1809 = "llvm.insertvalue"(%1808, %1745) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1810 = "llvm.insertvalue"(%1809, %1779) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1811 = "llvm.insertvalue"(%1810, %1794) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc16)
    %1812 = "llvm.extractvalue"(%354) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1813 = "llvm.extractvalue"(%354) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1814 = "llvm.extractvalue"(%354) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1815 = "llvm.extractvalue"(%354) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1816 = "llvm.extractvalue"(%354) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1817 = "llvm.extractvalue"(%354) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1818 = "llvm.extractvalue"(%354) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1819 = "llvm.extractvalue"(%354) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1820 = "llvm.extractvalue"(%1256) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1821 = "llvm.extractvalue"(%1256) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1822 = "llvm.extractvalue"(%1256) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1823 = "llvm.extractvalue"(%1256) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1824 = "llvm.extractvalue"(%1256) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1825 = "llvm.extractvalue"(%1256) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1826 = "llvm.extractvalue"(%1256) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1827 = "llvm.extractvalue"(%1256) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1828 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1829 = "llvm.insertvalue"(%1828, %1812) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1830 = "llvm.insertvalue"(%1829, %1820) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1831 = "llvm.insertvalue"(%1830, %1813) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1832 = "llvm.insertvalue"(%1831, %1821) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1833 = "llvm.insertvalue"(%1832, %1814) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1834 = "llvm.insertvalue"(%1833, %1822) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1835 = "llvm.insertvalue"(%1834, %1815) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1836 = "llvm.insertvalue"(%1835, %1823) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1837 = "llvm.insertvalue"(%1836, %1816) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1838 = "llvm.insertvalue"(%1837, %1824) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1839 = "llvm.insertvalue"(%1838, %1817) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1840 = "llvm.insertvalue"(%1839, %1825) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1841 = "llvm.insertvalue"(%1840, %1818) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1842 = "llvm.insertvalue"(%1841, %1826) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1843 = "llvm.insertvalue"(%1842, %1819) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %1844 = "llvm.insertvalue"(%1843, %1827) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %1845 = "llvm.extractvalue"(%1844) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1846 = "llvm.extractvalue"(%1844) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1847 = "llvm.extractvalue"(%1844) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1848 = "llvm.extractvalue"(%1844) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1849 = "llvm.extractvalue"(%1844) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1850 = "llvm.extractvalue"(%1844) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1851 = "llvm.extractvalue"(%1844) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1852 = "llvm.extractvalue"(%1844) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1853 = "llvm.extractvalue"(%1844) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1854 = "llvm.extractvalue"(%1844) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1855 = "llvm.extractvalue"(%1844) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1856 = "llvm.extractvalue"(%1844) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1857 = "llvm.extractvalue"(%1844) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1858 = "llvm.extractvalue"(%1844) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1859 = "llvm.extractvalue"(%1844) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1860 = "llvm.extractvalue"(%1844) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc18)
    %1861 = "llvm.zext"(%1845) : (i1) -> i8 loc(#loc18)
    %1862 = "llvm.zext"(%1846) : (i1) -> i8 loc(#loc18)
    %1863 = "llvm.zext"(%1847) : (i1) -> i8 loc(#loc18)
    %1864 = "llvm.zext"(%1848) : (i1) -> i8 loc(#loc18)
    %1865 = "llvm.zext"(%1849) : (i1) -> i8 loc(#loc18)
    %1866 = "llvm.zext"(%1850) : (i1) -> i8 loc(#loc18)
    %1867 = "llvm.zext"(%1851) : (i1) -> i8 loc(#loc18)
    %1868 = "llvm.zext"(%1852) : (i1) -> i8 loc(#loc18)
    %1869 = "llvm.zext"(%1853) : (i1) -> i8 loc(#loc18)
    %1870 = "llvm.zext"(%1854) : (i1) -> i8 loc(#loc18)
    %1871 = "llvm.zext"(%1855) : (i1) -> i8 loc(#loc18)
    %1872 = "llvm.zext"(%1856) : (i1) -> i8 loc(#loc18)
    %1873 = "llvm.zext"(%1857) : (i1) -> i8 loc(#loc18)
    %1874 = "llvm.zext"(%1858) : (i1) -> i8 loc(#loc18)
    %1875 = "llvm.zext"(%1859) : (i1) -> i8 loc(#loc18)
    %1876 = "llvm.zext"(%1860) : (i1) -> i8 loc(#loc18)
    %1877 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc18)
    %1878 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc18)
    %1879 = "llvm.urem"(%1877, %1878) : (i32, i32) -> i32 loc(#loc18)
    %1880 = "llvm.udiv"(%1877, %1878) : (i32, i32) -> i32 loc(#loc18)
    %1881 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1882 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1883 = "llvm.getelementptr"(%1882, %1881) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %1884 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1885 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1886 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1887 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1888 = "llvm.and"(%1879, %1887) : (i32, i32) -> i32 loc(#loc18)
    %1889 = "llvm.icmp"(%1888, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1890 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1891 = "llvm.select"(%1889, %1886, %1890) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1892 = "llvm.xor"(%1886, %1891) : (i32, i32) -> i32 loc(#loc18)
    %1893 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1894 = "llvm.and"(%1879, %1893) : (i32, i32) -> i32 loc(#loc18)
    %1895 = "llvm.icmp"(%1894, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1896 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc18)
    %1897 = "llvm.select"(%1895, %1886, %1896) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1898 = "llvm.xor"(%1892, %1897) : (i32, i32) -> i32 loc(#loc18)
    %1899 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc18)
    %1900 = "llvm.and"(%1879, %1899) : (i32, i32) -> i32 loc(#loc18)
    %1901 = "llvm.icmp"(%1900, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1902 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc18)
    %1903 = "llvm.select"(%1901, %1886, %1902) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1904 = "llvm.xor"(%1898, %1903) : (i32, i32) -> i32 loc(#loc18)
    %1905 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc18)
    %1906 = "llvm.and"(%1879, %1905) : (i32, i32) -> i32 loc(#loc18)
    %1907 = "llvm.icmp"(%1906, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1908 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc18)
    %1909 = "llvm.select"(%1907, %1886, %1908) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1910 = "llvm.xor"(%1904, %1909) : (i32, i32) -> i32 loc(#loc18)
    %1911 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc18)
    %1912 = "llvm.and"(%1879, %1911) : (i32, i32) -> i32 loc(#loc18)
    %1913 = "llvm.icmp"(%1912, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1914 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc18)
    %1915 = "llvm.select"(%1913, %1886, %1914) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1916 = "llvm.xor"(%1910, %1915) : (i32, i32) -> i32 loc(#loc18)
    %1917 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1918 = "llvm.and"(%1880, %1917) : (i32, i32) -> i32 loc(#loc18)
    %1919 = "llvm.icmp"(%1918, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1920 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc18)
    %1921 = "llvm.select"(%1919, %1886, %1920) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1922 = "llvm.xor"(%1916, %1921) : (i32, i32) -> i32 loc(#loc18)
    %1923 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1924 = "llvm.and"(%1880, %1923) : (i32, i32) -> i32 loc(#loc18)
    %1925 = "llvm.icmp"(%1924, %1886) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1926 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %1927 = "llvm.select"(%1925, %1886, %1926) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1928 = "llvm.xor"(%1922, %1927) : (i32, i32) -> i32 loc(#loc18)
    %1929 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1930 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1931 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1932 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1933 = "llvm.and"(%1879, %1932) : (i32, i32) -> i32 loc(#loc18)
    %1934 = "llvm.icmp"(%1933, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1935 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1936 = "llvm.select"(%1934, %1931, %1935) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1937 = "llvm.xor"(%1931, %1936) : (i32, i32) -> i32 loc(#loc18)
    %1938 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1939 = "llvm.and"(%1879, %1938) : (i32, i32) -> i32 loc(#loc18)
    %1940 = "llvm.icmp"(%1939, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1941 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1942 = "llvm.select"(%1940, %1931, %1941) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1943 = "llvm.xor"(%1937, %1942) : (i32, i32) -> i32 loc(#loc18)
    %1944 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc18)
    %1945 = "llvm.and"(%1879, %1944) : (i32, i32) -> i32 loc(#loc18)
    %1946 = "llvm.icmp"(%1945, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1947 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc18)
    %1948 = "llvm.select"(%1946, %1931, %1947) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1949 = "llvm.xor"(%1943, %1948) : (i32, i32) -> i32 loc(#loc18)
    %1950 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc18)
    %1951 = "llvm.and"(%1879, %1950) : (i32, i32) -> i32 loc(#loc18)
    %1952 = "llvm.icmp"(%1951, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1953 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc18)
    %1954 = "llvm.select"(%1952, %1931, %1953) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1955 = "llvm.xor"(%1949, %1954) : (i32, i32) -> i32 loc(#loc18)
    %1956 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc18)
    %1957 = "llvm.and"(%1879, %1956) : (i32, i32) -> i32 loc(#loc18)
    %1958 = "llvm.icmp"(%1957, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1959 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc18)
    %1960 = "llvm.select"(%1958, %1931, %1959) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1961 = "llvm.xor"(%1955, %1960) : (i32, i32) -> i32 loc(#loc18)
    %1962 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1963 = "llvm.and"(%1880, %1962) : (i32, i32) -> i32 loc(#loc18)
    %1964 = "llvm.icmp"(%1963, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1965 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc18)
    %1966 = "llvm.select"(%1964, %1931, %1965) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1967 = "llvm.xor"(%1961, %1966) : (i32, i32) -> i32 loc(#loc18)
    %1968 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc18)
    %1969 = "llvm.and"(%1880, %1968) : (i32, i32) -> i32 loc(#loc18)
    %1970 = "llvm.icmp"(%1969, %1931) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc18)
    %1971 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc18)
    %1972 = "llvm.select"(%1970, %1931, %1971) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc18)
    %1973 = "llvm.xor"(%1967, %1972) : (i32, i32) -> i32 loc(#loc18)
    %1974 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1975 = "llvm.xor"(%1928, %1974) : (i32, i32) -> i32 loc(#loc18)
    %1976 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1977 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1978 = "llvm.lshr"(%1975, %1977) : (i32, i32) -> i32 loc(#loc18)
    %1979 = "llvm.shl"(%1978, %1976) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %1980 = "llvm.add"(%1979, %1975) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %1981 = "llvm.getelementptr"(%1883, %1980) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %1982 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %1983 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1984 = "llvm.insertelement"(%1982, %1861, %1983) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %1985 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1986 = "llvm.insertelement"(%1984, %1862, %1985) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %1987 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %1988 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1989 = "llvm.extractelement"(%1986, %1988) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %1990 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1991 = "llvm.extractelement"(%1986, %1990) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %1992 = "llvm.inline_asm"(%1981, %1989, %1991, %1987) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %1993 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %1994 = "llvm.xor"(%1973, %1993) : (i32, i32) -> i32 loc(#loc18)
    %1995 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1996 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %1997 = "llvm.lshr"(%1994, %1996) : (i32, i32) -> i32 loc(#loc18)
    %1998 = "llvm.shl"(%1997, %1995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %1999 = "llvm.add"(%1998, %1994) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2000 = "llvm.getelementptr"(%1883, %1999) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2001 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2002 = "llvm.load"(%2000) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2003 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2004 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2005 = "llvm.insertelement"(%2003, %2002, %2004) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2006 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2007 = "llvm.extractelement"(%2005, %2006) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2008 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2009 = "llvm.xor"(%1973, %2008) : (i32, i32) -> i32 loc(#loc18)
    %2010 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2011 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2012 = "llvm.lshr"(%2009, %2011) : (i32, i32) -> i32 loc(#loc18)
    %2013 = "llvm.shl"(%2012, %2010) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2014 = "llvm.add"(%2013, %2009) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2015 = "llvm.getelementptr"(%1883, %2014) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2016 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2017 = "llvm.load"(%2015) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2018 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2019 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2020 = "llvm.insertelement"(%2018, %2017, %2019) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2021 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2022 = "llvm.extractelement"(%2020, %2021) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2023 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2024 = "llvm.xor"(%1928, %2023) : (i32, i32) -> i32 loc(#loc18)
    %2025 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2026 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2027 = "llvm.lshr"(%2024, %2026) : (i32, i32) -> i32 loc(#loc18)
    %2028 = "llvm.shl"(%2027, %2025) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2029 = "llvm.add"(%2028, %2024) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2030 = "llvm.getelementptr"(%1883, %2029) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2031 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2032 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2033 = "llvm.insertelement"(%2031, %1863, %2032) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2034 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2035 = "llvm.insertelement"(%2033, %1864, %2034) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2036 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2037 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2038 = "llvm.extractelement"(%2035, %2037) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2039 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2040 = "llvm.extractelement"(%2035, %2039) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2041 = "llvm.inline_asm"(%2030, %2038, %2040, %2036) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2042 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2043 = "llvm.xor"(%1973, %2042) : (i32, i32) -> i32 loc(#loc18)
    %2044 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2045 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2046 = "llvm.lshr"(%2043, %2045) : (i32, i32) -> i32 loc(#loc18)
    %2047 = "llvm.shl"(%2046, %2044) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2048 = "llvm.add"(%2047, %2043) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2049 = "llvm.getelementptr"(%1883, %2048) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2050 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2051 = "llvm.load"(%2049) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2052 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2053 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2054 = "llvm.insertelement"(%2052, %2051, %2053) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2055 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2056 = "llvm.extractelement"(%2054, %2055) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2057 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2058 = "llvm.xor"(%1973, %2057) : (i32, i32) -> i32 loc(#loc18)
    %2059 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2060 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2061 = "llvm.lshr"(%2058, %2060) : (i32, i32) -> i32 loc(#loc18)
    %2062 = "llvm.shl"(%2061, %2059) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2063 = "llvm.add"(%2062, %2058) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2064 = "llvm.getelementptr"(%1883, %2063) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2065 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2066 = "llvm.load"(%2064) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2067 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2068 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2069 = "llvm.insertelement"(%2067, %2066, %2068) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2070 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2071 = "llvm.extractelement"(%2069, %2070) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2072 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2073 = "llvm.xor"(%1928, %2072) : (i32, i32) -> i32 loc(#loc18)
    %2074 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2075 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2076 = "llvm.lshr"(%2073, %2075) : (i32, i32) -> i32 loc(#loc18)
    %2077 = "llvm.shl"(%2076, %2074) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2078 = "llvm.add"(%2077, %2073) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2079 = "llvm.getelementptr"(%1883, %2078) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2080 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2081 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2082 = "llvm.insertelement"(%2080, %1865, %2081) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2083 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2084 = "llvm.insertelement"(%2082, %1866, %2083) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2085 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2086 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2087 = "llvm.extractelement"(%2084, %2086) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2088 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2089 = "llvm.extractelement"(%2084, %2088) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2090 = "llvm.inline_asm"(%2079, %2087, %2089, %2085) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2091 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2092 = "llvm.xor"(%1973, %2091) : (i32, i32) -> i32 loc(#loc18)
    %2093 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2094 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2095 = "llvm.lshr"(%2092, %2094) : (i32, i32) -> i32 loc(#loc18)
    %2096 = "llvm.shl"(%2095, %2093) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2097 = "llvm.add"(%2096, %2092) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2098 = "llvm.getelementptr"(%1883, %2097) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2099 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2100 = "llvm.load"(%2098) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2101 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2102 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2103 = "llvm.insertelement"(%2101, %2100, %2102) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2104 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2105 = "llvm.extractelement"(%2103, %2104) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2106 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2107 = "llvm.xor"(%1973, %2106) : (i32, i32) -> i32 loc(#loc18)
    %2108 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2109 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2110 = "llvm.lshr"(%2107, %2109) : (i32, i32) -> i32 loc(#loc18)
    %2111 = "llvm.shl"(%2110, %2108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2112 = "llvm.add"(%2111, %2107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2113 = "llvm.getelementptr"(%1883, %2112) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2114 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2115 = "llvm.load"(%2113) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2116 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2117 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2118 = "llvm.insertelement"(%2116, %2115, %2117) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2119 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2120 = "llvm.extractelement"(%2118, %2119) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2121 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2122 = "llvm.xor"(%1928, %2121) : (i32, i32) -> i32 loc(#loc18)
    %2123 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2124 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2125 = "llvm.lshr"(%2122, %2124) : (i32, i32) -> i32 loc(#loc18)
    %2126 = "llvm.shl"(%2125, %2123) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2127 = "llvm.add"(%2126, %2122) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2128 = "llvm.getelementptr"(%1883, %2127) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2129 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2130 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2131 = "llvm.insertelement"(%2129, %1867, %2130) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2132 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2133 = "llvm.insertelement"(%2131, %1868, %2132) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2134 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2135 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2136 = "llvm.extractelement"(%2133, %2135) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2137 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2138 = "llvm.extractelement"(%2133, %2137) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2139 = "llvm.inline_asm"(%2128, %2136, %2138, %2134) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2140 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2141 = "llvm.xor"(%1973, %2140) : (i32, i32) -> i32 loc(#loc18)
    %2142 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2143 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2144 = "llvm.lshr"(%2141, %2143) : (i32, i32) -> i32 loc(#loc18)
    %2145 = "llvm.shl"(%2144, %2142) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2146 = "llvm.add"(%2145, %2141) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2147 = "llvm.getelementptr"(%1883, %2146) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2148 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2149 = "llvm.load"(%2147) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2150 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2151 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2152 = "llvm.insertelement"(%2150, %2149, %2151) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2153 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2154 = "llvm.extractelement"(%2152, %2153) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2155 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2156 = "llvm.xor"(%1973, %2155) : (i32, i32) -> i32 loc(#loc18)
    %2157 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2158 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2159 = "llvm.lshr"(%2156, %2158) : (i32, i32) -> i32 loc(#loc18)
    %2160 = "llvm.shl"(%2159, %2157) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2161 = "llvm.add"(%2160, %2156) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2162 = "llvm.getelementptr"(%1883, %2161) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2163 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2164 = "llvm.load"(%2162) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2165 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2166 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2167 = "llvm.insertelement"(%2165, %2164, %2166) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2168 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2169 = "llvm.extractelement"(%2167, %2168) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2170 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2171 = "llvm.xor"(%1928, %2170) : (i32, i32) -> i32 loc(#loc18)
    %2172 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2173 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2174 = "llvm.lshr"(%2171, %2173) : (i32, i32) -> i32 loc(#loc18)
    %2175 = "llvm.shl"(%2174, %2172) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2176 = "llvm.add"(%2175, %2171) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2177 = "llvm.getelementptr"(%1883, %2176) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2178 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2179 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2180 = "llvm.insertelement"(%2178, %1869, %2179) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2181 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2182 = "llvm.insertelement"(%2180, %1870, %2181) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2183 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2184 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2185 = "llvm.extractelement"(%2182, %2184) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2186 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2187 = "llvm.extractelement"(%2182, %2186) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2188 = "llvm.inline_asm"(%2177, %2185, %2187, %2183) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2189 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2190 = "llvm.xor"(%1973, %2189) : (i32, i32) -> i32 loc(#loc18)
    %2191 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2192 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2193 = "llvm.lshr"(%2190, %2192) : (i32, i32) -> i32 loc(#loc18)
    %2194 = "llvm.shl"(%2193, %2191) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2195 = "llvm.add"(%2194, %2190) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2196 = "llvm.getelementptr"(%1883, %2195) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2197 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2198 = "llvm.load"(%2196) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2199 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2200 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2201 = "llvm.insertelement"(%2199, %2198, %2200) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2202 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2203 = "llvm.extractelement"(%2201, %2202) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2204 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2205 = "llvm.xor"(%1973, %2204) : (i32, i32) -> i32 loc(#loc18)
    %2206 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2207 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2208 = "llvm.lshr"(%2205, %2207) : (i32, i32) -> i32 loc(#loc18)
    %2209 = "llvm.shl"(%2208, %2206) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2210 = "llvm.add"(%2209, %2205) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2211 = "llvm.getelementptr"(%1883, %2210) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2212 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2213 = "llvm.load"(%2211) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2214 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2215 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2216 = "llvm.insertelement"(%2214, %2213, %2215) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2217 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2218 = "llvm.extractelement"(%2216, %2217) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2219 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2220 = "llvm.xor"(%1928, %2219) : (i32, i32) -> i32 loc(#loc18)
    %2221 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2222 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2223 = "llvm.lshr"(%2220, %2222) : (i32, i32) -> i32 loc(#loc18)
    %2224 = "llvm.shl"(%2223, %2221) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2225 = "llvm.add"(%2224, %2220) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2226 = "llvm.getelementptr"(%1883, %2225) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2227 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2228 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2229 = "llvm.insertelement"(%2227, %1871, %2228) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2230 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2231 = "llvm.insertelement"(%2229, %1872, %2230) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2232 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2233 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2234 = "llvm.extractelement"(%2231, %2233) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2235 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2236 = "llvm.extractelement"(%2231, %2235) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2237 = "llvm.inline_asm"(%2226, %2234, %2236, %2232) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2238 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2239 = "llvm.xor"(%1973, %2238) : (i32, i32) -> i32 loc(#loc18)
    %2240 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2241 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2242 = "llvm.lshr"(%2239, %2241) : (i32, i32) -> i32 loc(#loc18)
    %2243 = "llvm.shl"(%2242, %2240) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2244 = "llvm.add"(%2243, %2239) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2245 = "llvm.getelementptr"(%1883, %2244) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2246 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2247 = "llvm.load"(%2245) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2248 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2249 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2250 = "llvm.insertelement"(%2248, %2247, %2249) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2251 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2252 = "llvm.extractelement"(%2250, %2251) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2253 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2254 = "llvm.xor"(%1973, %2253) : (i32, i32) -> i32 loc(#loc18)
    %2255 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2256 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2257 = "llvm.lshr"(%2254, %2256) : (i32, i32) -> i32 loc(#loc18)
    %2258 = "llvm.shl"(%2257, %2255) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2259 = "llvm.add"(%2258, %2254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2260 = "llvm.getelementptr"(%1883, %2259) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2261 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2262 = "llvm.load"(%2260) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2263 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2264 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2265 = "llvm.insertelement"(%2263, %2262, %2264) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2266 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2267 = "llvm.extractelement"(%2265, %2266) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2268 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2269 = "llvm.xor"(%1928, %2268) : (i32, i32) -> i32 loc(#loc18)
    %2270 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2271 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2272 = "llvm.lshr"(%2269, %2271) : (i32, i32) -> i32 loc(#loc18)
    %2273 = "llvm.shl"(%2272, %2270) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2274 = "llvm.add"(%2273, %2269) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2275 = "llvm.getelementptr"(%1883, %2274) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2276 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2277 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2278 = "llvm.insertelement"(%2276, %1873, %2277) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2279 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2280 = "llvm.insertelement"(%2278, %1874, %2279) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2281 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2282 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2283 = "llvm.extractelement"(%2280, %2282) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2284 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2285 = "llvm.extractelement"(%2280, %2284) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2286 = "llvm.inline_asm"(%2275, %2283, %2285, %2281) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2287 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2288 = "llvm.xor"(%1973, %2287) : (i32, i32) -> i32 loc(#loc18)
    %2289 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2290 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2291 = "llvm.lshr"(%2288, %2290) : (i32, i32) -> i32 loc(#loc18)
    %2292 = "llvm.shl"(%2291, %2289) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2293 = "llvm.add"(%2292, %2288) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2294 = "llvm.getelementptr"(%1883, %2293) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2295 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2296 = "llvm.load"(%2294) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2297 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2298 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2299 = "llvm.insertelement"(%2297, %2296, %2298) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2300 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2301 = "llvm.extractelement"(%2299, %2300) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2302 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2303 = "llvm.xor"(%1973, %2302) : (i32, i32) -> i32 loc(#loc18)
    %2304 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2305 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2306 = "llvm.lshr"(%2303, %2305) : (i32, i32) -> i32 loc(#loc18)
    %2307 = "llvm.shl"(%2306, %2304) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2308 = "llvm.add"(%2307, %2303) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2309 = "llvm.getelementptr"(%1883, %2308) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2310 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2311 = "llvm.load"(%2309) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2312 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2313 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2314 = "llvm.insertelement"(%2312, %2311, %2313) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2315 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2316 = "llvm.extractelement"(%2314, %2315) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2317 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2318 = "llvm.xor"(%1928, %2317) : (i32, i32) -> i32 loc(#loc18)
    %2319 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2320 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2321 = "llvm.lshr"(%2318, %2320) : (i32, i32) -> i32 loc(#loc18)
    %2322 = "llvm.shl"(%2321, %2319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2323 = "llvm.add"(%2322, %2318) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2324 = "llvm.getelementptr"(%1883, %2323) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2325 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc18)
    %2326 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2327 = "llvm.insertelement"(%2325, %1875, %2326) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2328 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2329 = "llvm.insertelement"(%2327, %1876, %2328) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc18)
    %2330 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2331 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2332 = "llvm.extractelement"(%2329, %2331) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2333 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2334 = "llvm.extractelement"(%2329, %2333) : (vector<2xi8>, i32) -> i8 loc(#loc18)
    %2335 = "llvm.inline_asm"(%2324, %2332, %2334, %2330) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc18)
    "nvvm.barrier0"() : () -> () loc(#loc18)
    %2336 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2337 = "llvm.xor"(%1973, %2336) : (i32, i32) -> i32 loc(#loc18)
    %2338 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2339 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2340 = "llvm.lshr"(%2337, %2339) : (i32, i32) -> i32 loc(#loc18)
    %2341 = "llvm.shl"(%2340, %2338) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2342 = "llvm.add"(%2341, %2337) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2343 = "llvm.getelementptr"(%1883, %2342) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2344 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2345 = "llvm.load"(%2343) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2346 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2347 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2348 = "llvm.insertelement"(%2346, %2345, %2347) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2349 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2350 = "llvm.extractelement"(%2348, %2349) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2351 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc18)
    %2352 = "llvm.xor"(%1973, %2351) : (i32, i32) -> i32 loc(#loc18)
    %2353 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2354 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc18)
    %2355 = "llvm.lshr"(%2352, %2354) : (i32, i32) -> i32 loc(#loc18)
    %2356 = "llvm.shl"(%2355, %2353) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2357 = "llvm.add"(%2356, %2352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %2358 = "llvm.getelementptr"(%1883, %2357) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc18)
    %2359 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc18)
    %2360 = "llvm.load"(%2358) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc18)
    %2361 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc18)
    %2362 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2363 = "llvm.insertelement"(%2361, %2360, %2362) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc18)
    %2364 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc18)
    %2365 = "llvm.extractelement"(%2363, %2364) : (vector<1xi8>, i32) -> i8 loc(#loc18)
    %2366 = "llvm.trunc"(%2007) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2367 = "llvm.trunc"(%2022) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2368 = "llvm.trunc"(%2056) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2369 = "llvm.trunc"(%2071) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2370 = "llvm.trunc"(%2105) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2371 = "llvm.trunc"(%2120) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2372 = "llvm.trunc"(%2154) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2373 = "llvm.trunc"(%2169) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2374 = "llvm.trunc"(%2203) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2375 = "llvm.trunc"(%2218) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2376 = "llvm.trunc"(%2252) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2377 = "llvm.trunc"(%2267) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2378 = "llvm.trunc"(%2301) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2379 = "llvm.trunc"(%2316) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2380 = "llvm.trunc"(%2350) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2381 = "llvm.trunc"(%2365) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc18)
    %2382 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2383 = "llvm.insertvalue"(%2382, %2366) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2384 = "llvm.insertvalue"(%2383, %2367) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2385 = "llvm.insertvalue"(%2384, %2368) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2386 = "llvm.insertvalue"(%2385, %2369) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2387 = "llvm.insertvalue"(%2386, %2370) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2388 = "llvm.insertvalue"(%2387, %2371) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2389 = "llvm.insertvalue"(%2388, %2372) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2390 = "llvm.insertvalue"(%2389, %2373) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2391 = "llvm.insertvalue"(%2390, %2374) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2392 = "llvm.insertvalue"(%2391, %2375) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2393 = "llvm.insertvalue"(%2392, %2376) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2394 = "llvm.insertvalue"(%2393, %2377) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2395 = "llvm.insertvalue"(%2394, %2378) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2396 = "llvm.insertvalue"(%2395, %2379) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2397 = "llvm.insertvalue"(%2396, %2380) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2398 = "llvm.insertvalue"(%2397, %2381) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc18)
    %2399 = "llvm.bitcast"(%arg1) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc19)
    %2400 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2401 = "llvm.insertvalue"(%2400, %2399) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2402 = "llvm.insertvalue"(%2401, %2399) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2403 = "llvm.insertvalue"(%2402, %2399) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2404 = "llvm.insertvalue"(%2403, %2399) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2405 = "llvm.insertvalue"(%2404, %2399) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2406 = "llvm.insertvalue"(%2405, %2399) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2407 = "llvm.insertvalue"(%2406, %2399) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2408 = "llvm.insertvalue"(%2407, %2399) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2409 = "llvm.insertvalue"(%2408, %2399) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2410 = "llvm.insertvalue"(%2409, %2399) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2411 = "llvm.insertvalue"(%2410, %2399) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2412 = "llvm.insertvalue"(%2411, %2399) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2413 = "llvm.insertvalue"(%2412, %2399) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2414 = "llvm.insertvalue"(%2413, %2399) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2415 = "llvm.insertvalue"(%2414, %2399) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2416 = "llvm.insertvalue"(%2415, %2399) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2417 = "llvm.extractvalue"(%2416) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2418 = "llvm.extractvalue"(%2416) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2419 = "llvm.extractvalue"(%2416) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2420 = "llvm.extractvalue"(%2416) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2421 = "llvm.extractvalue"(%2416) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2422 = "llvm.extractvalue"(%2416) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2423 = "llvm.extractvalue"(%2416) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2424 = "llvm.extractvalue"(%2416) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2425 = "llvm.extractvalue"(%2416) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2426 = "llvm.extractvalue"(%2416) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2427 = "llvm.extractvalue"(%2416) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2428 = "llvm.extractvalue"(%2416) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2429 = "llvm.extractvalue"(%2416) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2430 = "llvm.extractvalue"(%2416) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2431 = "llvm.extractvalue"(%2416) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2432 = "llvm.extractvalue"(%2416) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2433 = "llvm.extractvalue"(%1811) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2434 = "llvm.extractvalue"(%1811) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2435 = "llvm.extractvalue"(%1811) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2436 = "llvm.extractvalue"(%1811) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2437 = "llvm.extractvalue"(%1811) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2438 = "llvm.extractvalue"(%1811) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2439 = "llvm.extractvalue"(%1811) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2440 = "llvm.extractvalue"(%1811) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2441 = "llvm.extractvalue"(%1811) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2442 = "llvm.extractvalue"(%1811) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2443 = "llvm.extractvalue"(%1811) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2444 = "llvm.extractvalue"(%1811) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2445 = "llvm.extractvalue"(%1811) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2446 = "llvm.extractvalue"(%1811) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2447 = "llvm.extractvalue"(%1811) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2448 = "llvm.extractvalue"(%1811) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc19)
    %2449 = "llvm.getelementptr"(%2417, %2433) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2450 = "llvm.getelementptr"(%2418, %2434) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2451 = "llvm.getelementptr"(%2419, %2435) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2452 = "llvm.getelementptr"(%2420, %2436) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2453 = "llvm.getelementptr"(%2421, %2437) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2454 = "llvm.getelementptr"(%2422, %2438) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2455 = "llvm.getelementptr"(%2423, %2439) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2456 = "llvm.getelementptr"(%2424, %2440) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2457 = "llvm.getelementptr"(%2425, %2441) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2458 = "llvm.getelementptr"(%2426, %2442) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2459 = "llvm.getelementptr"(%2427, %2443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2460 = "llvm.getelementptr"(%2428, %2444) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2461 = "llvm.getelementptr"(%2429, %2445) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2462 = "llvm.getelementptr"(%2430, %2446) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2463 = "llvm.getelementptr"(%2431, %2447) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2464 = "llvm.getelementptr"(%2432, %2448) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc19)
    %2465 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2466 = "llvm.insertvalue"(%2465, %2449) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2467 = "llvm.insertvalue"(%2466, %2450) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2468 = "llvm.insertvalue"(%2467, %2451) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2469 = "llvm.insertvalue"(%2468, %2452) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2470 = "llvm.insertvalue"(%2469, %2453) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2471 = "llvm.insertvalue"(%2470, %2454) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2472 = "llvm.insertvalue"(%2471, %2455) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2473 = "llvm.insertvalue"(%2472, %2456) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2474 = "llvm.insertvalue"(%2473, %2457) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2475 = "llvm.insertvalue"(%2474, %2458) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2476 = "llvm.insertvalue"(%2475, %2459) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2477 = "llvm.insertvalue"(%2476, %2460) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2478 = "llvm.insertvalue"(%2477, %2461) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2479 = "llvm.insertvalue"(%2478, %2462) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2480 = "llvm.insertvalue"(%2479, %2463) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2481 = "llvm.insertvalue"(%2480, %2464) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc19)
    %2482 = "llvm.extractvalue"(%2481) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2483 = "llvm.extractvalue"(%2481) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2484 = "llvm.extractvalue"(%2481) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2485 = "llvm.extractvalue"(%2481) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2486 = "llvm.extractvalue"(%2481) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2487 = "llvm.extractvalue"(%2481) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2488 = "llvm.extractvalue"(%2481) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2489 = "llvm.extractvalue"(%2481) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2490 = "llvm.extractvalue"(%2481) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2491 = "llvm.extractvalue"(%2481) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2492 = "llvm.extractvalue"(%2481) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2493 = "llvm.extractvalue"(%2481) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2494 = "llvm.extractvalue"(%2481) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2495 = "llvm.extractvalue"(%2481) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2496 = "llvm.extractvalue"(%2481) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2497 = "llvm.extractvalue"(%2481) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc20)
    %2498 = "llvm.extractvalue"(%1179) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2499 = "llvm.extractvalue"(%1179) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2500 = "llvm.extractvalue"(%1179) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2501 = "llvm.extractvalue"(%1179) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2502 = "llvm.extractvalue"(%1179) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2503 = "llvm.extractvalue"(%1179) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2504 = "llvm.extractvalue"(%1179) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2505 = "llvm.extractvalue"(%1179) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2506 = "llvm.extractvalue"(%1179) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2507 = "llvm.extractvalue"(%1179) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2508 = "llvm.extractvalue"(%1179) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2509 = "llvm.extractvalue"(%1179) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2510 = "llvm.extractvalue"(%1179) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2511 = "llvm.extractvalue"(%1179) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2512 = "llvm.extractvalue"(%1179) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2513 = "llvm.extractvalue"(%1179) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc20)
    %2514 = "llvm.extractvalue"(%2398) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2515 = "llvm.extractvalue"(%2398) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2516 = "llvm.extractvalue"(%2398) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2517 = "llvm.extractvalue"(%2398) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2518 = "llvm.extractvalue"(%2398) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2519 = "llvm.extractvalue"(%2398) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2520 = "llvm.extractvalue"(%2398) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2521 = "llvm.extractvalue"(%2398) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2522 = "llvm.extractvalue"(%2398) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2523 = "llvm.extractvalue"(%2398) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2524 = "llvm.extractvalue"(%2398) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2525 = "llvm.extractvalue"(%2398) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2526 = "llvm.extractvalue"(%2398) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2527 = "llvm.extractvalue"(%2398) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2528 = "llvm.extractvalue"(%2398) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2529 = "llvm.extractvalue"(%2398) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc20)
    %2530 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc20)
    %2531 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc20)
    %2532 = "llvm.urem"(%2530, %2531) : (i32, i32) -> i32 loc(#loc20)
    %2533 = "llvm.udiv"(%2530, %2531) : (i32, i32) -> i32 loc(#loc20)
    %2534 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2535 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2536 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2537 = "llvm.bitcast"(%2498) : (f32) -> f32 loc(#loc20)
    %2538 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2539 = "llvm.insertelement"(%2536, %2537, %2538) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2540 = "llvm.bitcast"(%2539) : (vector<1xf32>) -> i32 loc(#loc20)
    %2541 = "llvm.inline_asm"(%2540, %2482, %2514) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2542 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2543 = "llvm.bitcast"(%2499) : (f32) -> f32 loc(#loc20)
    %2544 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2545 = "llvm.insertelement"(%2542, %2543, %2544) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2546 = "llvm.bitcast"(%2545) : (vector<1xf32>) -> i32 loc(#loc20)
    %2547 = "llvm.inline_asm"(%2546, %2483, %2515) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2548 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2549 = "llvm.bitcast"(%2500) : (f32) -> f32 loc(#loc20)
    %2550 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2551 = "llvm.insertelement"(%2548, %2549, %2550) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2552 = "llvm.bitcast"(%2551) : (vector<1xf32>) -> i32 loc(#loc20)
    %2553 = "llvm.inline_asm"(%2552, %2484, %2516) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2554 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2555 = "llvm.bitcast"(%2501) : (f32) -> f32 loc(#loc20)
    %2556 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2557 = "llvm.insertelement"(%2554, %2555, %2556) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2558 = "llvm.bitcast"(%2557) : (vector<1xf32>) -> i32 loc(#loc20)
    %2559 = "llvm.inline_asm"(%2558, %2485, %2517) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2560 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2561 = "llvm.bitcast"(%2502) : (f32) -> f32 loc(#loc20)
    %2562 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2563 = "llvm.insertelement"(%2560, %2561, %2562) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2564 = "llvm.bitcast"(%2563) : (vector<1xf32>) -> i32 loc(#loc20)
    %2565 = "llvm.inline_asm"(%2564, %2486, %2518) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2566 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2567 = "llvm.bitcast"(%2503) : (f32) -> f32 loc(#loc20)
    %2568 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2569 = "llvm.insertelement"(%2566, %2567, %2568) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2570 = "llvm.bitcast"(%2569) : (vector<1xf32>) -> i32 loc(#loc20)
    %2571 = "llvm.inline_asm"(%2570, %2487, %2519) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2572 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2573 = "llvm.bitcast"(%2504) : (f32) -> f32 loc(#loc20)
    %2574 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2575 = "llvm.insertelement"(%2572, %2573, %2574) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2576 = "llvm.bitcast"(%2575) : (vector<1xf32>) -> i32 loc(#loc20)
    %2577 = "llvm.inline_asm"(%2576, %2488, %2520) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2578 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2579 = "llvm.bitcast"(%2505) : (f32) -> f32 loc(#loc20)
    %2580 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2581 = "llvm.insertelement"(%2578, %2579, %2580) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2582 = "llvm.bitcast"(%2581) : (vector<1xf32>) -> i32 loc(#loc20)
    %2583 = "llvm.inline_asm"(%2582, %2489, %2521) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2584 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2585 = "llvm.bitcast"(%2506) : (f32) -> f32 loc(#loc20)
    %2586 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2587 = "llvm.insertelement"(%2584, %2585, %2586) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2588 = "llvm.bitcast"(%2587) : (vector<1xf32>) -> i32 loc(#loc20)
    %2589 = "llvm.inline_asm"(%2588, %2490, %2522) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2590 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2591 = "llvm.bitcast"(%2507) : (f32) -> f32 loc(#loc20)
    %2592 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2593 = "llvm.insertelement"(%2590, %2591, %2592) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2594 = "llvm.bitcast"(%2593) : (vector<1xf32>) -> i32 loc(#loc20)
    %2595 = "llvm.inline_asm"(%2594, %2491, %2523) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2596 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2597 = "llvm.bitcast"(%2508) : (f32) -> f32 loc(#loc20)
    %2598 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2599 = "llvm.insertelement"(%2596, %2597, %2598) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2600 = "llvm.bitcast"(%2599) : (vector<1xf32>) -> i32 loc(#loc20)
    %2601 = "llvm.inline_asm"(%2600, %2492, %2524) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2602 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2603 = "llvm.bitcast"(%2509) : (f32) -> f32 loc(#loc20)
    %2604 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2605 = "llvm.insertelement"(%2602, %2603, %2604) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2606 = "llvm.bitcast"(%2605) : (vector<1xf32>) -> i32 loc(#loc20)
    %2607 = "llvm.inline_asm"(%2606, %2493, %2525) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2608 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2609 = "llvm.bitcast"(%2510) : (f32) -> f32 loc(#loc20)
    %2610 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2611 = "llvm.insertelement"(%2608, %2609, %2610) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2612 = "llvm.bitcast"(%2611) : (vector<1xf32>) -> i32 loc(#loc20)
    %2613 = "llvm.inline_asm"(%2612, %2494, %2526) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2614 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2615 = "llvm.bitcast"(%2511) : (f32) -> f32 loc(#loc20)
    %2616 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2617 = "llvm.insertelement"(%2614, %2615, %2616) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2618 = "llvm.bitcast"(%2617) : (vector<1xf32>) -> i32 loc(#loc20)
    %2619 = "llvm.inline_asm"(%2618, %2495, %2527) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2620 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2621 = "llvm.bitcast"(%2512) : (f32) -> f32 loc(#loc20)
    %2622 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2623 = "llvm.insertelement"(%2620, %2621, %2622) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2624 = "llvm.bitcast"(%2623) : (vector<1xf32>) -> i32 loc(#loc20)
    %2625 = "llvm.inline_asm"(%2624, %2496, %2528) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    %2626 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc20)
    %2627 = "llvm.bitcast"(%2513) : (f32) -> f32 loc(#loc20)
    %2628 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc20)
    %2629 = "llvm.insertelement"(%2626, %2627, %2628) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc20)
    %2630 = "llvm.bitcast"(%2629) : (vector<1xf32>) -> i32 loc(#loc20)
    %2631 = "llvm.inline_asm"(%2630, %2497, %2529) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc20)
    "llvm.return"() : () -> () loc(#loc21)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc21 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "llvm.fmul"(%161, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %170 = "llvm.fmul"(%162, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %171 = "llvm.fmul"(%163, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %172 = "llvm.fmul"(%164, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %173 = "llvm.fmul"(%165, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %174 = "llvm.fmul"(%166, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %175 = "llvm.fmul"(%167, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %176 = "llvm.fmul"(%168, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %177 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc10)
    %178 = "llvm.urem"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %179 = "llvm.udiv"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %180 = "llvm.and"(%178, %22) : (i32, i32) -> i32 loc(#loc10)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %182 = "llvm.select"(%181, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %183 = "llvm.xor"(%23, %182) : (i32, i32) -> i32 loc(#loc10)
    %184 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %186 = "llvm.select"(%185, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc10)
    %188 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %190 = "llvm.select"(%189, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc10)
    %192 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %194 = "llvm.select"(%193, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc10)
    %196 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %198 = "llvm.select"(%197, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc10)
    %200 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %202 = "llvm.select"(%201, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %203 = "llvm.xor"(%199, %202) : (i32, i32) -> i32 loc(#loc10)
    %204 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %206 = "llvm.select"(%205, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc10)
    %208 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %210 = "llvm.select"(%209, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %211 = "llvm.xor"(%23, %210) : (i32, i32) -> i32 loc(#loc10)
    %212 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %214 = "llvm.select"(%213, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc10)
    %216 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %218 = "llvm.select"(%217, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc10)
    %220 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %222 = "llvm.select"(%221, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc10)
    %224 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %225 = "llvm.icmp"(%224, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %226 = "llvm.select"(%225, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %227 = "llvm.xor"(%223, %226) : (i32, i32) -> i32 loc(#loc10)
    %228 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %229 = "llvm.icmp"(%228, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %230 = "llvm.select"(%229, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %231 = "llvm.xor"(%227, %230) : (i32, i32) -> i32 loc(#loc10)
    %232 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %233 = "llvm.lshr"(%232, %23) : (i32, i32) -> i32 loc(#loc10)
    %234 = "llvm.shl"(%233, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %235 = "llvm.add"(%234, %232) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %236 = "llvm.getelementptr"(%9, %235) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %237 = "llvm.insertelement"(%8, %169, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %238 = "llvm.extractelement"(%237, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %239 = "llvm.bitcast"(%238) : (f32) -> i32 loc(#loc10)
    %240 = "llvm.insertelement"(%6, %239, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %241 = "llvm.inline_asm"(%236, %240, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %242 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %243 = "llvm.lshr"(%242, %23) : (i32, i32) -> i32 loc(#loc10)
    %244 = "llvm.shl"(%243, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %245 = "llvm.add"(%244, %242) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %246 = "llvm.getelementptr"(%9, %245) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %247 = "llvm.insertelement"(%8, %170, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %248 = "llvm.extractelement"(%247, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %249 = "llvm.bitcast"(%248) : (f32) -> i32 loc(#loc10)
    %250 = "llvm.insertelement"(%6, %249, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %251 = "llvm.inline_asm"(%246, %250, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %252 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %253 = "llvm.lshr"(%252, %23) : (i32, i32) -> i32 loc(#loc10)
    %254 = "llvm.shl"(%253, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %255 = "llvm.add"(%254, %252) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %256 = "llvm.getelementptr"(%9, %255) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %257 = "llvm.insertelement"(%8, %171, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %258 = "llvm.extractelement"(%257, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %259 = "llvm.bitcast"(%258) : (f32) -> i32 loc(#loc10)
    %260 = "llvm.insertelement"(%6, %259, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %261 = "llvm.inline_asm"(%256, %260, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %262 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %263 = "llvm.lshr"(%262, %23) : (i32, i32) -> i32 loc(#loc10)
    %264 = "llvm.shl"(%263, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %265 = "llvm.add"(%264, %262) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %266 = "llvm.getelementptr"(%9, %265) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %267 = "llvm.insertelement"(%8, %172, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %269 = "llvm.bitcast"(%268) : (f32) -> i32 loc(#loc10)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %271 = "llvm.inline_asm"(%266, %270, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %272 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %273 = "llvm.lshr"(%272, %23) : (i32, i32) -> i32 loc(#loc10)
    %274 = "llvm.shl"(%273, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %275 = "llvm.add"(%274, %272) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %276 = "llvm.getelementptr"(%9, %275) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %277 = "llvm.load"(%276) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %278 = "llvm.insertelement"(%6, %277, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %280 = "llvm.bitcast"(%279) : (i32) -> f32 loc(#loc10)
    %281 = "llvm.insertelement"(%8, %280, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %283 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %284 = "llvm.lshr"(%283, %23) : (i32, i32) -> i32 loc(#loc10)
    %285 = "llvm.shl"(%284, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %286 = "llvm.add"(%285, %283) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %287 = "llvm.getelementptr"(%9, %286) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %288 = "llvm.load"(%287) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %289 = "llvm.insertelement"(%6, %288, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %291 = "llvm.bitcast"(%290) : (i32) -> f32 loc(#loc10)
    %292 = "llvm.insertelement"(%8, %291, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %294 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %295 = "llvm.lshr"(%294, %23) : (i32, i32) -> i32 loc(#loc10)
    %296 = "llvm.shl"(%295, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %297 = "llvm.add"(%296, %294) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %298 = "llvm.getelementptr"(%9, %297) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %299 = "llvm.load"(%298) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %300 = "llvm.insertelement"(%6, %299, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %301 = "llvm.extractelement"(%300, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %302 = "llvm.bitcast"(%301) : (i32) -> f32 loc(#loc10)
    %303 = "llvm.insertelement"(%8, %302, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %305 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %306 = "llvm.lshr"(%305, %23) : (i32, i32) -> i32 loc(#loc10)
    %307 = "llvm.shl"(%306, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %308 = "llvm.add"(%307, %305) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %309 = "llvm.getelementptr"(%9, %308) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %310 = "llvm.load"(%309) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %311 = "llvm.insertelement"(%6, %310, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %312 = "llvm.extractelement"(%311, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %313 = "llvm.bitcast"(%312) : (i32) -> f32 loc(#loc10)
    %314 = "llvm.insertelement"(%8, %313, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %316 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %317 = "llvm.lshr"(%316, %23) : (i32, i32) -> i32 loc(#loc10)
    %318 = "llvm.shl"(%317, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %319 = "llvm.add"(%318, %316) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %320 = "llvm.getelementptr"(%9, %319) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %321 = "llvm.load"(%320) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %322 = "llvm.insertelement"(%6, %321, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %323 = "llvm.extractelement"(%322, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %324 = "llvm.bitcast"(%323) : (i32) -> f32 loc(#loc10)
    %325 = "llvm.insertelement"(%8, %324, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %327 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %328 = "llvm.lshr"(%327, %23) : (i32, i32) -> i32 loc(#loc10)
    %329 = "llvm.shl"(%328, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %330 = "llvm.add"(%329, %327) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %331 = "llvm.getelementptr"(%9, %330) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %332 = "llvm.load"(%331) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %333 = "llvm.insertelement"(%6, %332, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %335 = "llvm.bitcast"(%334) : (i32) -> f32 loc(#loc10)
    %336 = "llvm.insertelement"(%8, %335, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %338 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %339 = "llvm.lshr"(%338, %23) : (i32, i32) -> i32 loc(#loc10)
    %340 = "llvm.shl"(%339, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %341 = "llvm.add"(%340, %338) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %342 = "llvm.getelementptr"(%9, %341) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %343 = "llvm.load"(%342) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %344 = "llvm.insertelement"(%6, %343, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %345 = "llvm.extractelement"(%344, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %346 = "llvm.bitcast"(%345) : (i32) -> f32 loc(#loc10)
    %347 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %349 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %350 = "llvm.lshr"(%349, %23) : (i32, i32) -> i32 loc(#loc10)
    %351 = "llvm.shl"(%350, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %352 = "llvm.add"(%351, %349) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %353 = "llvm.getelementptr"(%9, %352) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %354 = "llvm.load"(%353) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %355 = "llvm.insertelement"(%6, %354, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %356 = "llvm.extractelement"(%355, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %357 = "llvm.bitcast"(%356) : (i32) -> f32 loc(#loc10)
    %358 = "llvm.insertelement"(%8, %357, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %359 = "llvm.extractelement"(%358, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %360 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.lshr"(%360, %23) : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.shl"(%361, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%362, %360) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.getelementptr"(%9, %363) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %365 = "llvm.insertelement"(%8, %173, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %366 = "llvm.extractelement"(%365, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %367 = "llvm.bitcast"(%366) : (f32) -> i32 loc(#loc10)
    %368 = "llvm.insertelement"(%6, %367, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %369 = "llvm.inline_asm"(%364, %368, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %370 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %371 = "llvm.lshr"(%370, %23) : (i32, i32) -> i32 loc(#loc10)
    %372 = "llvm.shl"(%371, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %373 = "llvm.add"(%372, %370) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %374 = "llvm.getelementptr"(%9, %373) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %375 = "llvm.insertelement"(%8, %174, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %376 = "llvm.extractelement"(%375, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %377 = "llvm.bitcast"(%376) : (f32) -> i32 loc(#loc10)
    %378 = "llvm.insertelement"(%6, %377, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %379 = "llvm.inline_asm"(%374, %378, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %380 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %381 = "llvm.lshr"(%380, %23) : (i32, i32) -> i32 loc(#loc10)
    %382 = "llvm.shl"(%381, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %383 = "llvm.add"(%382, %380) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %384 = "llvm.getelementptr"(%9, %383) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %385 = "llvm.insertelement"(%8, %175, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %386 = "llvm.extractelement"(%385, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %387 = "llvm.bitcast"(%386) : (f32) -> i32 loc(#loc10)
    %388 = "llvm.insertelement"(%6, %387, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %389 = "llvm.inline_asm"(%384, %388, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %390 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %391 = "llvm.lshr"(%390, %23) : (i32, i32) -> i32 loc(#loc10)
    %392 = "llvm.shl"(%391, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %395 = "llvm.insertelement"(%8, %176, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %396 = "llvm.extractelement"(%395, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %397 = "llvm.bitcast"(%396) : (f32) -> i32 loc(#loc10)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %399 = "llvm.inline_asm"(%394, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %400 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %401 = "llvm.lshr"(%400, %23) : (i32, i32) -> i32 loc(#loc10)
    %402 = "llvm.shl"(%401, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %403 = "llvm.add"(%402, %400) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %404 = "llvm.getelementptr"(%9, %403) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %405 = "llvm.load"(%404) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %406 = "llvm.insertelement"(%6, %405, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %407 = "llvm.extractelement"(%406, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %408 = "llvm.bitcast"(%407) : (i32) -> f32 loc(#loc10)
    %409 = "llvm.insertelement"(%8, %408, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %411 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %412 = "llvm.lshr"(%411, %23) : (i32, i32) -> i32 loc(#loc10)
    %413 = "llvm.shl"(%412, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %414 = "llvm.add"(%413, %411) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %415 = "llvm.getelementptr"(%9, %414) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %416 = "llvm.load"(%415) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %417 = "llvm.insertelement"(%6, %416, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %418 = "llvm.extractelement"(%417, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %419 = "llvm.bitcast"(%418) : (i32) -> f32 loc(#loc10)
    %420 = "llvm.insertelement"(%8, %419, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %422 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %423 = "llvm.lshr"(%422, %23) : (i32, i32) -> i32 loc(#loc10)
    %424 = "llvm.shl"(%423, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %425 = "llvm.add"(%424, %422) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %426 = "llvm.getelementptr"(%9, %425) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %427 = "llvm.load"(%426) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %428 = "llvm.insertelement"(%6, %427, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %429 = "llvm.extractelement"(%428, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %430 = "llvm.bitcast"(%429) : (i32) -> f32 loc(#loc10)
    %431 = "llvm.insertelement"(%8, %430, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %433 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %434 = "llvm.lshr"(%433, %23) : (i32, i32) -> i32 loc(#loc10)
    %435 = "llvm.shl"(%434, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %436 = "llvm.add"(%435, %433) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %437 = "llvm.getelementptr"(%9, %436) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %438 = "llvm.load"(%437) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %439 = "llvm.insertelement"(%6, %438, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %440 = "llvm.extractelement"(%439, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %441 = "llvm.bitcast"(%440) : (i32) -> f32 loc(#loc10)
    %442 = "llvm.insertelement"(%8, %441, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %444 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %445 = "llvm.lshr"(%444, %23) : (i32, i32) -> i32 loc(#loc10)
    %446 = "llvm.shl"(%445, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %447 = "llvm.add"(%446, %444) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %448 = "llvm.getelementptr"(%9, %447) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %449 = "llvm.load"(%448) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %450 = "llvm.insertelement"(%6, %449, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %451 = "llvm.extractelement"(%450, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %452 = "llvm.bitcast"(%451) : (i32) -> f32 loc(#loc10)
    %453 = "llvm.insertelement"(%8, %452, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %455 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %456 = "llvm.lshr"(%455, %23) : (i32, i32) -> i32 loc(#loc10)
    %457 = "llvm.shl"(%456, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %458 = "llvm.add"(%457, %455) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %459 = "llvm.getelementptr"(%9, %458) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %460 = "llvm.load"(%459) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %461 = "llvm.insertelement"(%6, %460, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %462 = "llvm.extractelement"(%461, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %463 = "llvm.bitcast"(%462) : (i32) -> f32 loc(#loc10)
    %464 = "llvm.insertelement"(%8, %463, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %466 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %467 = "llvm.lshr"(%466, %23) : (i32, i32) -> i32 loc(#loc10)
    %468 = "llvm.shl"(%467, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %469 = "llvm.add"(%468, %466) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %470 = "llvm.getelementptr"(%9, %469) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %471 = "llvm.load"(%470) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %472 = "llvm.insertelement"(%6, %471, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %473 = "llvm.extractelement"(%472, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %474 = "llvm.bitcast"(%473) : (i32) -> f32 loc(#loc10)
    %475 = "llvm.insertelement"(%8, %474, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %477 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %478 = "llvm.lshr"(%477, %23) : (i32, i32) -> i32 loc(#loc10)
    %479 = "llvm.shl"(%478, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %480 = "llvm.add"(%479, %477) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.getelementptr"(%9, %480) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %482 = "llvm.load"(%481) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %483 = "llvm.insertelement"(%6, %482, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %484 = "llvm.extractelement"(%483, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %485 = "llvm.bitcast"(%484) : (i32) -> f32 loc(#loc10)
    %486 = "llvm.insertelement"(%8, %485, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %488 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %490 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %491 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %492 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %493 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %494 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %495 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %496 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %497 = "llvm.icmp"(%488, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %498 = "llvm.icmp"(%489, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %499 = "llvm.icmp"(%490, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %500 = "llvm.icmp"(%491, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %501 = "llvm.icmp"(%492, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.icmp"(%493, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %503 = "llvm.icmp"(%494, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %504 = "llvm.icmp"(%495, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %505 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %506 = "llvm.urem"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %507 = "llvm.udiv"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %508 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %510 = "llvm.select"(%509, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %511 = "llvm.xor"(%23, %510) : (i32, i32) -> i32 loc(#loc14)
    %512 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %514 = "llvm.select"(%513, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc14)
    %516 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %518 = "llvm.select"(%517, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc14)
    %520 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %522 = "llvm.select"(%521, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc14)
    %524 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %526 = "llvm.select"(%525, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc14)
    %528 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %530 = "llvm.select"(%529, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %531 = "llvm.xor"(%527, %530) : (i32, i32) -> i32 loc(#loc14)
    %532 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %534 = "llvm.select"(%533, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc14)
    %536 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %538 = "llvm.select"(%537, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %539 = "llvm.xor"(%23, %538) : (i32, i32) -> i32 loc(#loc14)
    %540 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %542 = "llvm.select"(%541, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc14)
    %544 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %546 = "llvm.select"(%545, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc14)
    %548 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %550 = "llvm.select"(%549, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc14)
    %552 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %554 = "llvm.select"(%553, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc14)
    %556 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %557 = "llvm.icmp"(%556, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %558 = "llvm.select"(%557, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %559 = "llvm.xor"(%555, %558) : (i32, i32) -> i32 loc(#loc14)
    %560 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %561 = "llvm.icmp"(%560, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %562 = "llvm.select"(%561, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %563 = "llvm.xor"(%559, %562) : (i32, i32) -> i32 loc(#loc14)
    %564 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %565 = "llvm.lshr"(%564, %22) : (i32, i32) -> i32 loc(#loc14)
    %566 = "llvm.shl"(%565, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %567 = "llvm.add"(%566, %564) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %568 = "llvm.getelementptr"(%9, %567) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %569 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %570 = "llvm.insertelement"(%569, %488, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %571 = "llvm.extractelement"(%570, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %572 = "llvm.extractelement"(%570, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %573 = "llvm.inline_asm"(%568, %571, %572, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %574 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc14)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %582 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc14)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %587 = "llvm.load"(%586) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %588 = "llvm.insertelement"(%6, %587, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %590 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %591 = "llvm.lshr"(%590, %22) : (i32, i32) -> i32 loc(#loc14)
    %592 = "llvm.shl"(%591, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %593 = "llvm.add"(%592, %590) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %594 = "llvm.getelementptr"(%9, %593) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %595 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %596 = "llvm.insertelement"(%595, %489, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %598 = "llvm.extractelement"(%596, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %599 = "llvm.inline_asm"(%594, %597, %598, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %600 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc14)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %608 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc14)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %613 = "llvm.load"(%612) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %614 = "llvm.insertelement"(%6, %613, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %615 = "llvm.extractelement"(%614, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %616 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %617 = "llvm.lshr"(%616, %22) : (i32, i32) -> i32 loc(#loc14)
    %618 = "llvm.shl"(%617, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %619 = "llvm.add"(%618, %616) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %620 = "llvm.getelementptr"(%9, %619) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %621 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %622 = "llvm.insertelement"(%621, %490, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %623 = "llvm.extractelement"(%622, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %624 = "llvm.extractelement"(%622, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %625 = "llvm.inline_asm"(%620, %623, %624, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %626 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc14)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %634 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc14)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %639 = "llvm.load"(%638) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %640 = "llvm.insertelement"(%6, %639, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %641 = "llvm.extractelement"(%640, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %642 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %643 = "llvm.lshr"(%642, %22) : (i32, i32) -> i32 loc(#loc14)
    %644 = "llvm.shl"(%643, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %645 = "llvm.add"(%644, %642) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %646 = "llvm.getelementptr"(%9, %645) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %647 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %648 = "llvm.insertelement"(%647, %491, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %649 = "llvm.extractelement"(%648, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %650 = "llvm.extractelement"(%648, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %651 = "llvm.inline_asm"(%646, %649, %650, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %652 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc14)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %660 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc14)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %665 = "llvm.load"(%664) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %666 = "llvm.insertelement"(%6, %665, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %667 = "llvm.extractelement"(%666, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %668 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %669 = "llvm.lshr"(%668, %22) : (i32, i32) -> i32 loc(#loc14)
    %670 = "llvm.shl"(%669, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %671 = "llvm.add"(%670, %668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %672 = "llvm.getelementptr"(%9, %671) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %673 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %674 = "llvm.insertelement"(%673, %492, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %675 = "llvm.extractelement"(%674, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %676 = "llvm.extractelement"(%674, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %677 = "llvm.inline_asm"(%672, %675, %676, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %678 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc14)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %686 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc14)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %691 = "llvm.load"(%690) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %692 = "llvm.insertelement"(%6, %691, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %693 = "llvm.extractelement"(%692, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %694 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %695 = "llvm.lshr"(%694, %22) : (i32, i32) -> i32 loc(#loc14)
    %696 = "llvm.shl"(%695, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %697 = "llvm.add"(%696, %694) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %698 = "llvm.getelementptr"(%9, %697) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %699 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %700 = "llvm.insertelement"(%699, %493, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %701 = "llvm.extractelement"(%700, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %702 = "llvm.extractelement"(%700, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %703 = "llvm.inline_asm"(%698, %701, %702, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %704 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc14)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %712 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc14)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %717 = "llvm.load"(%716) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %718 = "llvm.insertelement"(%6, %717, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %719 = "llvm.extractelement"(%718, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %720 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %721 = "llvm.lshr"(%720, %22) : (i32, i32) -> i32 loc(#loc14)
    %722 = "llvm.shl"(%721, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %723 = "llvm.add"(%722, %720) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %724 = "llvm.getelementptr"(%9, %723) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %725 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %726 = "llvm.insertelement"(%725, %494, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %727 = "llvm.extractelement"(%726, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %728 = "llvm.extractelement"(%726, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %729 = "llvm.inline_asm"(%724, %727, %728, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %730 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc14)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %738 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc14)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %743 = "llvm.load"(%742) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %744 = "llvm.insertelement"(%6, %743, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %745 = "llvm.extractelement"(%744, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %746 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %747 = "llvm.lshr"(%746, %22) : (i32, i32) -> i32 loc(#loc14)
    %748 = "llvm.shl"(%747, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %749 = "llvm.add"(%748, %746) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %750 = "llvm.getelementptr"(%9, %749) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %751 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %752 = "llvm.insertelement"(%751, %495, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %753 = "llvm.extractelement"(%752, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %754 = "llvm.extractelement"(%752, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %755 = "llvm.inline_asm"(%750, %753, %754, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %756 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc14)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %764 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %765 = "llvm.lshr"(%764, %22) : (i32, i32) -> i32 loc(#loc14)
    %766 = "llvm.shl"(%765, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %767 = "llvm.add"(%766, %764) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %768 = "llvm.getelementptr"(%9, %767) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %769 = "llvm.load"(%768) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %770 = "llvm.insertelement"(%6, %769, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %771 = "llvm.extractelement"(%770, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %772 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc15)
    %773 = "llvm.zext"(%497) : (i1) -> i8 loc(#loc15)
    %774 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc15)
    %775 = "llvm.zext"(%498) : (i1) -> i8 loc(#loc15)
    %776 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc15)
    %777 = "llvm.zext"(%499) : (i1) -> i8 loc(#loc15)
    %778 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc15)
    %779 = "llvm.zext"(%500) : (i1) -> i8 loc(#loc15)
    %780 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc15)
    %781 = "llvm.zext"(%501) : (i1) -> i8 loc(#loc15)
    %782 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc15)
    %783 = "llvm.zext"(%502) : (i1) -> i8 loc(#loc15)
    %784 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc15)
    %785 = "llvm.zext"(%503) : (i1) -> i8 loc(#loc15)
    %786 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc15)
    %787 = "llvm.zext"(%504) : (i1) -> i8 loc(#loc15)
    %788 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc15)
    %789 = "llvm.urem"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %790 = "llvm.udiv"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %791 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %793 = "llvm.select"(%792, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %794 = "llvm.xor"(%23, %793) : (i32, i32) -> i32 loc(#loc15)
    %795 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %797 = "llvm.select"(%796, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc15)
    %799 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %801 = "llvm.select"(%800, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc15)
    %803 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %805 = "llvm.select"(%804, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc15)
    %807 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %809 = "llvm.select"(%808, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc15)
    %811 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %813 = "llvm.select"(%812, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %814 = "llvm.xor"(%810, %813) : (i32, i32) -> i32 loc(#loc15)
    %815 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %817 = "llvm.select"(%816, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc15)
    %819 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %821 = "llvm.select"(%820, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %822 = "llvm.xor"(%23, %821) : (i32, i32) -> i32 loc(#loc15)
    %823 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %825 = "llvm.select"(%824, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc15)
    %827 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %829 = "llvm.select"(%828, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc15)
    %831 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %833 = "llvm.select"(%832, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc15)
    %835 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %837 = "llvm.select"(%836, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc15)
    %839 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %840 = "llvm.icmp"(%839, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %841 = "llvm.select"(%840, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %842 = "llvm.xor"(%838, %841) : (i32, i32) -> i32 loc(#loc15)
    %843 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %844 = "llvm.icmp"(%843, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %845 = "llvm.select"(%844, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %846 = "llvm.xor"(%842, %845) : (i32, i32) -> i32 loc(#loc15)
    %847 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %848 = "llvm.lshr"(%847, %22) : (i32, i32) -> i32 loc(#loc15)
    %849 = "llvm.shl"(%848, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %850 = "llvm.add"(%849, %847) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %851 = "llvm.getelementptr"(%9, %850) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %852 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %853 = "llvm.insertelement"(%852, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %854 = "llvm.extractelement"(%853, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %855 = "llvm.extractelement"(%853, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %856 = "llvm.inline_asm"(%851, %854, %855, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %857 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc15)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %865 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc15)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %870 = "llvm.load"(%869) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %871 = "llvm.insertelement"(%0, %870, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %872 = "llvm.extractelement"(%871, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %873 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %874 = "llvm.lshr"(%873, %22) : (i32, i32) -> i32 loc(#loc15)
    %875 = "llvm.shl"(%874, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %876 = "llvm.add"(%875, %873) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %877 = "llvm.getelementptr"(%9, %876) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %878 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %879 = "llvm.insertelement"(%878, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %880 = "llvm.extractelement"(%879, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %881 = "llvm.extractelement"(%879, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %882 = "llvm.inline_asm"(%877, %880, %881, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %883 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc15)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %891 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc15)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %896 = "llvm.load"(%895) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %897 = "llvm.insertelement"(%0, %896, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %898 = "llvm.extractelement"(%897, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %899 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %900 = "llvm.lshr"(%899, %22) : (i32, i32) -> i32 loc(#loc15)
    %901 = "llvm.shl"(%900, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %902 = "llvm.add"(%901, %899) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %903 = "llvm.getelementptr"(%9, %902) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %904 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %905 = "llvm.insertelement"(%904, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %906 = "llvm.extractelement"(%905, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %907 = "llvm.extractelement"(%905, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %908 = "llvm.inline_asm"(%903, %906, %907, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %909 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc15)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %917 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc15)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %922 = "llvm.load"(%921) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %923 = "llvm.insertelement"(%0, %922, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %924 = "llvm.extractelement"(%923, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %925 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %926 = "llvm.lshr"(%925, %22) : (i32, i32) -> i32 loc(#loc15)
    %927 = "llvm.shl"(%926, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %928 = "llvm.add"(%927, %925) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %929 = "llvm.getelementptr"(%9, %928) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %930 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %931 = "llvm.insertelement"(%930, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %932 = "llvm.extractelement"(%931, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %933 = "llvm.extractelement"(%931, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %934 = "llvm.inline_asm"(%929, %932, %933, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %935 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc15)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %943 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc15)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %948 = "llvm.load"(%947) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %949 = "llvm.insertelement"(%0, %948, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %950 = "llvm.extractelement"(%949, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %951 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %952 = "llvm.lshr"(%951, %22) : (i32, i32) -> i32 loc(#loc15)
    %953 = "llvm.shl"(%952, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %954 = "llvm.add"(%953, %951) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %955 = "llvm.getelementptr"(%9, %954) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %956 = "llvm.insertelement"(%1, %780, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %957 = "llvm.insertelement"(%956, %781, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %958 = "llvm.extractelement"(%957, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %959 = "llvm.extractelement"(%957, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %960 = "llvm.inline_asm"(%955, %958, %959, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %961 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc15)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %969 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc15)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %974 = "llvm.load"(%973) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %975 = "llvm.insertelement"(%0, %974, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %976 = "llvm.extractelement"(%975, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %977 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %978 = "llvm.lshr"(%977, %22) : (i32, i32) -> i32 loc(#loc15)
    %979 = "llvm.shl"(%978, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %980 = "llvm.add"(%979, %977) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %981 = "llvm.getelementptr"(%9, %980) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %982 = "llvm.insertelement"(%1, %782, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %983 = "llvm.insertelement"(%982, %783, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %984 = "llvm.extractelement"(%983, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %985 = "llvm.extractelement"(%983, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %986 = "llvm.inline_asm"(%981, %984, %985, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %987 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc15)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %995 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc15)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1000 = "llvm.load"(%999) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1001 = "llvm.insertelement"(%0, %1000, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1003 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1004 = "llvm.lshr"(%1003, %22) : (i32, i32) -> i32 loc(#loc15)
    %1005 = "llvm.shl"(%1004, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1006 = "llvm.add"(%1005, %1003) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1007 = "llvm.getelementptr"(%9, %1006) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1008 = "llvm.insertelement"(%1, %784, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1009 = "llvm.insertelement"(%1008, %785, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1010 = "llvm.extractelement"(%1009, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1011 = "llvm.extractelement"(%1009, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1012 = "llvm.inline_asm"(%1007, %1010, %1011, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1013 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc15)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1021 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc15)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1026 = "llvm.load"(%1025) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1027 = "llvm.insertelement"(%0, %1026, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1029 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1030 = "llvm.lshr"(%1029, %22) : (i32, i32) -> i32 loc(#loc15)
    %1031 = "llvm.shl"(%1030, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1032 = "llvm.add"(%1031, %1029) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1033 = "llvm.getelementptr"(%9, %1032) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1034 = "llvm.insertelement"(%1, %786, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1035 = "llvm.insertelement"(%1034, %787, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1036 = "llvm.extractelement"(%1035, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1037 = "llvm.extractelement"(%1035, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1038 = "llvm.inline_asm"(%1033, %1036, %1037, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1039 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc15)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1047 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1048 = "llvm.lshr"(%1047, %22) : (i32, i32) -> i32 loc(#loc15)
    %1049 = "llvm.shl"(%1048, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1050 = "llvm.add"(%1049, %1047) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1051 = "llvm.getelementptr"(%9, %1050) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1052 = "llvm.load"(%1051) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1053 = "llvm.insertelement"(%0, %1052, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1054 = "llvm.extractelement"(%1053, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1055 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1056 = "llvm.trunc"(%872) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1057 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1058 = "llvm.trunc"(%898) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1059 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1060 = "llvm.trunc"(%924) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1061 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1062 = "llvm.trunc"(%950) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1063 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1064 = "llvm.trunc"(%976) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1065 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1066 = "llvm.trunc"(%1002) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1067 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1068 = "llvm.trunc"(%1028) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1069 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1070 = "llvm.trunc"(%1054) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1072 = "llvm.getelementptr"(%arg1, %589) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1073 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1074 = "llvm.getelementptr"(%arg1, %615) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1075 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1076 = "llvm.getelementptr"(%arg1, %641) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1077 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1078 = "llvm.getelementptr"(%arg1, %667) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1079 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1080 = "llvm.getelementptr"(%arg1, %693) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1081 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1082 = "llvm.getelementptr"(%arg1, %719) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1083 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1084 = "llvm.getelementptr"(%arg1, %745) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1085 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1086 = "llvm.getelementptr"(%arg1, %771) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1087 = "llvm.insertelement"(%8, %282, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1088 = "llvm.bitcast"(%1087) : (vector<1xf32>) -> i32 loc(#loc17)
    %1089 = "llvm.inline_asm"(%1088, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1090 = "llvm.insertelement"(%8, %293, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1091 = "llvm.bitcast"(%1090) : (vector<1xf32>) -> i32 loc(#loc17)
    %1092 = "llvm.inline_asm"(%1091, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1093 = "llvm.insertelement"(%8, %304, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1094 = "llvm.bitcast"(%1093) : (vector<1xf32>) -> i32 loc(#loc17)
    %1095 = "llvm.inline_asm"(%1094, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1096 = "llvm.insertelement"(%8, %315, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1097 = "llvm.bitcast"(%1096) : (vector<1xf32>) -> i32 loc(#loc17)
    %1098 = "llvm.inline_asm"(%1097, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1099 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1100 = "llvm.bitcast"(%1099) : (vector<1xf32>) -> i32 loc(#loc17)
    %1101 = "llvm.inline_asm"(%1100, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1102 = "llvm.insertelement"(%8, %337, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1103 = "llvm.bitcast"(%1102) : (vector<1xf32>) -> i32 loc(#loc17)
    %1104 = "llvm.inline_asm"(%1103, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1105 = "llvm.insertelement"(%8, %348, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1106 = "llvm.bitcast"(%1105) : (vector<1xf32>) -> i32 loc(#loc17)
    %1107 = "llvm.inline_asm"(%1106, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1108 = "llvm.insertelement"(%8, %359, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1109 = "llvm.bitcast"(%1108) : (vector<1xf32>) -> i32 loc(#loc17)
    %1110 = "llvm.inline_asm"(%1109, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1111 = "llvm.insertelement"(%8, %410, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1112 = "llvm.bitcast"(%1111) : (vector<1xf32>) -> i32 loc(#loc17)
    %1113 = "llvm.inline_asm"(%1112, %1079, %1063) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1114 = "llvm.insertelement"(%8, %421, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1115 = "llvm.bitcast"(%1114) : (vector<1xf32>) -> i32 loc(#loc17)
    %1116 = "llvm.inline_asm"(%1115, %1080, %1064) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1117 = "llvm.insertelement"(%8, %432, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1118 = "llvm.bitcast"(%1117) : (vector<1xf32>) -> i32 loc(#loc17)
    %1119 = "llvm.inline_asm"(%1118, %1081, %1065) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1120 = "llvm.insertelement"(%8, %443, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1121 = "llvm.bitcast"(%1120) : (vector<1xf32>) -> i32 loc(#loc17)
    %1122 = "llvm.inline_asm"(%1121, %1082, %1066) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1123 = "llvm.insertelement"(%8, %454, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1124 = "llvm.bitcast"(%1123) : (vector<1xf32>) -> i32 loc(#loc17)
    %1125 = "llvm.inline_asm"(%1124, %1083, %1067) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1126 = "llvm.insertelement"(%8, %465, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1127 = "llvm.bitcast"(%1126) : (vector<1xf32>) -> i32 loc(#loc17)
    %1128 = "llvm.inline_asm"(%1127, %1084, %1068) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1129 = "llvm.insertelement"(%8, %476, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1130 = "llvm.bitcast"(%1129) : (vector<1xf32>) -> i32 loc(#loc17)
    %1131 = "llvm.inline_asm"(%1130, %1085, %1069) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1132 = "llvm.insertelement"(%8, %487, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1133 = "llvm.bitcast"(%1132) : (vector<1xf32>) -> i32 loc(#loc17)
    %1134 = "llvm.inline_asm"(%1133, %1086, %1070) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    "llvm.return"() : () -> () loc(#loc18)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "llvm.fmul"(%161, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %170 = "llvm.fmul"(%162, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %171 = "llvm.fmul"(%163, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %172 = "llvm.fmul"(%164, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %173 = "llvm.fmul"(%165, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %174 = "llvm.fmul"(%166, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %175 = "llvm.fmul"(%167, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %176 = "llvm.fmul"(%168, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %177 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc10)
    %178 = "llvm.urem"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %179 = "llvm.udiv"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %180 = "llvm.and"(%178, %22) : (i32, i32) -> i32 loc(#loc10)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %182 = "llvm.select"(%181, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %183 = "llvm.xor"(%23, %182) : (i32, i32) -> i32 loc(#loc10)
    %184 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %186 = "llvm.select"(%185, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc10)
    %188 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %190 = "llvm.select"(%189, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc10)
    %192 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %194 = "llvm.select"(%193, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc10)
    %196 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %198 = "llvm.select"(%197, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc10)
    %200 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %202 = "llvm.select"(%201, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %203 = "llvm.xor"(%199, %202) : (i32, i32) -> i32 loc(#loc10)
    %204 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %206 = "llvm.select"(%205, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc10)
    %208 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %210 = "llvm.select"(%209, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %211 = "llvm.xor"(%23, %210) : (i32, i32) -> i32 loc(#loc10)
    %212 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %214 = "llvm.select"(%213, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc10)
    %216 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %218 = "llvm.select"(%217, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc10)
    %220 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %222 = "llvm.select"(%221, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc10)
    %224 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %225 = "llvm.icmp"(%224, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %226 = "llvm.select"(%225, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %227 = "llvm.xor"(%223, %226) : (i32, i32) -> i32 loc(#loc10)
    %228 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %229 = "llvm.icmp"(%228, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %230 = "llvm.select"(%229, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %231 = "llvm.xor"(%227, %230) : (i32, i32) -> i32 loc(#loc10)
    %232 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %233 = "llvm.lshr"(%232, %23) : (i32, i32) -> i32 loc(#loc10)
    %234 = "llvm.shl"(%233, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %235 = "llvm.add"(%234, %232) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %236 = "llvm.getelementptr"(%9, %235) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %237 = "llvm.insertelement"(%8, %169, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %238 = "llvm.extractelement"(%237, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %239 = "llvm.bitcast"(%238) : (f32) -> i32 loc(#loc10)
    %240 = "llvm.insertelement"(%6, %239, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %241 = "llvm.inline_asm"(%236, %240, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %242 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %243 = "llvm.lshr"(%242, %23) : (i32, i32) -> i32 loc(#loc10)
    %244 = "llvm.shl"(%243, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %245 = "llvm.add"(%244, %242) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %246 = "llvm.getelementptr"(%9, %245) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %247 = "llvm.insertelement"(%8, %170, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %248 = "llvm.extractelement"(%247, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %249 = "llvm.bitcast"(%248) : (f32) -> i32 loc(#loc10)
    %250 = "llvm.insertelement"(%6, %249, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %251 = "llvm.inline_asm"(%246, %250, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %252 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %253 = "llvm.lshr"(%252, %23) : (i32, i32) -> i32 loc(#loc10)
    %254 = "llvm.shl"(%253, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %255 = "llvm.add"(%254, %252) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %256 = "llvm.getelementptr"(%9, %255) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %257 = "llvm.insertelement"(%8, %171, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %258 = "llvm.extractelement"(%257, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %259 = "llvm.bitcast"(%258) : (f32) -> i32 loc(#loc10)
    %260 = "llvm.insertelement"(%6, %259, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %261 = "llvm.inline_asm"(%256, %260, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %262 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %263 = "llvm.lshr"(%262, %23) : (i32, i32) -> i32 loc(#loc10)
    %264 = "llvm.shl"(%263, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %265 = "llvm.add"(%264, %262) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %266 = "llvm.getelementptr"(%9, %265) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %267 = "llvm.insertelement"(%8, %172, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %269 = "llvm.bitcast"(%268) : (f32) -> i32 loc(#loc10)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %271 = "llvm.inline_asm"(%266, %270, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %272 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %273 = "llvm.lshr"(%272, %23) : (i32, i32) -> i32 loc(#loc10)
    %274 = "llvm.shl"(%273, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %275 = "llvm.add"(%274, %272) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %276 = "llvm.getelementptr"(%9, %275) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %277 = "llvm.load"(%276) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %278 = "llvm.insertelement"(%6, %277, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %280 = "llvm.bitcast"(%279) : (i32) -> f32 loc(#loc10)
    %281 = "llvm.insertelement"(%8, %280, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %283 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %284 = "llvm.lshr"(%283, %23) : (i32, i32) -> i32 loc(#loc10)
    %285 = "llvm.shl"(%284, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %286 = "llvm.add"(%285, %283) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %287 = "llvm.getelementptr"(%9, %286) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %288 = "llvm.load"(%287) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %289 = "llvm.insertelement"(%6, %288, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %291 = "llvm.bitcast"(%290) : (i32) -> f32 loc(#loc10)
    %292 = "llvm.insertelement"(%8, %291, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %294 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %295 = "llvm.lshr"(%294, %23) : (i32, i32) -> i32 loc(#loc10)
    %296 = "llvm.shl"(%295, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %297 = "llvm.add"(%296, %294) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %298 = "llvm.getelementptr"(%9, %297) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %299 = "llvm.load"(%298) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %300 = "llvm.insertelement"(%6, %299, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %301 = "llvm.extractelement"(%300, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %302 = "llvm.bitcast"(%301) : (i32) -> f32 loc(#loc10)
    %303 = "llvm.insertelement"(%8, %302, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %305 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %306 = "llvm.lshr"(%305, %23) : (i32, i32) -> i32 loc(#loc10)
    %307 = "llvm.shl"(%306, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %308 = "llvm.add"(%307, %305) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %309 = "llvm.getelementptr"(%9, %308) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %310 = "llvm.load"(%309) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %311 = "llvm.insertelement"(%6, %310, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %312 = "llvm.extractelement"(%311, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %313 = "llvm.bitcast"(%312) : (i32) -> f32 loc(#loc10)
    %314 = "llvm.insertelement"(%8, %313, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %316 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %317 = "llvm.lshr"(%316, %23) : (i32, i32) -> i32 loc(#loc10)
    %318 = "llvm.shl"(%317, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %319 = "llvm.add"(%318, %316) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %320 = "llvm.getelementptr"(%9, %319) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %321 = "llvm.load"(%320) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %322 = "llvm.insertelement"(%6, %321, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %323 = "llvm.extractelement"(%322, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %324 = "llvm.bitcast"(%323) : (i32) -> f32 loc(#loc10)
    %325 = "llvm.insertelement"(%8, %324, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %327 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %328 = "llvm.lshr"(%327, %23) : (i32, i32) -> i32 loc(#loc10)
    %329 = "llvm.shl"(%328, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %330 = "llvm.add"(%329, %327) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %331 = "llvm.getelementptr"(%9, %330) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %332 = "llvm.load"(%331) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %333 = "llvm.insertelement"(%6, %332, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %335 = "llvm.bitcast"(%334) : (i32) -> f32 loc(#loc10)
    %336 = "llvm.insertelement"(%8, %335, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %338 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %339 = "llvm.lshr"(%338, %23) : (i32, i32) -> i32 loc(#loc10)
    %340 = "llvm.shl"(%339, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %341 = "llvm.add"(%340, %338) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %342 = "llvm.getelementptr"(%9, %341) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %343 = "llvm.load"(%342) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %344 = "llvm.insertelement"(%6, %343, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %345 = "llvm.extractelement"(%344, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %346 = "llvm.bitcast"(%345) : (i32) -> f32 loc(#loc10)
    %347 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %349 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %350 = "llvm.lshr"(%349, %23) : (i32, i32) -> i32 loc(#loc10)
    %351 = "llvm.shl"(%350, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %352 = "llvm.add"(%351, %349) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %353 = "llvm.getelementptr"(%9, %352) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %354 = "llvm.load"(%353) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %355 = "llvm.insertelement"(%6, %354, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %356 = "llvm.extractelement"(%355, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %357 = "llvm.bitcast"(%356) : (i32) -> f32 loc(#loc10)
    %358 = "llvm.insertelement"(%8, %357, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %359 = "llvm.extractelement"(%358, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %360 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.lshr"(%360, %23) : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.shl"(%361, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%362, %360) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.getelementptr"(%9, %363) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %365 = "llvm.insertelement"(%8, %173, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %366 = "llvm.extractelement"(%365, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %367 = "llvm.bitcast"(%366) : (f32) -> i32 loc(#loc10)
    %368 = "llvm.insertelement"(%6, %367, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %369 = "llvm.inline_asm"(%364, %368, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %370 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %371 = "llvm.lshr"(%370, %23) : (i32, i32) -> i32 loc(#loc10)
    %372 = "llvm.shl"(%371, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %373 = "llvm.add"(%372, %370) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %374 = "llvm.getelementptr"(%9, %373) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %375 = "llvm.insertelement"(%8, %174, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %376 = "llvm.extractelement"(%375, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %377 = "llvm.bitcast"(%376) : (f32) -> i32 loc(#loc10)
    %378 = "llvm.insertelement"(%6, %377, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %379 = "llvm.inline_asm"(%374, %378, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %380 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %381 = "llvm.lshr"(%380, %23) : (i32, i32) -> i32 loc(#loc10)
    %382 = "llvm.shl"(%381, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %383 = "llvm.add"(%382, %380) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %384 = "llvm.getelementptr"(%9, %383) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %385 = "llvm.insertelement"(%8, %175, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %386 = "llvm.extractelement"(%385, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %387 = "llvm.bitcast"(%386) : (f32) -> i32 loc(#loc10)
    %388 = "llvm.insertelement"(%6, %387, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %389 = "llvm.inline_asm"(%384, %388, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %390 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %391 = "llvm.lshr"(%390, %23) : (i32, i32) -> i32 loc(#loc10)
    %392 = "llvm.shl"(%391, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %395 = "llvm.insertelement"(%8, %176, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %396 = "llvm.extractelement"(%395, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %397 = "llvm.bitcast"(%396) : (f32) -> i32 loc(#loc10)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %399 = "llvm.inline_asm"(%394, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %400 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %401 = "llvm.lshr"(%400, %23) : (i32, i32) -> i32 loc(#loc10)
    %402 = "llvm.shl"(%401, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %403 = "llvm.add"(%402, %400) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %404 = "llvm.getelementptr"(%9, %403) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %405 = "llvm.load"(%404) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %406 = "llvm.insertelement"(%6, %405, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %407 = "llvm.extractelement"(%406, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %408 = "llvm.bitcast"(%407) : (i32) -> f32 loc(#loc10)
    %409 = "llvm.insertelement"(%8, %408, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %411 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %412 = "llvm.lshr"(%411, %23) : (i32, i32) -> i32 loc(#loc10)
    %413 = "llvm.shl"(%412, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %414 = "llvm.add"(%413, %411) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %415 = "llvm.getelementptr"(%9, %414) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %416 = "llvm.load"(%415) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %417 = "llvm.insertelement"(%6, %416, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %418 = "llvm.extractelement"(%417, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %419 = "llvm.bitcast"(%418) : (i32) -> f32 loc(#loc10)
    %420 = "llvm.insertelement"(%8, %419, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %422 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %423 = "llvm.lshr"(%422, %23) : (i32, i32) -> i32 loc(#loc10)
    %424 = "llvm.shl"(%423, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %425 = "llvm.add"(%424, %422) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %426 = "llvm.getelementptr"(%9, %425) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %427 = "llvm.load"(%426) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %428 = "llvm.insertelement"(%6, %427, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %429 = "llvm.extractelement"(%428, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %430 = "llvm.bitcast"(%429) : (i32) -> f32 loc(#loc10)
    %431 = "llvm.insertelement"(%8, %430, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %433 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %434 = "llvm.lshr"(%433, %23) : (i32, i32) -> i32 loc(#loc10)
    %435 = "llvm.shl"(%434, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %436 = "llvm.add"(%435, %433) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %437 = "llvm.getelementptr"(%9, %436) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %438 = "llvm.load"(%437) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %439 = "llvm.insertelement"(%6, %438, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %440 = "llvm.extractelement"(%439, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %441 = "llvm.bitcast"(%440) : (i32) -> f32 loc(#loc10)
    %442 = "llvm.insertelement"(%8, %441, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %444 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %445 = "llvm.lshr"(%444, %23) : (i32, i32) -> i32 loc(#loc10)
    %446 = "llvm.shl"(%445, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %447 = "llvm.add"(%446, %444) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %448 = "llvm.getelementptr"(%9, %447) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %449 = "llvm.load"(%448) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %450 = "llvm.insertelement"(%6, %449, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %451 = "llvm.extractelement"(%450, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %452 = "llvm.bitcast"(%451) : (i32) -> f32 loc(#loc10)
    %453 = "llvm.insertelement"(%8, %452, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %455 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %456 = "llvm.lshr"(%455, %23) : (i32, i32) -> i32 loc(#loc10)
    %457 = "llvm.shl"(%456, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %458 = "llvm.add"(%457, %455) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %459 = "llvm.getelementptr"(%9, %458) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %460 = "llvm.load"(%459) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %461 = "llvm.insertelement"(%6, %460, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %462 = "llvm.extractelement"(%461, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %463 = "llvm.bitcast"(%462) : (i32) -> f32 loc(#loc10)
    %464 = "llvm.insertelement"(%8, %463, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %466 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %467 = "llvm.lshr"(%466, %23) : (i32, i32) -> i32 loc(#loc10)
    %468 = "llvm.shl"(%467, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %469 = "llvm.add"(%468, %466) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %470 = "llvm.getelementptr"(%9, %469) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %471 = "llvm.load"(%470) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %472 = "llvm.insertelement"(%6, %471, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %473 = "llvm.extractelement"(%472, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %474 = "llvm.bitcast"(%473) : (i32) -> f32 loc(#loc10)
    %475 = "llvm.insertelement"(%8, %474, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %477 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %478 = "llvm.lshr"(%477, %23) : (i32, i32) -> i32 loc(#loc10)
    %479 = "llvm.shl"(%478, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %480 = "llvm.add"(%479, %477) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.getelementptr"(%9, %480) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %482 = "llvm.load"(%481) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %483 = "llvm.insertelement"(%6, %482, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %484 = "llvm.extractelement"(%483, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %485 = "llvm.bitcast"(%484) : (i32) -> f32 loc(#loc10)
    %486 = "llvm.insertelement"(%8, %485, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %488 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %490 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %491 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %492 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %493 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %494 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %495 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %496 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %497 = "llvm.icmp"(%488, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %498 = "llvm.icmp"(%489, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %499 = "llvm.icmp"(%490, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %500 = "llvm.icmp"(%491, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %501 = "llvm.icmp"(%492, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.icmp"(%493, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %503 = "llvm.icmp"(%494, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %504 = "llvm.icmp"(%495, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %505 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %506 = "llvm.urem"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %507 = "llvm.udiv"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %508 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %510 = "llvm.select"(%509, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %511 = "llvm.xor"(%23, %510) : (i32, i32) -> i32 loc(#loc14)
    %512 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %514 = "llvm.select"(%513, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc14)
    %516 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %518 = "llvm.select"(%517, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc14)
    %520 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %522 = "llvm.select"(%521, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc14)
    %524 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %526 = "llvm.select"(%525, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc14)
    %528 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %530 = "llvm.select"(%529, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %531 = "llvm.xor"(%527, %530) : (i32, i32) -> i32 loc(#loc14)
    %532 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %534 = "llvm.select"(%533, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc14)
    %536 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %538 = "llvm.select"(%537, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %539 = "llvm.xor"(%23, %538) : (i32, i32) -> i32 loc(#loc14)
    %540 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %542 = "llvm.select"(%541, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc14)
    %544 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %546 = "llvm.select"(%545, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc14)
    %548 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %550 = "llvm.select"(%549, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc14)
    %552 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %554 = "llvm.select"(%553, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc14)
    %556 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %557 = "llvm.icmp"(%556, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %558 = "llvm.select"(%557, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %559 = "llvm.xor"(%555, %558) : (i32, i32) -> i32 loc(#loc14)
    %560 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %561 = "llvm.icmp"(%560, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %562 = "llvm.select"(%561, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %563 = "llvm.xor"(%559, %562) : (i32, i32) -> i32 loc(#loc14)
    %564 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %565 = "llvm.lshr"(%564, %22) : (i32, i32) -> i32 loc(#loc14)
    %566 = "llvm.shl"(%565, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %567 = "llvm.add"(%566, %564) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %568 = "llvm.getelementptr"(%9, %567) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %569 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %570 = "llvm.insertelement"(%569, %488, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %571 = "llvm.extractelement"(%570, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %572 = "llvm.extractelement"(%570, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %573 = "llvm.inline_asm"(%568, %571, %572, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %574 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc14)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %582 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc14)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %587 = "llvm.load"(%586) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %588 = "llvm.insertelement"(%6, %587, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %590 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %591 = "llvm.lshr"(%590, %22) : (i32, i32) -> i32 loc(#loc14)
    %592 = "llvm.shl"(%591, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %593 = "llvm.add"(%592, %590) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %594 = "llvm.getelementptr"(%9, %593) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %595 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %596 = "llvm.insertelement"(%595, %489, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %598 = "llvm.extractelement"(%596, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %599 = "llvm.inline_asm"(%594, %597, %598, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %600 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc14)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %608 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc14)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %613 = "llvm.load"(%612) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %614 = "llvm.insertelement"(%6, %613, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %615 = "llvm.extractelement"(%614, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %616 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %617 = "llvm.lshr"(%616, %22) : (i32, i32) -> i32 loc(#loc14)
    %618 = "llvm.shl"(%617, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %619 = "llvm.add"(%618, %616) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %620 = "llvm.getelementptr"(%9, %619) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %621 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %622 = "llvm.insertelement"(%621, %490, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %623 = "llvm.extractelement"(%622, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %624 = "llvm.extractelement"(%622, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %625 = "llvm.inline_asm"(%620, %623, %624, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %626 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc14)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %634 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc14)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %639 = "llvm.load"(%638) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %640 = "llvm.insertelement"(%6, %639, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %641 = "llvm.extractelement"(%640, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %642 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %643 = "llvm.lshr"(%642, %22) : (i32, i32) -> i32 loc(#loc14)
    %644 = "llvm.shl"(%643, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %645 = "llvm.add"(%644, %642) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %646 = "llvm.getelementptr"(%9, %645) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %647 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %648 = "llvm.insertelement"(%647, %491, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %649 = "llvm.extractelement"(%648, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %650 = "llvm.extractelement"(%648, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %651 = "llvm.inline_asm"(%646, %649, %650, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %652 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc14)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %660 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc14)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %665 = "llvm.load"(%664) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %666 = "llvm.insertelement"(%6, %665, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %667 = "llvm.extractelement"(%666, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %668 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %669 = "llvm.lshr"(%668, %22) : (i32, i32) -> i32 loc(#loc14)
    %670 = "llvm.shl"(%669, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %671 = "llvm.add"(%670, %668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %672 = "llvm.getelementptr"(%9, %671) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %673 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %674 = "llvm.insertelement"(%673, %492, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %675 = "llvm.extractelement"(%674, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %676 = "llvm.extractelement"(%674, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %677 = "llvm.inline_asm"(%672, %675, %676, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %678 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc14)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %686 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc14)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %691 = "llvm.load"(%690) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %692 = "llvm.insertelement"(%6, %691, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %693 = "llvm.extractelement"(%692, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %694 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %695 = "llvm.lshr"(%694, %22) : (i32, i32) -> i32 loc(#loc14)
    %696 = "llvm.shl"(%695, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %697 = "llvm.add"(%696, %694) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %698 = "llvm.getelementptr"(%9, %697) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %699 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %700 = "llvm.insertelement"(%699, %493, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %701 = "llvm.extractelement"(%700, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %702 = "llvm.extractelement"(%700, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %703 = "llvm.inline_asm"(%698, %701, %702, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %704 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc14)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %712 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc14)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %717 = "llvm.load"(%716) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %718 = "llvm.insertelement"(%6, %717, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %719 = "llvm.extractelement"(%718, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %720 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %721 = "llvm.lshr"(%720, %22) : (i32, i32) -> i32 loc(#loc14)
    %722 = "llvm.shl"(%721, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %723 = "llvm.add"(%722, %720) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %724 = "llvm.getelementptr"(%9, %723) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %725 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %726 = "llvm.insertelement"(%725, %494, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %727 = "llvm.extractelement"(%726, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %728 = "llvm.extractelement"(%726, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %729 = "llvm.inline_asm"(%724, %727, %728, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %730 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc14)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %738 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc14)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %743 = "llvm.load"(%742) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %744 = "llvm.insertelement"(%6, %743, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %745 = "llvm.extractelement"(%744, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %746 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %747 = "llvm.lshr"(%746, %22) : (i32, i32) -> i32 loc(#loc14)
    %748 = "llvm.shl"(%747, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %749 = "llvm.add"(%748, %746) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %750 = "llvm.getelementptr"(%9, %749) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %751 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %752 = "llvm.insertelement"(%751, %495, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %753 = "llvm.extractelement"(%752, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %754 = "llvm.extractelement"(%752, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %755 = "llvm.inline_asm"(%750, %753, %754, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %756 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc14)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %764 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %765 = "llvm.lshr"(%764, %22) : (i32, i32) -> i32 loc(#loc14)
    %766 = "llvm.shl"(%765, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %767 = "llvm.add"(%766, %764) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %768 = "llvm.getelementptr"(%9, %767) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %769 = "llvm.load"(%768) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %770 = "llvm.insertelement"(%6, %769, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %771 = "llvm.extractelement"(%770, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %772 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc15)
    %773 = "llvm.zext"(%497) : (i1) -> i8 loc(#loc15)
    %774 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc15)
    %775 = "llvm.zext"(%498) : (i1) -> i8 loc(#loc15)
    %776 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc15)
    %777 = "llvm.zext"(%499) : (i1) -> i8 loc(#loc15)
    %778 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc15)
    %779 = "llvm.zext"(%500) : (i1) -> i8 loc(#loc15)
    %780 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc15)
    %781 = "llvm.zext"(%501) : (i1) -> i8 loc(#loc15)
    %782 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc15)
    %783 = "llvm.zext"(%502) : (i1) -> i8 loc(#loc15)
    %784 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc15)
    %785 = "llvm.zext"(%503) : (i1) -> i8 loc(#loc15)
    %786 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc15)
    %787 = "llvm.zext"(%504) : (i1) -> i8 loc(#loc15)
    %788 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc15)
    %789 = "llvm.urem"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %790 = "llvm.udiv"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %791 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %793 = "llvm.select"(%792, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %794 = "llvm.xor"(%23, %793) : (i32, i32) -> i32 loc(#loc15)
    %795 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %797 = "llvm.select"(%796, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc15)
    %799 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %801 = "llvm.select"(%800, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc15)
    %803 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %805 = "llvm.select"(%804, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc15)
    %807 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %809 = "llvm.select"(%808, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc15)
    %811 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %813 = "llvm.select"(%812, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %814 = "llvm.xor"(%810, %813) : (i32, i32) -> i32 loc(#loc15)
    %815 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %817 = "llvm.select"(%816, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc15)
    %819 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %821 = "llvm.select"(%820, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %822 = "llvm.xor"(%23, %821) : (i32, i32) -> i32 loc(#loc15)
    %823 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %825 = "llvm.select"(%824, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc15)
    %827 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %829 = "llvm.select"(%828, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc15)
    %831 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %833 = "llvm.select"(%832, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc15)
    %835 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %837 = "llvm.select"(%836, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc15)
    %839 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %840 = "llvm.icmp"(%839, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %841 = "llvm.select"(%840, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %842 = "llvm.xor"(%838, %841) : (i32, i32) -> i32 loc(#loc15)
    %843 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %844 = "llvm.icmp"(%843, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %845 = "llvm.select"(%844, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %846 = "llvm.xor"(%842, %845) : (i32, i32) -> i32 loc(#loc15)
    %847 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %848 = "llvm.lshr"(%847, %22) : (i32, i32) -> i32 loc(#loc15)
    %849 = "llvm.shl"(%848, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %850 = "llvm.add"(%849, %847) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %851 = "llvm.getelementptr"(%9, %850) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %852 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %853 = "llvm.insertelement"(%852, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %854 = "llvm.extractelement"(%853, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %855 = "llvm.extractelement"(%853, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %856 = "llvm.inline_asm"(%851, %854, %855, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %857 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc15)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %865 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc15)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %870 = "llvm.load"(%869) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %871 = "llvm.insertelement"(%0, %870, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %872 = "llvm.extractelement"(%871, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %873 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %874 = "llvm.lshr"(%873, %22) : (i32, i32) -> i32 loc(#loc15)
    %875 = "llvm.shl"(%874, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %876 = "llvm.add"(%875, %873) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %877 = "llvm.getelementptr"(%9, %876) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %878 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %879 = "llvm.insertelement"(%878, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %880 = "llvm.extractelement"(%879, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %881 = "llvm.extractelement"(%879, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %882 = "llvm.inline_asm"(%877, %880, %881, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %883 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc15)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %891 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc15)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %896 = "llvm.load"(%895) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %897 = "llvm.insertelement"(%0, %896, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %898 = "llvm.extractelement"(%897, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %899 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %900 = "llvm.lshr"(%899, %22) : (i32, i32) -> i32 loc(#loc15)
    %901 = "llvm.shl"(%900, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %902 = "llvm.add"(%901, %899) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %903 = "llvm.getelementptr"(%9, %902) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %904 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %905 = "llvm.insertelement"(%904, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %906 = "llvm.extractelement"(%905, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %907 = "llvm.extractelement"(%905, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %908 = "llvm.inline_asm"(%903, %906, %907, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %909 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc15)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %917 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc15)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %922 = "llvm.load"(%921) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %923 = "llvm.insertelement"(%0, %922, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %924 = "llvm.extractelement"(%923, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %925 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %926 = "llvm.lshr"(%925, %22) : (i32, i32) -> i32 loc(#loc15)
    %927 = "llvm.shl"(%926, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %928 = "llvm.add"(%927, %925) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %929 = "llvm.getelementptr"(%9, %928) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %930 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %931 = "llvm.insertelement"(%930, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %932 = "llvm.extractelement"(%931, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %933 = "llvm.extractelement"(%931, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %934 = "llvm.inline_asm"(%929, %932, %933, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %935 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc15)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %943 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc15)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %948 = "llvm.load"(%947) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %949 = "llvm.insertelement"(%0, %948, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %950 = "llvm.extractelement"(%949, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %951 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %952 = "llvm.lshr"(%951, %22) : (i32, i32) -> i32 loc(#loc15)
    %953 = "llvm.shl"(%952, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %954 = "llvm.add"(%953, %951) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %955 = "llvm.getelementptr"(%9, %954) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %956 = "llvm.insertelement"(%1, %780, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %957 = "llvm.insertelement"(%956, %781, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %958 = "llvm.extractelement"(%957, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %959 = "llvm.extractelement"(%957, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %960 = "llvm.inline_asm"(%955, %958, %959, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %961 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc15)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %969 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc15)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %974 = "llvm.load"(%973) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %975 = "llvm.insertelement"(%0, %974, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %976 = "llvm.extractelement"(%975, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %977 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %978 = "llvm.lshr"(%977, %22) : (i32, i32) -> i32 loc(#loc15)
    %979 = "llvm.shl"(%978, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %980 = "llvm.add"(%979, %977) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %981 = "llvm.getelementptr"(%9, %980) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %982 = "llvm.insertelement"(%1, %782, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %983 = "llvm.insertelement"(%982, %783, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %984 = "llvm.extractelement"(%983, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %985 = "llvm.extractelement"(%983, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %986 = "llvm.inline_asm"(%981, %984, %985, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %987 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc15)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %995 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc15)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1000 = "llvm.load"(%999) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1001 = "llvm.insertelement"(%0, %1000, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1003 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1004 = "llvm.lshr"(%1003, %22) : (i32, i32) -> i32 loc(#loc15)
    %1005 = "llvm.shl"(%1004, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1006 = "llvm.add"(%1005, %1003) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1007 = "llvm.getelementptr"(%9, %1006) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1008 = "llvm.insertelement"(%1, %784, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1009 = "llvm.insertelement"(%1008, %785, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1010 = "llvm.extractelement"(%1009, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1011 = "llvm.extractelement"(%1009, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1012 = "llvm.inline_asm"(%1007, %1010, %1011, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1013 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc15)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1021 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc15)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1026 = "llvm.load"(%1025) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1027 = "llvm.insertelement"(%0, %1026, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1029 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1030 = "llvm.lshr"(%1029, %22) : (i32, i32) -> i32 loc(#loc15)
    %1031 = "llvm.shl"(%1030, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1032 = "llvm.add"(%1031, %1029) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1033 = "llvm.getelementptr"(%9, %1032) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1034 = "llvm.insertelement"(%1, %786, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1035 = "llvm.insertelement"(%1034, %787, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1036 = "llvm.extractelement"(%1035, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1037 = "llvm.extractelement"(%1035, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1038 = "llvm.inline_asm"(%1033, %1036, %1037, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1039 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc15)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1047 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1048 = "llvm.lshr"(%1047, %22) : (i32, i32) -> i32 loc(#loc15)
    %1049 = "llvm.shl"(%1048, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1050 = "llvm.add"(%1049, %1047) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1051 = "llvm.getelementptr"(%9, %1050) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1052 = "llvm.load"(%1051) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1053 = "llvm.insertelement"(%0, %1052, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1054 = "llvm.extractelement"(%1053, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1055 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1056 = "llvm.trunc"(%872) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1057 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1058 = "llvm.trunc"(%898) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1059 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1060 = "llvm.trunc"(%924) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1061 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1062 = "llvm.trunc"(%950) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1063 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1064 = "llvm.trunc"(%976) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1065 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1066 = "llvm.trunc"(%1002) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1067 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1068 = "llvm.trunc"(%1028) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1069 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1070 = "llvm.trunc"(%1054) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1072 = "llvm.getelementptr"(%arg1, %589) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1073 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1074 = "llvm.getelementptr"(%arg1, %615) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1075 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1076 = "llvm.getelementptr"(%arg1, %641) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1077 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1078 = "llvm.getelementptr"(%arg1, %667) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1079 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1080 = "llvm.getelementptr"(%arg1, %693) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1081 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1082 = "llvm.getelementptr"(%arg1, %719) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1083 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1084 = "llvm.getelementptr"(%arg1, %745) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1085 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1086 = "llvm.getelementptr"(%arg1, %771) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1087 = "llvm.insertelement"(%8, %282, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1088 = "llvm.bitcast"(%1087) : (vector<1xf32>) -> i32 loc(#loc17)
    %1089 = "llvm.inline_asm"(%1088, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1090 = "llvm.insertelement"(%8, %293, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1091 = "llvm.bitcast"(%1090) : (vector<1xf32>) -> i32 loc(#loc17)
    %1092 = "llvm.inline_asm"(%1091, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1093 = "llvm.insertelement"(%8, %304, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1094 = "llvm.bitcast"(%1093) : (vector<1xf32>) -> i32 loc(#loc17)
    %1095 = "llvm.inline_asm"(%1094, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1096 = "llvm.insertelement"(%8, %315, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1097 = "llvm.bitcast"(%1096) : (vector<1xf32>) -> i32 loc(#loc17)
    %1098 = "llvm.inline_asm"(%1097, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1099 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1100 = "llvm.bitcast"(%1099) : (vector<1xf32>) -> i32 loc(#loc17)
    %1101 = "llvm.inline_asm"(%1100, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1102 = "llvm.insertelement"(%8, %337, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1103 = "llvm.bitcast"(%1102) : (vector<1xf32>) -> i32 loc(#loc17)
    %1104 = "llvm.inline_asm"(%1103, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1105 = "llvm.insertelement"(%8, %348, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1106 = "llvm.bitcast"(%1105) : (vector<1xf32>) -> i32 loc(#loc17)
    %1107 = "llvm.inline_asm"(%1106, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1108 = "llvm.insertelement"(%8, %359, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1109 = "llvm.bitcast"(%1108) : (vector<1xf32>) -> i32 loc(#loc17)
    %1110 = "llvm.inline_asm"(%1109, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1111 = "llvm.insertelement"(%8, %410, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1112 = "llvm.bitcast"(%1111) : (vector<1xf32>) -> i32 loc(#loc17)
    %1113 = "llvm.inline_asm"(%1112, %1079, %1063) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1114 = "llvm.insertelement"(%8, %421, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1115 = "llvm.bitcast"(%1114) : (vector<1xf32>) -> i32 loc(#loc17)
    %1116 = "llvm.inline_asm"(%1115, %1080, %1064) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1117 = "llvm.insertelement"(%8, %432, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1118 = "llvm.bitcast"(%1117) : (vector<1xf32>) -> i32 loc(#loc17)
    %1119 = "llvm.inline_asm"(%1118, %1081, %1065) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1120 = "llvm.insertelement"(%8, %443, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1121 = "llvm.bitcast"(%1120) : (vector<1xf32>) -> i32 loc(#loc17)
    %1122 = "llvm.inline_asm"(%1121, %1082, %1066) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1123 = "llvm.insertelement"(%8, %454, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1124 = "llvm.bitcast"(%1123) : (vector<1xf32>) -> i32 loc(#loc17)
    %1125 = "llvm.inline_asm"(%1124, %1083, %1067) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1126 = "llvm.insertelement"(%8, %465, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1127 = "llvm.bitcast"(%1126) : (vector<1xf32>) -> i32 loc(#loc17)
    %1128 = "llvm.inline_asm"(%1127, %1084, %1068) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1129 = "llvm.insertelement"(%8, %476, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1130 = "llvm.bitcast"(%1129) : (vector<1xf32>) -> i32 loc(#loc17)
    %1131 = "llvm.inline_asm"(%1130, %1085, %1069) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1132 = "llvm.insertelement"(%8, %487, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1133 = "llvm.bitcast"(%1132) : (vector<1xf32>) -> i32 loc(#loc17)
    %1134 = "llvm.inline_asm"(%1133, %1086, %1070) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    "llvm.return"() : () -> () loc(#loc18)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "llvm.fmul"(%161, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %170 = "llvm.fmul"(%162, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %171 = "llvm.fmul"(%163, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %172 = "llvm.fmul"(%164, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %173 = "llvm.fmul"(%165, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %174 = "llvm.fmul"(%166, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %175 = "llvm.fmul"(%167, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %176 = "llvm.fmul"(%168, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %177 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc10)
    %178 = "llvm.urem"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %179 = "llvm.udiv"(%177, %24) : (i32, i32) -> i32 loc(#loc10)
    %180 = "llvm.and"(%178, %22) : (i32, i32) -> i32 loc(#loc10)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %182 = "llvm.select"(%181, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %183 = "llvm.xor"(%23, %182) : (i32, i32) -> i32 loc(#loc10)
    %184 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %186 = "llvm.select"(%185, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc10)
    %188 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %190 = "llvm.select"(%189, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc10)
    %192 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %194 = "llvm.select"(%193, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc10)
    %196 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %198 = "llvm.select"(%197, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc10)
    %200 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %202 = "llvm.select"(%201, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %203 = "llvm.xor"(%199, %202) : (i32, i32) -> i32 loc(#loc10)
    %204 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %206 = "llvm.select"(%205, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc10)
    %208 = "llvm.and"(%178, %27) : (i32, i32) -> i32 loc(#loc10)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %210 = "llvm.select"(%209, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %211 = "llvm.xor"(%23, %210) : (i32, i32) -> i32 loc(#loc10)
    %212 = "llvm.and"(%178, %21) : (i32, i32) -> i32 loc(#loc10)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %214 = "llvm.select"(%213, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc10)
    %216 = "llvm.and"(%178, %20) : (i32, i32) -> i32 loc(#loc10)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %218 = "llvm.select"(%217, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc10)
    %220 = "llvm.and"(%178, %19) : (i32, i32) -> i32 loc(#loc10)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %222 = "llvm.select"(%221, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc10)
    %224 = "llvm.and"(%179, %22) : (i32, i32) -> i32 loc(#loc10)
    %225 = "llvm.icmp"(%224, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %226 = "llvm.select"(%225, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %227 = "llvm.xor"(%223, %226) : (i32, i32) -> i32 loc(#loc10)
    %228 = "llvm.and"(%179, %27) : (i32, i32) -> i32 loc(#loc10)
    %229 = "llvm.icmp"(%228, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %230 = "llvm.select"(%229, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %231 = "llvm.xor"(%227, %230) : (i32, i32) -> i32 loc(#loc10)
    %232 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %233 = "llvm.lshr"(%232, %23) : (i32, i32) -> i32 loc(#loc10)
    %234 = "llvm.shl"(%233, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %235 = "llvm.add"(%234, %232) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %236 = "llvm.getelementptr"(%9, %235) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %237 = "llvm.insertelement"(%8, %169, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %238 = "llvm.extractelement"(%237, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %239 = "llvm.bitcast"(%238) : (f32) -> i32 loc(#loc10)
    %240 = "llvm.insertelement"(%6, %239, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %241 = "llvm.inline_asm"(%236, %240, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %242 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %243 = "llvm.lshr"(%242, %23) : (i32, i32) -> i32 loc(#loc10)
    %244 = "llvm.shl"(%243, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %245 = "llvm.add"(%244, %242) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %246 = "llvm.getelementptr"(%9, %245) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %247 = "llvm.insertelement"(%8, %170, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %248 = "llvm.extractelement"(%247, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %249 = "llvm.bitcast"(%248) : (f32) -> i32 loc(#loc10)
    %250 = "llvm.insertelement"(%6, %249, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %251 = "llvm.inline_asm"(%246, %250, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %252 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %253 = "llvm.lshr"(%252, %23) : (i32, i32) -> i32 loc(#loc10)
    %254 = "llvm.shl"(%253, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %255 = "llvm.add"(%254, %252) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %256 = "llvm.getelementptr"(%9, %255) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %257 = "llvm.insertelement"(%8, %171, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %258 = "llvm.extractelement"(%257, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %259 = "llvm.bitcast"(%258) : (f32) -> i32 loc(#loc10)
    %260 = "llvm.insertelement"(%6, %259, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %261 = "llvm.inline_asm"(%256, %260, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %262 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %263 = "llvm.lshr"(%262, %23) : (i32, i32) -> i32 loc(#loc10)
    %264 = "llvm.shl"(%263, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %265 = "llvm.add"(%264, %262) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %266 = "llvm.getelementptr"(%9, %265) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %267 = "llvm.insertelement"(%8, %172, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %269 = "llvm.bitcast"(%268) : (f32) -> i32 loc(#loc10)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %271 = "llvm.inline_asm"(%266, %270, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %272 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %273 = "llvm.lshr"(%272, %23) : (i32, i32) -> i32 loc(#loc10)
    %274 = "llvm.shl"(%273, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %275 = "llvm.add"(%274, %272) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %276 = "llvm.getelementptr"(%9, %275) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %277 = "llvm.load"(%276) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %278 = "llvm.insertelement"(%6, %277, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %280 = "llvm.bitcast"(%279) : (i32) -> f32 loc(#loc10)
    %281 = "llvm.insertelement"(%8, %280, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %283 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %284 = "llvm.lshr"(%283, %23) : (i32, i32) -> i32 loc(#loc10)
    %285 = "llvm.shl"(%284, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %286 = "llvm.add"(%285, %283) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %287 = "llvm.getelementptr"(%9, %286) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %288 = "llvm.load"(%287) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %289 = "llvm.insertelement"(%6, %288, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %291 = "llvm.bitcast"(%290) : (i32) -> f32 loc(#loc10)
    %292 = "llvm.insertelement"(%8, %291, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %294 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %295 = "llvm.lshr"(%294, %23) : (i32, i32) -> i32 loc(#loc10)
    %296 = "llvm.shl"(%295, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %297 = "llvm.add"(%296, %294) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %298 = "llvm.getelementptr"(%9, %297) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %299 = "llvm.load"(%298) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %300 = "llvm.insertelement"(%6, %299, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %301 = "llvm.extractelement"(%300, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %302 = "llvm.bitcast"(%301) : (i32) -> f32 loc(#loc10)
    %303 = "llvm.insertelement"(%8, %302, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %305 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %306 = "llvm.lshr"(%305, %23) : (i32, i32) -> i32 loc(#loc10)
    %307 = "llvm.shl"(%306, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %308 = "llvm.add"(%307, %305) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %309 = "llvm.getelementptr"(%9, %308) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %310 = "llvm.load"(%309) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %311 = "llvm.insertelement"(%6, %310, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %312 = "llvm.extractelement"(%311, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %313 = "llvm.bitcast"(%312) : (i32) -> f32 loc(#loc10)
    %314 = "llvm.insertelement"(%8, %313, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %316 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %317 = "llvm.lshr"(%316, %23) : (i32, i32) -> i32 loc(#loc10)
    %318 = "llvm.shl"(%317, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %319 = "llvm.add"(%318, %316) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %320 = "llvm.getelementptr"(%9, %319) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %321 = "llvm.load"(%320) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %322 = "llvm.insertelement"(%6, %321, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %323 = "llvm.extractelement"(%322, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %324 = "llvm.bitcast"(%323) : (i32) -> f32 loc(#loc10)
    %325 = "llvm.insertelement"(%8, %324, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %327 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %328 = "llvm.lshr"(%327, %23) : (i32, i32) -> i32 loc(#loc10)
    %329 = "llvm.shl"(%328, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %330 = "llvm.add"(%329, %327) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %331 = "llvm.getelementptr"(%9, %330) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %332 = "llvm.load"(%331) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %333 = "llvm.insertelement"(%6, %332, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %335 = "llvm.bitcast"(%334) : (i32) -> f32 loc(#loc10)
    %336 = "llvm.insertelement"(%8, %335, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %338 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %339 = "llvm.lshr"(%338, %23) : (i32, i32) -> i32 loc(#loc10)
    %340 = "llvm.shl"(%339, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %341 = "llvm.add"(%340, %338) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %342 = "llvm.getelementptr"(%9, %341) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %343 = "llvm.load"(%342) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %344 = "llvm.insertelement"(%6, %343, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %345 = "llvm.extractelement"(%344, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %346 = "llvm.bitcast"(%345) : (i32) -> f32 loc(#loc10)
    %347 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %349 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %350 = "llvm.lshr"(%349, %23) : (i32, i32) -> i32 loc(#loc10)
    %351 = "llvm.shl"(%350, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %352 = "llvm.add"(%351, %349) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %353 = "llvm.getelementptr"(%9, %352) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %354 = "llvm.load"(%353) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %355 = "llvm.insertelement"(%6, %354, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %356 = "llvm.extractelement"(%355, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %357 = "llvm.bitcast"(%356) : (i32) -> f32 loc(#loc10)
    %358 = "llvm.insertelement"(%8, %357, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %359 = "llvm.extractelement"(%358, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %360 = "llvm.xor"(%207, %23) : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.lshr"(%360, %23) : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.shl"(%361, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%362, %360) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.getelementptr"(%9, %363) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %365 = "llvm.insertelement"(%8, %173, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %366 = "llvm.extractelement"(%365, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %367 = "llvm.bitcast"(%366) : (f32) -> i32 loc(#loc10)
    %368 = "llvm.insertelement"(%6, %367, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %369 = "llvm.inline_asm"(%364, %368, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %370 = "llvm.xor"(%207, %22) : (i32, i32) -> i32 loc(#loc10)
    %371 = "llvm.lshr"(%370, %23) : (i32, i32) -> i32 loc(#loc10)
    %372 = "llvm.shl"(%371, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %373 = "llvm.add"(%372, %370) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %374 = "llvm.getelementptr"(%9, %373) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %375 = "llvm.insertelement"(%8, %174, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %376 = "llvm.extractelement"(%375, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %377 = "llvm.bitcast"(%376) : (f32) -> i32 loc(#loc10)
    %378 = "llvm.insertelement"(%6, %377, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %379 = "llvm.inline_asm"(%374, %378, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %380 = "llvm.xor"(%207, %27) : (i32, i32) -> i32 loc(#loc10)
    %381 = "llvm.lshr"(%380, %23) : (i32, i32) -> i32 loc(#loc10)
    %382 = "llvm.shl"(%381, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %383 = "llvm.add"(%382, %380) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %384 = "llvm.getelementptr"(%9, %383) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %385 = "llvm.insertelement"(%8, %175, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %386 = "llvm.extractelement"(%385, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %387 = "llvm.bitcast"(%386) : (f32) -> i32 loc(#loc10)
    %388 = "llvm.insertelement"(%6, %387, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %389 = "llvm.inline_asm"(%384, %388, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %390 = "llvm.xor"(%207, %15) : (i32, i32) -> i32 loc(#loc10)
    %391 = "llvm.lshr"(%390, %23) : (i32, i32) -> i32 loc(#loc10)
    %392 = "llvm.shl"(%391, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %395 = "llvm.insertelement"(%8, %176, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %396 = "llvm.extractelement"(%395, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %397 = "llvm.bitcast"(%396) : (f32) -> i32 loc(#loc10)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %399 = "llvm.inline_asm"(%394, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %400 = "llvm.xor"(%231, %23) : (i32, i32) -> i32 loc(#loc10)
    %401 = "llvm.lshr"(%400, %23) : (i32, i32) -> i32 loc(#loc10)
    %402 = "llvm.shl"(%401, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %403 = "llvm.add"(%402, %400) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %404 = "llvm.getelementptr"(%9, %403) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %405 = "llvm.load"(%404) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %406 = "llvm.insertelement"(%6, %405, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %407 = "llvm.extractelement"(%406, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %408 = "llvm.bitcast"(%407) : (i32) -> f32 loc(#loc10)
    %409 = "llvm.insertelement"(%8, %408, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %411 = "llvm.xor"(%231, %18) : (i32, i32) -> i32 loc(#loc10)
    %412 = "llvm.lshr"(%411, %23) : (i32, i32) -> i32 loc(#loc10)
    %413 = "llvm.shl"(%412, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %414 = "llvm.add"(%413, %411) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %415 = "llvm.getelementptr"(%9, %414) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %416 = "llvm.load"(%415) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %417 = "llvm.insertelement"(%6, %416, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %418 = "llvm.extractelement"(%417, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %419 = "llvm.bitcast"(%418) : (i32) -> f32 loc(#loc10)
    %420 = "llvm.insertelement"(%8, %419, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %422 = "llvm.xor"(%231, %17) : (i32, i32) -> i32 loc(#loc10)
    %423 = "llvm.lshr"(%422, %23) : (i32, i32) -> i32 loc(#loc10)
    %424 = "llvm.shl"(%423, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %425 = "llvm.add"(%424, %422) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %426 = "llvm.getelementptr"(%9, %425) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %427 = "llvm.load"(%426) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %428 = "llvm.insertelement"(%6, %427, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %429 = "llvm.extractelement"(%428, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %430 = "llvm.bitcast"(%429) : (i32) -> f32 loc(#loc10)
    %431 = "llvm.insertelement"(%8, %430, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %433 = "llvm.xor"(%231, %5) : (i32, i32) -> i32 loc(#loc10)
    %434 = "llvm.lshr"(%433, %23) : (i32, i32) -> i32 loc(#loc10)
    %435 = "llvm.shl"(%434, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %436 = "llvm.add"(%435, %433) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %437 = "llvm.getelementptr"(%9, %436) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %438 = "llvm.load"(%437) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %439 = "llvm.insertelement"(%6, %438, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %440 = "llvm.extractelement"(%439, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %441 = "llvm.bitcast"(%440) : (i32) -> f32 loc(#loc10)
    %442 = "llvm.insertelement"(%8, %441, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %444 = "llvm.xor"(%231, %16) : (i32, i32) -> i32 loc(#loc10)
    %445 = "llvm.lshr"(%444, %23) : (i32, i32) -> i32 loc(#loc10)
    %446 = "llvm.shl"(%445, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %447 = "llvm.add"(%446, %444) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %448 = "llvm.getelementptr"(%9, %447) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %449 = "llvm.load"(%448) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %450 = "llvm.insertelement"(%6, %449, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %451 = "llvm.extractelement"(%450, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %452 = "llvm.bitcast"(%451) : (i32) -> f32 loc(#loc10)
    %453 = "llvm.insertelement"(%8, %452, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %455 = "llvm.xor"(%231, %4) : (i32, i32) -> i32 loc(#loc10)
    %456 = "llvm.lshr"(%455, %23) : (i32, i32) -> i32 loc(#loc10)
    %457 = "llvm.shl"(%456, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %458 = "llvm.add"(%457, %455) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %459 = "llvm.getelementptr"(%9, %458) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %460 = "llvm.load"(%459) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %461 = "llvm.insertelement"(%6, %460, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %462 = "llvm.extractelement"(%461, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %463 = "llvm.bitcast"(%462) : (i32) -> f32 loc(#loc10)
    %464 = "llvm.insertelement"(%8, %463, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %466 = "llvm.xor"(%231, %13) : (i32, i32) -> i32 loc(#loc10)
    %467 = "llvm.lshr"(%466, %23) : (i32, i32) -> i32 loc(#loc10)
    %468 = "llvm.shl"(%467, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %469 = "llvm.add"(%468, %466) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %470 = "llvm.getelementptr"(%9, %469) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %471 = "llvm.load"(%470) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %472 = "llvm.insertelement"(%6, %471, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %473 = "llvm.extractelement"(%472, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %474 = "llvm.bitcast"(%473) : (i32) -> f32 loc(#loc10)
    %475 = "llvm.insertelement"(%8, %474, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %477 = "llvm.xor"(%231, %3) : (i32, i32) -> i32 loc(#loc10)
    %478 = "llvm.lshr"(%477, %23) : (i32, i32) -> i32 loc(#loc10)
    %479 = "llvm.shl"(%478, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %480 = "llvm.add"(%479, %477) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.getelementptr"(%9, %480) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %482 = "llvm.load"(%481) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %483 = "llvm.insertelement"(%6, %482, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %484 = "llvm.extractelement"(%483, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %485 = "llvm.bitcast"(%484) : (i32) -> f32 loc(#loc10)
    %486 = "llvm.insertelement"(%8, %485, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %488 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %490 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %491 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %492 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %493 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %494 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %495 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %496 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %497 = "llvm.icmp"(%488, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %498 = "llvm.icmp"(%489, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %499 = "llvm.icmp"(%490, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %500 = "llvm.icmp"(%491, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %501 = "llvm.icmp"(%492, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.icmp"(%493, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %503 = "llvm.icmp"(%494, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %504 = "llvm.icmp"(%495, %496) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %505 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %506 = "llvm.urem"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %507 = "llvm.udiv"(%505, %24) : (i32, i32) -> i32 loc(#loc14)
    %508 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %510 = "llvm.select"(%509, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %511 = "llvm.xor"(%23, %510) : (i32, i32) -> i32 loc(#loc14)
    %512 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %514 = "llvm.select"(%513, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc14)
    %516 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %518 = "llvm.select"(%517, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc14)
    %520 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %522 = "llvm.select"(%521, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc14)
    %524 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %526 = "llvm.select"(%525, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc14)
    %528 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %530 = "llvm.select"(%529, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %531 = "llvm.xor"(%527, %530) : (i32, i32) -> i32 loc(#loc14)
    %532 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %534 = "llvm.select"(%533, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc14)
    %536 = "llvm.and"(%506, %22) : (i32, i32) -> i32 loc(#loc14)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %538 = "llvm.select"(%537, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %539 = "llvm.xor"(%23, %538) : (i32, i32) -> i32 loc(#loc14)
    %540 = "llvm.and"(%506, %27) : (i32, i32) -> i32 loc(#loc14)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %542 = "llvm.select"(%541, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc14)
    %544 = "llvm.and"(%506, %21) : (i32, i32) -> i32 loc(#loc14)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %546 = "llvm.select"(%545, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc14)
    %548 = "llvm.and"(%506, %20) : (i32, i32) -> i32 loc(#loc14)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %550 = "llvm.select"(%549, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc14)
    %552 = "llvm.and"(%506, %19) : (i32, i32) -> i32 loc(#loc14)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %554 = "llvm.select"(%553, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc14)
    %556 = "llvm.and"(%507, %22) : (i32, i32) -> i32 loc(#loc14)
    %557 = "llvm.icmp"(%556, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %558 = "llvm.select"(%557, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %559 = "llvm.xor"(%555, %558) : (i32, i32) -> i32 loc(#loc14)
    %560 = "llvm.and"(%507, %27) : (i32, i32) -> i32 loc(#loc14)
    %561 = "llvm.icmp"(%560, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %562 = "llvm.select"(%561, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %563 = "llvm.xor"(%559, %562) : (i32, i32) -> i32 loc(#loc14)
    %564 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %565 = "llvm.lshr"(%564, %22) : (i32, i32) -> i32 loc(#loc14)
    %566 = "llvm.shl"(%565, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %567 = "llvm.add"(%566, %564) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %568 = "llvm.getelementptr"(%9, %567) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %569 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %570 = "llvm.insertelement"(%569, %488, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %571 = "llvm.extractelement"(%570, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %572 = "llvm.extractelement"(%570, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %573 = "llvm.inline_asm"(%568, %571, %572, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %574 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc14)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %582 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc14)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %587 = "llvm.load"(%586) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %588 = "llvm.insertelement"(%6, %587, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %590 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %591 = "llvm.lshr"(%590, %22) : (i32, i32) -> i32 loc(#loc14)
    %592 = "llvm.shl"(%591, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %593 = "llvm.add"(%592, %590) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %594 = "llvm.getelementptr"(%9, %593) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %595 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %596 = "llvm.insertelement"(%595, %489, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %598 = "llvm.extractelement"(%596, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %599 = "llvm.inline_asm"(%594, %597, %598, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %600 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc14)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %608 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc14)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %613 = "llvm.load"(%612) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %614 = "llvm.insertelement"(%6, %613, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %615 = "llvm.extractelement"(%614, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %616 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %617 = "llvm.lshr"(%616, %22) : (i32, i32) -> i32 loc(#loc14)
    %618 = "llvm.shl"(%617, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %619 = "llvm.add"(%618, %616) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %620 = "llvm.getelementptr"(%9, %619) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %621 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %622 = "llvm.insertelement"(%621, %490, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %623 = "llvm.extractelement"(%622, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %624 = "llvm.extractelement"(%622, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %625 = "llvm.inline_asm"(%620, %623, %624, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %626 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc14)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %634 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc14)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %639 = "llvm.load"(%638) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %640 = "llvm.insertelement"(%6, %639, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %641 = "llvm.extractelement"(%640, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %642 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %643 = "llvm.lshr"(%642, %22) : (i32, i32) -> i32 loc(#loc14)
    %644 = "llvm.shl"(%643, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %645 = "llvm.add"(%644, %642) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %646 = "llvm.getelementptr"(%9, %645) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %647 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %648 = "llvm.insertelement"(%647, %491, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %649 = "llvm.extractelement"(%648, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %650 = "llvm.extractelement"(%648, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %651 = "llvm.inline_asm"(%646, %649, %650, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %652 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc14)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %660 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc14)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %665 = "llvm.load"(%664) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %666 = "llvm.insertelement"(%6, %665, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %667 = "llvm.extractelement"(%666, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %668 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %669 = "llvm.lshr"(%668, %22) : (i32, i32) -> i32 loc(#loc14)
    %670 = "llvm.shl"(%669, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %671 = "llvm.add"(%670, %668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %672 = "llvm.getelementptr"(%9, %671) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %673 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %674 = "llvm.insertelement"(%673, %492, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %675 = "llvm.extractelement"(%674, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %676 = "llvm.extractelement"(%674, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %677 = "llvm.inline_asm"(%672, %675, %676, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %678 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc14)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %686 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc14)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %691 = "llvm.load"(%690) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %692 = "llvm.insertelement"(%6, %691, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %693 = "llvm.extractelement"(%692, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %694 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %695 = "llvm.lshr"(%694, %22) : (i32, i32) -> i32 loc(#loc14)
    %696 = "llvm.shl"(%695, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %697 = "llvm.add"(%696, %694) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %698 = "llvm.getelementptr"(%9, %697) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %699 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %700 = "llvm.insertelement"(%699, %493, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %701 = "llvm.extractelement"(%700, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %702 = "llvm.extractelement"(%700, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %703 = "llvm.inline_asm"(%698, %701, %702, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %704 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc14)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %712 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc14)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %717 = "llvm.load"(%716) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %718 = "llvm.insertelement"(%6, %717, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %719 = "llvm.extractelement"(%718, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %720 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %721 = "llvm.lshr"(%720, %22) : (i32, i32) -> i32 loc(#loc14)
    %722 = "llvm.shl"(%721, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %723 = "llvm.add"(%722, %720) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %724 = "llvm.getelementptr"(%9, %723) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %725 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %726 = "llvm.insertelement"(%725, %494, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %727 = "llvm.extractelement"(%726, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %728 = "llvm.extractelement"(%726, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %729 = "llvm.inline_asm"(%724, %727, %728, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %730 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc14)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %738 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc14)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %743 = "llvm.load"(%742) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %744 = "llvm.insertelement"(%6, %743, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %745 = "llvm.extractelement"(%744, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %746 = "llvm.xor"(%535, %23) : (i32, i32) -> i32 loc(#loc14)
    %747 = "llvm.lshr"(%746, %22) : (i32, i32) -> i32 loc(#loc14)
    %748 = "llvm.shl"(%747, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %749 = "llvm.add"(%748, %746) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %750 = "llvm.getelementptr"(%9, %749) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %751 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %752 = "llvm.insertelement"(%751, %495, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %753 = "llvm.extractelement"(%752, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %754 = "llvm.extractelement"(%752, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %755 = "llvm.inline_asm"(%750, %753, %754, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %756 = "llvm.xor"(%563, %23) : (i32, i32) -> i32 loc(#loc14)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc14)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %764 = "llvm.xor"(%563, %17) : (i32, i32) -> i32 loc(#loc14)
    %765 = "llvm.lshr"(%764, %22) : (i32, i32) -> i32 loc(#loc14)
    %766 = "llvm.shl"(%765, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %767 = "llvm.add"(%766, %764) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %768 = "llvm.getelementptr"(%9, %767) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %769 = "llvm.load"(%768) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %770 = "llvm.insertelement"(%6, %769, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %771 = "llvm.extractelement"(%770, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %772 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc15)
    %773 = "llvm.zext"(%497) : (i1) -> i8 loc(#loc15)
    %774 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc15)
    %775 = "llvm.zext"(%498) : (i1) -> i8 loc(#loc15)
    %776 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc15)
    %777 = "llvm.zext"(%499) : (i1) -> i8 loc(#loc15)
    %778 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc15)
    %779 = "llvm.zext"(%500) : (i1) -> i8 loc(#loc15)
    %780 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc15)
    %781 = "llvm.zext"(%501) : (i1) -> i8 loc(#loc15)
    %782 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc15)
    %783 = "llvm.zext"(%502) : (i1) -> i8 loc(#loc15)
    %784 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc15)
    %785 = "llvm.zext"(%503) : (i1) -> i8 loc(#loc15)
    %786 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc15)
    %787 = "llvm.zext"(%504) : (i1) -> i8 loc(#loc15)
    %788 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc15)
    %789 = "llvm.urem"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %790 = "llvm.udiv"(%788, %24) : (i32, i32) -> i32 loc(#loc15)
    %791 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %793 = "llvm.select"(%792, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %794 = "llvm.xor"(%23, %793) : (i32, i32) -> i32 loc(#loc15)
    %795 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %797 = "llvm.select"(%796, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc15)
    %799 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %801 = "llvm.select"(%800, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc15)
    %803 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %805 = "llvm.select"(%804, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc15)
    %807 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %809 = "llvm.select"(%808, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc15)
    %811 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %813 = "llvm.select"(%812, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %814 = "llvm.xor"(%810, %813) : (i32, i32) -> i32 loc(#loc15)
    %815 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %817 = "llvm.select"(%816, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc15)
    %819 = "llvm.and"(%789, %22) : (i32, i32) -> i32 loc(#loc15)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %821 = "llvm.select"(%820, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %822 = "llvm.xor"(%23, %821) : (i32, i32) -> i32 loc(#loc15)
    %823 = "llvm.and"(%789, %27) : (i32, i32) -> i32 loc(#loc15)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %825 = "llvm.select"(%824, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc15)
    %827 = "llvm.and"(%789, %21) : (i32, i32) -> i32 loc(#loc15)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %829 = "llvm.select"(%828, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc15)
    %831 = "llvm.and"(%789, %20) : (i32, i32) -> i32 loc(#loc15)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %833 = "llvm.select"(%832, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc15)
    %835 = "llvm.and"(%789, %19) : (i32, i32) -> i32 loc(#loc15)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %837 = "llvm.select"(%836, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc15)
    %839 = "llvm.and"(%790, %22) : (i32, i32) -> i32 loc(#loc15)
    %840 = "llvm.icmp"(%839, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %841 = "llvm.select"(%840, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %842 = "llvm.xor"(%838, %841) : (i32, i32) -> i32 loc(#loc15)
    %843 = "llvm.and"(%790, %27) : (i32, i32) -> i32 loc(#loc15)
    %844 = "llvm.icmp"(%843, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %845 = "llvm.select"(%844, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %846 = "llvm.xor"(%842, %845) : (i32, i32) -> i32 loc(#loc15)
    %847 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %848 = "llvm.lshr"(%847, %22) : (i32, i32) -> i32 loc(#loc15)
    %849 = "llvm.shl"(%848, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %850 = "llvm.add"(%849, %847) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %851 = "llvm.getelementptr"(%9, %850) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %852 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %853 = "llvm.insertelement"(%852, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %854 = "llvm.extractelement"(%853, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %855 = "llvm.extractelement"(%853, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %856 = "llvm.inline_asm"(%851, %854, %855, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %857 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc15)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %865 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc15)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %870 = "llvm.load"(%869) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %871 = "llvm.insertelement"(%0, %870, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %872 = "llvm.extractelement"(%871, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %873 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %874 = "llvm.lshr"(%873, %22) : (i32, i32) -> i32 loc(#loc15)
    %875 = "llvm.shl"(%874, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %876 = "llvm.add"(%875, %873) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %877 = "llvm.getelementptr"(%9, %876) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %878 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %879 = "llvm.insertelement"(%878, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %880 = "llvm.extractelement"(%879, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %881 = "llvm.extractelement"(%879, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %882 = "llvm.inline_asm"(%877, %880, %881, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %883 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc15)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %891 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc15)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %896 = "llvm.load"(%895) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %897 = "llvm.insertelement"(%0, %896, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %898 = "llvm.extractelement"(%897, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %899 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %900 = "llvm.lshr"(%899, %22) : (i32, i32) -> i32 loc(#loc15)
    %901 = "llvm.shl"(%900, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %902 = "llvm.add"(%901, %899) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %903 = "llvm.getelementptr"(%9, %902) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %904 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %905 = "llvm.insertelement"(%904, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %906 = "llvm.extractelement"(%905, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %907 = "llvm.extractelement"(%905, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %908 = "llvm.inline_asm"(%903, %906, %907, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %909 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc15)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %917 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc15)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %922 = "llvm.load"(%921) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %923 = "llvm.insertelement"(%0, %922, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %924 = "llvm.extractelement"(%923, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %925 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %926 = "llvm.lshr"(%925, %22) : (i32, i32) -> i32 loc(#loc15)
    %927 = "llvm.shl"(%926, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %928 = "llvm.add"(%927, %925) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %929 = "llvm.getelementptr"(%9, %928) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %930 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %931 = "llvm.insertelement"(%930, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %932 = "llvm.extractelement"(%931, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %933 = "llvm.extractelement"(%931, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %934 = "llvm.inline_asm"(%929, %932, %933, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %935 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc15)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %943 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc15)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %948 = "llvm.load"(%947) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %949 = "llvm.insertelement"(%0, %948, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %950 = "llvm.extractelement"(%949, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %951 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %952 = "llvm.lshr"(%951, %22) : (i32, i32) -> i32 loc(#loc15)
    %953 = "llvm.shl"(%952, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %954 = "llvm.add"(%953, %951) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %955 = "llvm.getelementptr"(%9, %954) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %956 = "llvm.insertelement"(%1, %780, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %957 = "llvm.insertelement"(%956, %781, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %958 = "llvm.extractelement"(%957, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %959 = "llvm.extractelement"(%957, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %960 = "llvm.inline_asm"(%955, %958, %959, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %961 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc15)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %969 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc15)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %974 = "llvm.load"(%973) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %975 = "llvm.insertelement"(%0, %974, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %976 = "llvm.extractelement"(%975, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %977 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %978 = "llvm.lshr"(%977, %22) : (i32, i32) -> i32 loc(#loc15)
    %979 = "llvm.shl"(%978, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %980 = "llvm.add"(%979, %977) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %981 = "llvm.getelementptr"(%9, %980) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %982 = "llvm.insertelement"(%1, %782, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %983 = "llvm.insertelement"(%982, %783, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %984 = "llvm.extractelement"(%983, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %985 = "llvm.extractelement"(%983, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %986 = "llvm.inline_asm"(%981, %984, %985, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %987 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc15)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %995 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc15)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1000 = "llvm.load"(%999) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1001 = "llvm.insertelement"(%0, %1000, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1003 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1004 = "llvm.lshr"(%1003, %22) : (i32, i32) -> i32 loc(#loc15)
    %1005 = "llvm.shl"(%1004, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1006 = "llvm.add"(%1005, %1003) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1007 = "llvm.getelementptr"(%9, %1006) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1008 = "llvm.insertelement"(%1, %784, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1009 = "llvm.insertelement"(%1008, %785, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1010 = "llvm.extractelement"(%1009, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1011 = "llvm.extractelement"(%1009, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1012 = "llvm.inline_asm"(%1007, %1010, %1011, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1013 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc15)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1021 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc15)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1026 = "llvm.load"(%1025) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1027 = "llvm.insertelement"(%0, %1026, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1029 = "llvm.xor"(%818, %23) : (i32, i32) -> i32 loc(#loc15)
    %1030 = "llvm.lshr"(%1029, %22) : (i32, i32) -> i32 loc(#loc15)
    %1031 = "llvm.shl"(%1030, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1032 = "llvm.add"(%1031, %1029) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1033 = "llvm.getelementptr"(%9, %1032) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1034 = "llvm.insertelement"(%1, %786, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1035 = "llvm.insertelement"(%1034, %787, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %1036 = "llvm.extractelement"(%1035, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1037 = "llvm.extractelement"(%1035, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %1038 = "llvm.inline_asm"(%1033, %1036, %1037, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1039 = "llvm.xor"(%846, %23) : (i32, i32) -> i32 loc(#loc15)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc15)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1047 = "llvm.xor"(%846, %17) : (i32, i32) -> i32 loc(#loc15)
    %1048 = "llvm.lshr"(%1047, %22) : (i32, i32) -> i32 loc(#loc15)
    %1049 = "llvm.shl"(%1048, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1050 = "llvm.add"(%1049, %1047) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1051 = "llvm.getelementptr"(%9, %1050) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1052 = "llvm.load"(%1051) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %1053 = "llvm.insertelement"(%0, %1052, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %1054 = "llvm.extractelement"(%1053, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %1055 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1056 = "llvm.trunc"(%872) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1057 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1058 = "llvm.trunc"(%898) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1059 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1060 = "llvm.trunc"(%924) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1061 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1062 = "llvm.trunc"(%950) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1063 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1064 = "llvm.trunc"(%976) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1065 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1066 = "llvm.trunc"(%1002) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1067 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1068 = "llvm.trunc"(%1028) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1069 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1070 = "llvm.trunc"(%1054) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1072 = "llvm.getelementptr"(%arg1, %589) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1073 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1074 = "llvm.getelementptr"(%arg1, %615) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1075 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1076 = "llvm.getelementptr"(%arg1, %641) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1077 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1078 = "llvm.getelementptr"(%arg1, %667) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1079 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1080 = "llvm.getelementptr"(%arg1, %693) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1081 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1082 = "llvm.getelementptr"(%arg1, %719) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1083 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1084 = "llvm.getelementptr"(%arg1, %745) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1085 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1086 = "llvm.getelementptr"(%arg1, %771) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %1087 = "llvm.insertelement"(%8, %282, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1088 = "llvm.bitcast"(%1087) : (vector<1xf32>) -> i32 loc(#loc17)
    %1089 = "llvm.inline_asm"(%1088, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1090 = "llvm.insertelement"(%8, %293, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1091 = "llvm.bitcast"(%1090) : (vector<1xf32>) -> i32 loc(#loc17)
    %1092 = "llvm.inline_asm"(%1091, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1093 = "llvm.insertelement"(%8, %304, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1094 = "llvm.bitcast"(%1093) : (vector<1xf32>) -> i32 loc(#loc17)
    %1095 = "llvm.inline_asm"(%1094, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1096 = "llvm.insertelement"(%8, %315, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1097 = "llvm.bitcast"(%1096) : (vector<1xf32>) -> i32 loc(#loc17)
    %1098 = "llvm.inline_asm"(%1097, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1099 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1100 = "llvm.bitcast"(%1099) : (vector<1xf32>) -> i32 loc(#loc17)
    %1101 = "llvm.inline_asm"(%1100, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1102 = "llvm.insertelement"(%8, %337, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1103 = "llvm.bitcast"(%1102) : (vector<1xf32>) -> i32 loc(#loc17)
    %1104 = "llvm.inline_asm"(%1103, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1105 = "llvm.insertelement"(%8, %348, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1106 = "llvm.bitcast"(%1105) : (vector<1xf32>) -> i32 loc(#loc17)
    %1107 = "llvm.inline_asm"(%1106, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1108 = "llvm.insertelement"(%8, %359, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1109 = "llvm.bitcast"(%1108) : (vector<1xf32>) -> i32 loc(#loc17)
    %1110 = "llvm.inline_asm"(%1109, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1111 = "llvm.insertelement"(%8, %410, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1112 = "llvm.bitcast"(%1111) : (vector<1xf32>) -> i32 loc(#loc17)
    %1113 = "llvm.inline_asm"(%1112, %1079, %1063) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1114 = "llvm.insertelement"(%8, %421, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1115 = "llvm.bitcast"(%1114) : (vector<1xf32>) -> i32 loc(#loc17)
    %1116 = "llvm.inline_asm"(%1115, %1080, %1064) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1117 = "llvm.insertelement"(%8, %432, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1118 = "llvm.bitcast"(%1117) : (vector<1xf32>) -> i32 loc(#loc17)
    %1119 = "llvm.inline_asm"(%1118, %1081, %1065) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1120 = "llvm.insertelement"(%8, %443, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1121 = "llvm.bitcast"(%1120) : (vector<1xf32>) -> i32 loc(#loc17)
    %1122 = "llvm.inline_asm"(%1121, %1082, %1066) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1123 = "llvm.insertelement"(%8, %454, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1124 = "llvm.bitcast"(%1123) : (vector<1xf32>) -> i32 loc(#loc17)
    %1125 = "llvm.inline_asm"(%1124, %1083, %1067) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1126 = "llvm.insertelement"(%8, %465, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1127 = "llvm.bitcast"(%1126) : (vector<1xf32>) -> i32 loc(#loc17)
    %1128 = "llvm.inline_asm"(%1127, %1084, %1068) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1129 = "llvm.insertelement"(%8, %476, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1130 = "llvm.bitcast"(%1129) : (vector<1xf32>) -> i32 loc(#loc17)
    %1131 = "llvm.inline_asm"(%1130, %1085, %1069) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %1132 = "llvm.insertelement"(%8, %487, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %1133 = "llvm.bitcast"(%1132) : (vector<1xf32>) -> i32 loc(#loc17)
    %1134 = "llvm.inline_asm"(%1133, %1086, %1070) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    "llvm.return"() : () -> () loc(#loc18)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %153 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %154 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %155 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %156 = "llvm.fmul"(%148, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %157 = "llvm.fmul"(%149, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %158 = "llvm.fmul"(%150, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %159 = "llvm.fmul"(%151, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %160 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %161 = "llvm.xor"(%23, %160) : (i32, i32) -> i32 loc(#loc10)
    %162 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc10)
    %164 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %165 = "llvm.xor"(%163, %164) : (i32, i32) -> i32 loc(#loc10)
    %166 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %167 = "llvm.xor"(%165, %166) : (i32, i32) -> i32 loc(#loc10)
    %168 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %169 = "llvm.xor"(%167, %168) : (i32, i32) -> i32 loc(#loc10)
    %170 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %171 = "llvm.xor"(%169, %170) : (i32, i32) -> i32 loc(#loc10)
    %172 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc10)
    %173 = "llvm.shl"(%172, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %174 = "llvm.add"(%173, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %175 = "llvm.getelementptr"(%9, %174) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %176 = "llvm.insertelement"(%8, %152, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %177 = "llvm.extractelement"(%176, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %178 = "llvm.bitcast"(%177) : (f32) -> i32 loc(#loc10)
    %179 = "llvm.insertelement"(%6, %178, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %180 = "llvm.inline_asm"(%175, %179, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %181 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc10)
    %182 = "llvm.lshr"(%181, %23) : (i32, i32) -> i32 loc(#loc10)
    %183 = "llvm.shl"(%182, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %184 = "llvm.add"(%183, %181) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %185 = "llvm.getelementptr"(%9, %184) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %186 = "llvm.insertelement"(%8, %153, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %187 = "llvm.extractelement"(%186, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %188 = "llvm.bitcast"(%187) : (f32) -> i32 loc(#loc10)
    %189 = "llvm.insertelement"(%6, %188, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %190 = "llvm.inline_asm"(%185, %189, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %191 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc10)
    %192 = "llvm.lshr"(%191, %23) : (i32, i32) -> i32 loc(#loc10)
    %193 = "llvm.shl"(%192, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %194 = "llvm.add"(%193, %191) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %195 = "llvm.getelementptr"(%9, %194) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %196 = "llvm.insertelement"(%8, %154, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %197 = "llvm.extractelement"(%196, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %198 = "llvm.bitcast"(%197) : (f32) -> i32 loc(#loc10)
    %199 = "llvm.insertelement"(%6, %198, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %200 = "llvm.inline_asm"(%195, %199, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %201 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc10)
    %202 = "llvm.lshr"(%201, %23) : (i32, i32) -> i32 loc(#loc10)
    %203 = "llvm.shl"(%202, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %204 = "llvm.add"(%203, %201) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %205 = "llvm.getelementptr"(%9, %204) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %206 = "llvm.insertelement"(%8, %155, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %207 = "llvm.extractelement"(%206, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %208 = "llvm.bitcast"(%207) : (f32) -> i32 loc(#loc10)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %210 = "llvm.inline_asm"(%205, %209, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %211 = "llvm.xor"(%171, %23) : (i32, i32) -> i32 loc(#loc10)
    %212 = "llvm.lshr"(%211, %23) : (i32, i32) -> i32 loc(#loc10)
    %213 = "llvm.shl"(%212, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %214 = "llvm.add"(%213, %211) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %215 = "llvm.getelementptr"(%9, %214) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %216 = "llvm.load"(%215) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %217 = "llvm.insertelement"(%6, %216, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %218 = "llvm.extractelement"(%217, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %219 = "llvm.bitcast"(%218) : (i32) -> f32 loc(#loc10)
    %220 = "llvm.insertelement"(%8, %219, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %222 = "llvm.xor"(%171, %18) : (i32, i32) -> i32 loc(#loc10)
    %223 = "llvm.lshr"(%222, %23) : (i32, i32) -> i32 loc(#loc10)
    %224 = "llvm.shl"(%223, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %225 = "llvm.add"(%224, %222) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %226 = "llvm.getelementptr"(%9, %225) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %227 = "llvm.load"(%226) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %228 = "llvm.insertelement"(%6, %227, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %229 = "llvm.extractelement"(%228, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %230 = "llvm.bitcast"(%229) : (i32) -> f32 loc(#loc10)
    %231 = "llvm.insertelement"(%8, %230, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %233 = "llvm.xor"(%171, %17) : (i32, i32) -> i32 loc(#loc10)
    %234 = "llvm.lshr"(%233, %23) : (i32, i32) -> i32 loc(#loc10)
    %235 = "llvm.shl"(%234, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %236 = "llvm.add"(%235, %233) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %237 = "llvm.getelementptr"(%9, %236) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %238 = "llvm.load"(%237) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %239 = "llvm.insertelement"(%6, %238, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %241 = "llvm.bitcast"(%240) : (i32) -> f32 loc(#loc10)
    %242 = "llvm.insertelement"(%8, %241, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %244 = "llvm.xor"(%171, %5) : (i32, i32) -> i32 loc(#loc10)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc10)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %249 = "llvm.load"(%248) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %250 = "llvm.insertelement"(%6, %249, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %251 = "llvm.extractelement"(%250, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %252 = "llvm.bitcast"(%251) : (i32) -> f32 loc(#loc10)
    %253 = "llvm.insertelement"(%8, %252, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %255 = "llvm.xor"(%171, %16) : (i32, i32) -> i32 loc(#loc10)
    %256 = "llvm.lshr"(%255, %23) : (i32, i32) -> i32 loc(#loc10)
    %257 = "llvm.shl"(%256, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %258 = "llvm.add"(%257, %255) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %259 = "llvm.getelementptr"(%9, %258) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %260 = "llvm.load"(%259) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %261 = "llvm.insertelement"(%6, %260, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %262 = "llvm.extractelement"(%261, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %263 = "llvm.bitcast"(%262) : (i32) -> f32 loc(#loc10)
    %264 = "llvm.insertelement"(%8, %263, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %266 = "llvm.xor"(%171, %4) : (i32, i32) -> i32 loc(#loc10)
    %267 = "llvm.lshr"(%266, %23) : (i32, i32) -> i32 loc(#loc10)
    %268 = "llvm.shl"(%267, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %269 = "llvm.add"(%268, %266) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %270 = "llvm.getelementptr"(%9, %269) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %271 = "llvm.load"(%270) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %272 = "llvm.insertelement"(%6, %271, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %273 = "llvm.extractelement"(%272, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %274 = "llvm.bitcast"(%273) : (i32) -> f32 loc(#loc10)
    %275 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %277 = "llvm.xor"(%171, %13) : (i32, i32) -> i32 loc(#loc10)
    %278 = "llvm.lshr"(%277, %23) : (i32, i32) -> i32 loc(#loc10)
    %279 = "llvm.shl"(%278, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %280 = "llvm.add"(%279, %277) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %281 = "llvm.getelementptr"(%9, %280) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %282 = "llvm.load"(%281) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %283 = "llvm.insertelement"(%6, %282, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %284 = "llvm.extractelement"(%283, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %285 = "llvm.bitcast"(%284) : (i32) -> f32 loc(#loc10)
    %286 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %288 = "llvm.xor"(%171, %3) : (i32, i32) -> i32 loc(#loc10)
    %289 = "llvm.lshr"(%288, %23) : (i32, i32) -> i32 loc(#loc10)
    %290 = "llvm.shl"(%289, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %291 = "llvm.add"(%290, %288) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %292 = "llvm.getelementptr"(%9, %291) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %293 = "llvm.load"(%292) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %295 = "llvm.extractelement"(%294, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %296 = "llvm.bitcast"(%295) : (i32) -> f32 loc(#loc10)
    %297 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %298 = "llvm.extractelement"(%297, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %299 = "llvm.insertelement"(%8, %156, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %300 = "llvm.extractelement"(%299, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %301 = "llvm.bitcast"(%300) : (f32) -> i32 loc(#loc10)
    %302 = "llvm.insertelement"(%6, %301, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %303 = "llvm.inline_asm"(%175, %302, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %304 = "llvm.insertelement"(%8, %157, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %305 = "llvm.extractelement"(%304, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %306 = "llvm.bitcast"(%305) : (f32) -> i32 loc(#loc10)
    %307 = "llvm.insertelement"(%6, %306, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %308 = "llvm.inline_asm"(%185, %307, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %309 = "llvm.insertelement"(%8, %158, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %310 = "llvm.extractelement"(%309, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %311 = "llvm.bitcast"(%310) : (f32) -> i32 loc(#loc10)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %313 = "llvm.inline_asm"(%195, %312, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %314 = "llvm.insertelement"(%8, %159, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %316 = "llvm.bitcast"(%315) : (f32) -> i32 loc(#loc10)
    %317 = "llvm.insertelement"(%6, %316, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %318 = "llvm.inline_asm"(%205, %317, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %319 = "llvm.load"(%215) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %320 = "llvm.insertelement"(%6, %319, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %321 = "llvm.extractelement"(%320, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %322 = "llvm.bitcast"(%321) : (i32) -> f32 loc(#loc10)
    %323 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %324 = "llvm.extractelement"(%323, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %325 = "llvm.load"(%226) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %326 = "llvm.insertelement"(%6, %325, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %327 = "llvm.extractelement"(%326, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %328 = "llvm.bitcast"(%327) : (i32) -> f32 loc(#loc10)
    %329 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %330 = "llvm.extractelement"(%329, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %331 = "llvm.load"(%237) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %332 = "llvm.insertelement"(%6, %331, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %333 = "llvm.extractelement"(%332, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %334 = "llvm.bitcast"(%333) : (i32) -> f32 loc(#loc10)
    %335 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %336 = "llvm.extractelement"(%335, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %337 = "llvm.load"(%248) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %338 = "llvm.insertelement"(%6, %337, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %339 = "llvm.extractelement"(%338, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %340 = "llvm.bitcast"(%339) : (i32) -> f32 loc(#loc10)
    %341 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %342 = "llvm.extractelement"(%341, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %343 = "llvm.load"(%259) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %344 = "llvm.insertelement"(%6, %343, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %345 = "llvm.extractelement"(%344, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %346 = "llvm.bitcast"(%345) : (i32) -> f32 loc(#loc10)
    %347 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %349 = "llvm.load"(%270) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %350 = "llvm.insertelement"(%6, %349, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %352 = "llvm.bitcast"(%351) : (i32) -> f32 loc(#loc10)
    %353 = "llvm.insertelement"(%8, %352, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %354 = "llvm.extractelement"(%353, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %355 = "llvm.load"(%281) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %356 = "llvm.insertelement"(%6, %355, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %357 = "llvm.extractelement"(%356, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %358 = "llvm.bitcast"(%357) : (i32) -> f32 loc(#loc10)
    %359 = "llvm.insertelement"(%8, %358, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %360 = "llvm.extractelement"(%359, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %361 = "llvm.load"(%292) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %362 = "llvm.insertelement"(%6, %361, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %363 = "llvm.extractelement"(%362, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %364 = "llvm.bitcast"(%363) : (i32) -> f32 loc(#loc10)
    %365 = "llvm.insertelement"(%8, %364, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %366 = "llvm.extractelement"(%365, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %367 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %369 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %370 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %371 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %372 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %373 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %374 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %375 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %376 = "llvm.icmp"(%367, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %377 = "llvm.icmp"(%368, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %378 = "llvm.icmp"(%369, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %379 = "llvm.icmp"(%370, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %380 = "llvm.icmp"(%371, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %381 = "llvm.icmp"(%372, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %382 = "llvm.icmp"(%373, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %383 = "llvm.icmp"(%374, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %384 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %385 = "llvm.xor"(%23, %384) : (i32, i32) -> i32 loc(#loc14)
    %386 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc14)
    %388 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc14)
    %390 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %391 = "llvm.xor"(%389, %390) : (i32, i32) -> i32 loc(#loc14)
    %392 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %393 = "llvm.xor"(%391, %392) : (i32, i32) -> i32 loc(#loc14)
    %394 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %395 = "llvm.xor"(%393, %394) : (i32, i32) -> i32 loc(#loc14)
    %396 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %397 = "llvm.xor"(%395, %396) : (i32, i32) -> i32 loc(#loc14)
    %398 = "llvm.xor"(%397, %23) : (i32, i32) -> i32 loc(#loc14)
    %399 = "llvm.lshr"(%398, %22) : (i32, i32) -> i32 loc(#loc14)
    %400 = "llvm.shl"(%399, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %401 = "llvm.add"(%400, %398) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %402 = "llvm.getelementptr"(%9, %401) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %403 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %404 = "llvm.insertelement"(%403, %367, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %405 = "llvm.extractelement"(%404, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %406 = "llvm.extractelement"(%404, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %407 = "llvm.inline_asm"(%402, %405, %406, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %408 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc14)
    %409 = "llvm.shl"(%408, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %410 = "llvm.add"(%409, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %411 = "llvm.getelementptr"(%9, %410) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %412 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %413 = "llvm.insertelement"(%6, %412, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %414 = "llvm.extractelement"(%413, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %415 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc14)
    %416 = "llvm.shl"(%415, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %417 = "llvm.add"(%416, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %422 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %423 = "llvm.insertelement"(%422, %368, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %424 = "llvm.extractelement"(%423, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %425 = "llvm.extractelement"(%423, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %426 = "llvm.inline_asm"(%402, %424, %425, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %427 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %428 = "llvm.insertelement"(%6, %427, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %429 = "llvm.extractelement"(%428, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %430 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %433 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %434 = "llvm.insertelement"(%433, %369, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %435 = "llvm.extractelement"(%434, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %436 = "llvm.extractelement"(%434, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %437 = "llvm.inline_asm"(%402, %435, %436, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %438 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %439 = "llvm.insertelement"(%6, %438, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %440 = "llvm.extractelement"(%439, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %441 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %444 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %445 = "llvm.insertelement"(%444, %370, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %446 = "llvm.extractelement"(%445, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %447 = "llvm.extractelement"(%445, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %448 = "llvm.inline_asm"(%402, %446, %447, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %449 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %450 = "llvm.insertelement"(%6, %449, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %451 = "llvm.extractelement"(%450, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %452 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %455 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %456 = "llvm.insertelement"(%455, %371, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %457 = "llvm.extractelement"(%456, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %458 = "llvm.extractelement"(%456, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %459 = "llvm.inline_asm"(%402, %457, %458, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %460 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %461 = "llvm.insertelement"(%6, %460, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %462 = "llvm.extractelement"(%461, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %463 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %466 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %467 = "llvm.insertelement"(%466, %372, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %468 = "llvm.extractelement"(%467, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %469 = "llvm.extractelement"(%467, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %470 = "llvm.inline_asm"(%402, %468, %469, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %471 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %472 = "llvm.insertelement"(%6, %471, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %473 = "llvm.extractelement"(%472, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %474 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %477 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %478 = "llvm.insertelement"(%477, %373, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %479 = "llvm.extractelement"(%478, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %480 = "llvm.extractelement"(%478, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %481 = "llvm.inline_asm"(%402, %479, %480, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %482 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %483 = "llvm.insertelement"(%6, %482, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %484 = "llvm.extractelement"(%483, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %485 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %488 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %489 = "llvm.insertelement"(%488, %374, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %490 = "llvm.extractelement"(%489, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %491 = "llvm.extractelement"(%489, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %492 = "llvm.inline_asm"(%402, %490, %491, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %493 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %494 = "llvm.insertelement"(%6, %493, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %495 = "llvm.extractelement"(%494, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %496 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %497 = "llvm.insertelement"(%6, %496, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %498 = "llvm.extractelement"(%497, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %499 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc15)
    %500 = "llvm.zext"(%376) : (i1) -> i8 loc(#loc15)
    %501 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc15)
    %502 = "llvm.zext"(%377) : (i1) -> i8 loc(#loc15)
    %503 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc15)
    %504 = "llvm.zext"(%378) : (i1) -> i8 loc(#loc15)
    %505 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc15)
    %506 = "llvm.zext"(%379) : (i1) -> i8 loc(#loc15)
    %507 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc15)
    %508 = "llvm.zext"(%380) : (i1) -> i8 loc(#loc15)
    %509 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc15)
    %510 = "llvm.zext"(%381) : (i1) -> i8 loc(#loc15)
    %511 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc15)
    %512 = "llvm.zext"(%382) : (i1) -> i8 loc(#loc15)
    %513 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc15)
    %514 = "llvm.zext"(%383) : (i1) -> i8 loc(#loc15)
    %515 = "llvm.getelementptr"(%9, %401) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %516 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %517 = "llvm.insertelement"(%516, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %518 = "llvm.extractelement"(%517, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %519 = "llvm.extractelement"(%517, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %520 = "llvm.inline_asm"(%515, %518, %519, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %521 = "llvm.getelementptr"(%9, %410) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %522 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %523 = "llvm.insertelement"(%0, %522, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %524 = "llvm.extractelement"(%523, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %525 = "llvm.getelementptr"(%9, %417) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %526 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %529 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %530 = "llvm.insertelement"(%529, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %531 = "llvm.extractelement"(%530, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %532 = "llvm.extractelement"(%530, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %533 = "llvm.inline_asm"(%515, %531, %532, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %534 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %535 = "llvm.insertelement"(%0, %534, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %536 = "llvm.extractelement"(%535, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %537 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %540 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %541 = "llvm.insertelement"(%540, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %542 = "llvm.extractelement"(%541, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %543 = "llvm.extractelement"(%541, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %544 = "llvm.inline_asm"(%515, %542, %543, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %545 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %546 = "llvm.insertelement"(%0, %545, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %547 = "llvm.extractelement"(%546, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %548 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %551 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %552 = "llvm.insertelement"(%551, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %553 = "llvm.extractelement"(%552, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %554 = "llvm.extractelement"(%552, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %555 = "llvm.inline_asm"(%515, %553, %554, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %556 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %557 = "llvm.insertelement"(%0, %556, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %558 = "llvm.extractelement"(%557, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %559 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %562 = "llvm.insertelement"(%1, %507, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %563 = "llvm.insertelement"(%562, %508, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %564 = "llvm.extractelement"(%563, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %565 = "llvm.extractelement"(%563, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %566 = "llvm.inline_asm"(%515, %564, %565, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %567 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %568 = "llvm.insertelement"(%0, %567, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %569 = "llvm.extractelement"(%568, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %570 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %573 = "llvm.insertelement"(%1, %509, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %574 = "llvm.insertelement"(%573, %510, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %575 = "llvm.extractelement"(%574, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %576 = "llvm.extractelement"(%574, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %577 = "llvm.inline_asm"(%515, %575, %576, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %578 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %579 = "llvm.insertelement"(%0, %578, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %580 = "llvm.extractelement"(%579, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %581 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %584 = "llvm.insertelement"(%1, %511, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %585 = "llvm.insertelement"(%584, %512, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %586 = "llvm.extractelement"(%585, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %587 = "llvm.extractelement"(%585, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %588 = "llvm.inline_asm"(%515, %586, %587, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %589 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %590 = "llvm.insertelement"(%0, %589, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %591 = "llvm.extractelement"(%590, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %592 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %595 = "llvm.insertelement"(%1, %513, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %596 = "llvm.insertelement"(%595, %514, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %597 = "llvm.extractelement"(%596, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %598 = "llvm.extractelement"(%596, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %599 = "llvm.inline_asm"(%515, %597, %598, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %600 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %601 = "llvm.insertelement"(%0, %600, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %602 = "llvm.extractelement"(%601, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %603 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %604 = "llvm.insertelement"(%0, %603, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %605 = "llvm.extractelement"(%604, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %606 = "llvm.trunc"(%524) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %607 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %608 = "llvm.trunc"(%536) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %609 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %610 = "llvm.trunc"(%547) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %611 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %612 = "llvm.trunc"(%558) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %613 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %614 = "llvm.trunc"(%569) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %615 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %616 = "llvm.trunc"(%580) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %617 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %618 = "llvm.trunc"(%591) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %619 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %620 = "llvm.trunc"(%602) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %621 = "llvm.trunc"(%605) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %414) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %623 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %624 = "llvm.getelementptr"(%arg1, %429) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %625 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %626 = "llvm.getelementptr"(%arg1, %440) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %627 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %628 = "llvm.getelementptr"(%arg1, %451) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %629 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %630 = "llvm.getelementptr"(%arg1, %462) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %631 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %632 = "llvm.getelementptr"(%arg1, %473) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %633 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %634 = "llvm.getelementptr"(%arg1, %484) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %635 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %636 = "llvm.getelementptr"(%arg1, %495) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %637 = "llvm.getelementptr"(%arg1, %498) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %638 = "llvm.insertelement"(%8, %221, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %639 = "llvm.bitcast"(%638) : (vector<1xf32>) -> i32 loc(#loc17)
    %640 = "llvm.inline_asm"(%639, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %641 = "llvm.insertelement"(%8, %232, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %642 = "llvm.bitcast"(%641) : (vector<1xf32>) -> i32 loc(#loc17)
    %643 = "llvm.inline_asm"(%642, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %644 = "llvm.insertelement"(%8, %243, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %645 = "llvm.bitcast"(%644) : (vector<1xf32>) -> i32 loc(#loc17)
    %646 = "llvm.inline_asm"(%645, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %647 = "llvm.insertelement"(%8, %254, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %648 = "llvm.bitcast"(%647) : (vector<1xf32>) -> i32 loc(#loc17)
    %649 = "llvm.inline_asm"(%648, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %650 = "llvm.insertelement"(%8, %265, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %651 = "llvm.bitcast"(%650) : (vector<1xf32>) -> i32 loc(#loc17)
    %652 = "llvm.inline_asm"(%651, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %653 = "llvm.insertelement"(%8, %276, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %654 = "llvm.bitcast"(%653) : (vector<1xf32>) -> i32 loc(#loc17)
    %655 = "llvm.inline_asm"(%654, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %656 = "llvm.insertelement"(%8, %287, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %657 = "llvm.bitcast"(%656) : (vector<1xf32>) -> i32 loc(#loc17)
    %658 = "llvm.inline_asm"(%657, %628, %612) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %659 = "llvm.insertelement"(%8, %298, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %660 = "llvm.bitcast"(%659) : (vector<1xf32>) -> i32 loc(#loc17)
    %661 = "llvm.inline_asm"(%660, %629, %613) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %662 = "llvm.insertelement"(%8, %324, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %663 = "llvm.bitcast"(%662) : (vector<1xf32>) -> i32 loc(#loc17)
    %664 = "llvm.inline_asm"(%663, %630, %614) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %665 = "llvm.insertelement"(%8, %330, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %666 = "llvm.bitcast"(%665) : (vector<1xf32>) -> i32 loc(#loc17)
    %667 = "llvm.inline_asm"(%666, %631, %615) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %668 = "llvm.insertelement"(%8, %336, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %669 = "llvm.bitcast"(%668) : (vector<1xf32>) -> i32 loc(#loc17)
    %670 = "llvm.inline_asm"(%669, %632, %616) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %671 = "llvm.insertelement"(%8, %342, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %672 = "llvm.bitcast"(%671) : (vector<1xf32>) -> i32 loc(#loc17)
    %673 = "llvm.inline_asm"(%672, %633, %617) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %674 = "llvm.insertelement"(%8, %348, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %675 = "llvm.bitcast"(%674) : (vector<1xf32>) -> i32 loc(#loc17)
    %676 = "llvm.inline_asm"(%675, %634, %618) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %677 = "llvm.insertelement"(%8, %354, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %678 = "llvm.bitcast"(%677) : (vector<1xf32>) -> i32 loc(#loc17)
    %679 = "llvm.inline_asm"(%678, %635, %619) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %680 = "llvm.insertelement"(%8, %360, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %681 = "llvm.bitcast"(%680) : (vector<1xf32>) -> i32 loc(#loc17)
    %682 = "llvm.inline_asm"(%681, %636, %620) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %683 = "llvm.insertelement"(%8, %366, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %684 = "llvm.bitcast"(%683) : (vector<1xf32>) -> i32 loc(#loc17)
    %685 = "llvm.inline_asm"(%684, %637, %621) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    "llvm.return"() : () -> () loc(#loc18)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/2248746708.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/2248746708.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/2248746708.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 2.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %153 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %154 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %155 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %156 = "llvm.fmul"(%148, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %157 = "llvm.fmul"(%149, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %158 = "llvm.fmul"(%150, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %159 = "llvm.fmul"(%151, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %160 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %161 = "llvm.xor"(%23, %160) : (i32, i32) -> i32 loc(#loc10)
    %162 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc10)
    %164 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %165 = "llvm.xor"(%163, %164) : (i32, i32) -> i32 loc(#loc10)
    %166 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %167 = "llvm.xor"(%165, %166) : (i32, i32) -> i32 loc(#loc10)
    %168 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %169 = "llvm.xor"(%167, %168) : (i32, i32) -> i32 loc(#loc10)
    %170 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %171 = "llvm.xor"(%169, %170) : (i32, i32) -> i32 loc(#loc10)
    %172 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc10)
    %173 = "llvm.shl"(%172, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %174 = "llvm.add"(%173, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %175 = "llvm.getelementptr"(%9, %174) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %176 = "llvm.insertelement"(%8, %152, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %177 = "llvm.extractelement"(%176, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %178 = "llvm.bitcast"(%177) : (f32) -> i32 loc(#loc10)
    %179 = "llvm.insertelement"(%6, %178, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %180 = "llvm.inline_asm"(%175, %179, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %181 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc10)
    %182 = "llvm.lshr"(%181, %23) : (i32, i32) -> i32 loc(#loc10)
    %183 = "llvm.shl"(%182, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %184 = "llvm.add"(%183, %181) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %185 = "llvm.getelementptr"(%9, %184) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %186 = "llvm.insertelement"(%8, %153, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %187 = "llvm.extractelement"(%186, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %188 = "llvm.bitcast"(%187) : (f32) -> i32 loc(#loc10)
    %189 = "llvm.insertelement"(%6, %188, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %190 = "llvm.inline_asm"(%185, %189, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %191 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc10)
    %192 = "llvm.lshr"(%191, %23) : (i32, i32) -> i32 loc(#loc10)
    %193 = "llvm.shl"(%192, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %194 = "llvm.add"(%193, %191) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %195 = "llvm.getelementptr"(%9, %194) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %196 = "llvm.insertelement"(%8, %154, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %197 = "llvm.extractelement"(%196, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %198 = "llvm.bitcast"(%197) : (f32) -> i32 loc(#loc10)
    %199 = "llvm.insertelement"(%6, %198, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %200 = "llvm.inline_asm"(%195, %199, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %201 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc10)
    %202 = "llvm.lshr"(%201, %23) : (i32, i32) -> i32 loc(#loc10)
    %203 = "llvm.shl"(%202, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %204 = "llvm.add"(%203, %201) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %205 = "llvm.getelementptr"(%9, %204) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %206 = "llvm.insertelement"(%8, %155, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %207 = "llvm.extractelement"(%206, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %208 = "llvm.bitcast"(%207) : (f32) -> i32 loc(#loc10)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %210 = "llvm.inline_asm"(%205, %209, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %211 = "llvm.xor"(%171, %23) : (i32, i32) -> i32 loc(#loc10)
    %212 = "llvm.lshr"(%211, %23) : (i32, i32) -> i32 loc(#loc10)
    %213 = "llvm.shl"(%212, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %214 = "llvm.add"(%213, %211) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %215 = "llvm.getelementptr"(%9, %214) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %216 = "llvm.load"(%215) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %217 = "llvm.insertelement"(%6, %216, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %218 = "llvm.extractelement"(%217, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %219 = "llvm.bitcast"(%218) : (i32) -> f32 loc(#loc10)
    %220 = "llvm.insertelement"(%8, %219, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %222 = "llvm.xor"(%171, %18) : (i32, i32) -> i32 loc(#loc10)
    %223 = "llvm.lshr"(%222, %23) : (i32, i32) -> i32 loc(#loc10)
    %224 = "llvm.shl"(%223, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %225 = "llvm.add"(%224, %222) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %226 = "llvm.getelementptr"(%9, %225) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %227 = "llvm.load"(%226) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %228 = "llvm.insertelement"(%6, %227, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %229 = "llvm.extractelement"(%228, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %230 = "llvm.bitcast"(%229) : (i32) -> f32 loc(#loc10)
    %231 = "llvm.insertelement"(%8, %230, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %233 = "llvm.xor"(%171, %17) : (i32, i32) -> i32 loc(#loc10)
    %234 = "llvm.lshr"(%233, %23) : (i32, i32) -> i32 loc(#loc10)
    %235 = "llvm.shl"(%234, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %236 = "llvm.add"(%235, %233) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %237 = "llvm.getelementptr"(%9, %236) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %238 = "llvm.load"(%237) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %239 = "llvm.insertelement"(%6, %238, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %241 = "llvm.bitcast"(%240) : (i32) -> f32 loc(#loc10)
    %242 = "llvm.insertelement"(%8, %241, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %244 = "llvm.xor"(%171, %5) : (i32, i32) -> i32 loc(#loc10)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc10)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %249 = "llvm.load"(%248) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %250 = "llvm.insertelement"(%6, %249, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %251 = "llvm.extractelement"(%250, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %252 = "llvm.bitcast"(%251) : (i32) -> f32 loc(#loc10)
    %253 = "llvm.insertelement"(%8, %252, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %255 = "llvm.xor"(%171, %16) : (i32, i32) -> i32 loc(#loc10)
    %256 = "llvm.lshr"(%255, %23) : (i32, i32) -> i32 loc(#loc10)
    %257 = "llvm.shl"(%256, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %258 = "llvm.add"(%257, %255) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %259 = "llvm.getelementptr"(%9, %258) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %260 = "llvm.load"(%259) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %261 = "llvm.insertelement"(%6, %260, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %262 = "llvm.extractelement"(%261, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %263 = "llvm.bitcast"(%262) : (i32) -> f32 loc(#loc10)
    %264 = "llvm.insertelement"(%8, %263, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %266 = "llvm.xor"(%171, %4) : (i32, i32) -> i32 loc(#loc10)
    %267 = "llvm.lshr"(%266, %23) : (i32, i32) -> i32 loc(#loc10)
    %268 = "llvm.shl"(%267, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %269 = "llvm.add"(%268, %266) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %270 = "llvm.getelementptr"(%9, %269) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %271 = "llvm.load"(%270) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %272 = "llvm.insertelement"(%6, %271, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %273 = "llvm.extractelement"(%272, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %274 = "llvm.bitcast"(%273) : (i32) -> f32 loc(#loc10)
    %275 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %277 = "llvm.xor"(%171, %13) : (i32, i32) -> i32 loc(#loc10)
    %278 = "llvm.lshr"(%277, %23) : (i32, i32) -> i32 loc(#loc10)
    %279 = "llvm.shl"(%278, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %280 = "llvm.add"(%279, %277) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %281 = "llvm.getelementptr"(%9, %280) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %282 = "llvm.load"(%281) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %283 = "llvm.insertelement"(%6, %282, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %284 = "llvm.extractelement"(%283, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %285 = "llvm.bitcast"(%284) : (i32) -> f32 loc(#loc10)
    %286 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %288 = "llvm.xor"(%171, %3) : (i32, i32) -> i32 loc(#loc10)
    %289 = "llvm.lshr"(%288, %23) : (i32, i32) -> i32 loc(#loc10)
    %290 = "llvm.shl"(%289, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %291 = "llvm.add"(%290, %288) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %292 = "llvm.getelementptr"(%9, %291) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %293 = "llvm.load"(%292) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %295 = "llvm.extractelement"(%294, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %296 = "llvm.bitcast"(%295) : (i32) -> f32 loc(#loc10)
    %297 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %298 = "llvm.extractelement"(%297, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %299 = "llvm.insertelement"(%8, %156, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %300 = "llvm.extractelement"(%299, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %301 = "llvm.bitcast"(%300) : (f32) -> i32 loc(#loc10)
    %302 = "llvm.insertelement"(%6, %301, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %303 = "llvm.inline_asm"(%175, %302, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %304 = "llvm.insertelement"(%8, %157, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %305 = "llvm.extractelement"(%304, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %306 = "llvm.bitcast"(%305) : (f32) -> i32 loc(#loc10)
    %307 = "llvm.insertelement"(%6, %306, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %308 = "llvm.inline_asm"(%185, %307, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %309 = "llvm.insertelement"(%8, %158, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %310 = "llvm.extractelement"(%309, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %311 = "llvm.bitcast"(%310) : (f32) -> i32 loc(#loc10)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %313 = "llvm.inline_asm"(%195, %312, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %314 = "llvm.insertelement"(%8, %159, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %316 = "llvm.bitcast"(%315) : (f32) -> i32 loc(#loc10)
    %317 = "llvm.insertelement"(%6, %316, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %318 = "llvm.inline_asm"(%205, %317, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %319 = "llvm.load"(%215) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %320 = "llvm.insertelement"(%6, %319, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %321 = "llvm.extractelement"(%320, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %322 = "llvm.bitcast"(%321) : (i32) -> f32 loc(#loc10)
    %323 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %324 = "llvm.extractelement"(%323, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %325 = "llvm.load"(%226) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %326 = "llvm.insertelement"(%6, %325, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %327 = "llvm.extractelement"(%326, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %328 = "llvm.bitcast"(%327) : (i32) -> f32 loc(#loc10)
    %329 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %330 = "llvm.extractelement"(%329, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %331 = "llvm.load"(%237) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %332 = "llvm.insertelement"(%6, %331, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %333 = "llvm.extractelement"(%332, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %334 = "llvm.bitcast"(%333) : (i32) -> f32 loc(#loc10)
    %335 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %336 = "llvm.extractelement"(%335, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %337 = "llvm.load"(%248) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %338 = "llvm.insertelement"(%6, %337, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %339 = "llvm.extractelement"(%338, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %340 = "llvm.bitcast"(%339) : (i32) -> f32 loc(#loc10)
    %341 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %342 = "llvm.extractelement"(%341, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %343 = "llvm.load"(%259) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %344 = "llvm.insertelement"(%6, %343, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %345 = "llvm.extractelement"(%344, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %346 = "llvm.bitcast"(%345) : (i32) -> f32 loc(#loc10)
    %347 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %349 = "llvm.load"(%270) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %350 = "llvm.insertelement"(%6, %349, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %352 = "llvm.bitcast"(%351) : (i32) -> f32 loc(#loc10)
    %353 = "llvm.insertelement"(%8, %352, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %354 = "llvm.extractelement"(%353, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %355 = "llvm.load"(%281) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %356 = "llvm.insertelement"(%6, %355, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %357 = "llvm.extractelement"(%356, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %358 = "llvm.bitcast"(%357) : (i32) -> f32 loc(#loc10)
    %359 = "llvm.insertelement"(%8, %358, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %360 = "llvm.extractelement"(%359, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %361 = "llvm.load"(%292) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %362 = "llvm.insertelement"(%6, %361, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %363 = "llvm.extractelement"(%362, %23) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %364 = "llvm.bitcast"(%363) : (i32) -> f32 loc(#loc10)
    %365 = "llvm.insertelement"(%8, %364, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %366 = "llvm.extractelement"(%365, %23) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %367 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %369 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %370 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %371 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %372 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %373 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %374 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %375 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %376 = "llvm.icmp"(%367, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %377 = "llvm.icmp"(%368, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %378 = "llvm.icmp"(%369, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %379 = "llvm.icmp"(%370, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %380 = "llvm.icmp"(%371, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %381 = "llvm.icmp"(%372, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %382 = "llvm.icmp"(%373, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %383 = "llvm.icmp"(%374, %375) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %384 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %385 = "llvm.xor"(%23, %384) : (i32, i32) -> i32 loc(#loc14)
    %386 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc14)
    %388 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc14)
    %390 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %391 = "llvm.xor"(%389, %390) : (i32, i32) -> i32 loc(#loc14)
    %392 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %393 = "llvm.xor"(%391, %392) : (i32, i32) -> i32 loc(#loc14)
    %394 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %395 = "llvm.xor"(%393, %394) : (i32, i32) -> i32 loc(#loc14)
    %396 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %397 = "llvm.xor"(%395, %396) : (i32, i32) -> i32 loc(#loc14)
    %398 = "llvm.xor"(%397, %23) : (i32, i32) -> i32 loc(#loc14)
    %399 = "llvm.lshr"(%398, %22) : (i32, i32) -> i32 loc(#loc14)
    %400 = "llvm.shl"(%399, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %401 = "llvm.add"(%400, %398) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %402 = "llvm.getelementptr"(%9, %401) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %403 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %404 = "llvm.insertelement"(%403, %367, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %405 = "llvm.extractelement"(%404, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %406 = "llvm.extractelement"(%404, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %407 = "llvm.inline_asm"(%402, %405, %406, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %408 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc14)
    %409 = "llvm.shl"(%408, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %410 = "llvm.add"(%409, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %411 = "llvm.getelementptr"(%9, %410) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %412 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %413 = "llvm.insertelement"(%6, %412, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %414 = "llvm.extractelement"(%413, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %415 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc14)
    %416 = "llvm.shl"(%415, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %417 = "llvm.add"(%416, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %422 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %423 = "llvm.insertelement"(%422, %368, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %424 = "llvm.extractelement"(%423, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %425 = "llvm.extractelement"(%423, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %426 = "llvm.inline_asm"(%402, %424, %425, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %427 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %428 = "llvm.insertelement"(%6, %427, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %429 = "llvm.extractelement"(%428, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %430 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %433 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %434 = "llvm.insertelement"(%433, %369, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %435 = "llvm.extractelement"(%434, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %436 = "llvm.extractelement"(%434, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %437 = "llvm.inline_asm"(%402, %435, %436, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %438 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %439 = "llvm.insertelement"(%6, %438, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %440 = "llvm.extractelement"(%439, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %441 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %444 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %445 = "llvm.insertelement"(%444, %370, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %446 = "llvm.extractelement"(%445, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %447 = "llvm.extractelement"(%445, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %448 = "llvm.inline_asm"(%402, %446, %447, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %449 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %450 = "llvm.insertelement"(%6, %449, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %451 = "llvm.extractelement"(%450, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %452 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %455 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %456 = "llvm.insertelement"(%455, %371, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %457 = "llvm.extractelement"(%456, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %458 = "llvm.extractelement"(%456, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %459 = "llvm.inline_asm"(%402, %457, %458, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %460 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %461 = "llvm.insertelement"(%6, %460, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %462 = "llvm.extractelement"(%461, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %463 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %466 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %467 = "llvm.insertelement"(%466, %372, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %468 = "llvm.extractelement"(%467, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %469 = "llvm.extractelement"(%467, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %470 = "llvm.inline_asm"(%402, %468, %469, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %471 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %472 = "llvm.insertelement"(%6, %471, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %473 = "llvm.extractelement"(%472, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %474 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %477 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %478 = "llvm.insertelement"(%477, %373, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %479 = "llvm.extractelement"(%478, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %480 = "llvm.extractelement"(%478, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %481 = "llvm.inline_asm"(%402, %479, %480, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %482 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %483 = "llvm.insertelement"(%6, %482, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %484 = "llvm.extractelement"(%483, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %485 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %488 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %489 = "llvm.insertelement"(%488, %374, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc14)
    %490 = "llvm.extractelement"(%489, %23) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %491 = "llvm.extractelement"(%489, %22) : (vector<2xi32>, i32) -> i32 loc(#loc14)
    %492 = "llvm.inline_asm"(%402, %490, %491, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %493 = "llvm.load"(%411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %494 = "llvm.insertelement"(%6, %493, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %495 = "llvm.extractelement"(%494, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    %496 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc14)
    %497 = "llvm.insertelement"(%6, %496, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc14)
    %498 = "llvm.extractelement"(%497, %23) : (vector<1xi32>, i32) -> i32 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %499 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc15)
    %500 = "llvm.zext"(%376) : (i1) -> i8 loc(#loc15)
    %501 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc15)
    %502 = "llvm.zext"(%377) : (i1) -> i8 loc(#loc15)
    %503 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc15)
    %504 = "llvm.zext"(%378) : (i1) -> i8 loc(#loc15)
    %505 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc15)
    %506 = "llvm.zext"(%379) : (i1) -> i8 loc(#loc15)
    %507 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc15)
    %508 = "llvm.zext"(%380) : (i1) -> i8 loc(#loc15)
    %509 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc15)
    %510 = "llvm.zext"(%381) : (i1) -> i8 loc(#loc15)
    %511 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc15)
    %512 = "llvm.zext"(%382) : (i1) -> i8 loc(#loc15)
    %513 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc15)
    %514 = "llvm.zext"(%383) : (i1) -> i8 loc(#loc15)
    %515 = "llvm.getelementptr"(%9, %401) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %516 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %517 = "llvm.insertelement"(%516, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %518 = "llvm.extractelement"(%517, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %519 = "llvm.extractelement"(%517, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %520 = "llvm.inline_asm"(%515, %518, %519, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %521 = "llvm.getelementptr"(%9, %410) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %522 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %523 = "llvm.insertelement"(%0, %522, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %524 = "llvm.extractelement"(%523, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %525 = "llvm.getelementptr"(%9, %417) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %526 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %529 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %530 = "llvm.insertelement"(%529, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %531 = "llvm.extractelement"(%530, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %532 = "llvm.extractelement"(%530, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %533 = "llvm.inline_asm"(%515, %531, %532, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %534 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %535 = "llvm.insertelement"(%0, %534, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %536 = "llvm.extractelement"(%535, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %537 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %540 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %541 = "llvm.insertelement"(%540, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %542 = "llvm.extractelement"(%541, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %543 = "llvm.extractelement"(%541, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %544 = "llvm.inline_asm"(%515, %542, %543, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %545 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %546 = "llvm.insertelement"(%0, %545, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %547 = "llvm.extractelement"(%546, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %548 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %551 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %552 = "llvm.insertelement"(%551, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %553 = "llvm.extractelement"(%552, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %554 = "llvm.extractelement"(%552, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %555 = "llvm.inline_asm"(%515, %553, %554, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %556 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %557 = "llvm.insertelement"(%0, %556, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %558 = "llvm.extractelement"(%557, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %559 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %562 = "llvm.insertelement"(%1, %507, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %563 = "llvm.insertelement"(%562, %508, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %564 = "llvm.extractelement"(%563, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %565 = "llvm.extractelement"(%563, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %566 = "llvm.inline_asm"(%515, %564, %565, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %567 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %568 = "llvm.insertelement"(%0, %567, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %569 = "llvm.extractelement"(%568, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %570 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %573 = "llvm.insertelement"(%1, %509, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %574 = "llvm.insertelement"(%573, %510, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %575 = "llvm.extractelement"(%574, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %576 = "llvm.extractelement"(%574, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %577 = "llvm.inline_asm"(%515, %575, %576, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %578 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %579 = "llvm.insertelement"(%0, %578, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %580 = "llvm.extractelement"(%579, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %581 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %584 = "llvm.insertelement"(%1, %511, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %585 = "llvm.insertelement"(%584, %512, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %586 = "llvm.extractelement"(%585, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %587 = "llvm.extractelement"(%585, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %588 = "llvm.inline_asm"(%515, %586, %587, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %589 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %590 = "llvm.insertelement"(%0, %589, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %591 = "llvm.extractelement"(%590, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %592 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %595 = "llvm.insertelement"(%1, %513, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %596 = "llvm.insertelement"(%595, %514, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc15)
    %597 = "llvm.extractelement"(%596, %23) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %598 = "llvm.extractelement"(%596, %22) : (vector<2xi8>, i32) -> i8 loc(#loc15)
    %599 = "llvm.inline_asm"(%515, %597, %598, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %600 = "llvm.load"(%521) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %601 = "llvm.insertelement"(%0, %600, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %602 = "llvm.extractelement"(%601, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %603 = "llvm.load"(%525) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc15)
    %604 = "llvm.insertelement"(%0, %603, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc15)
    %605 = "llvm.extractelement"(%604, %23) : (vector<1xi8>, i32) -> i8 loc(#loc15)
    %606 = "llvm.trunc"(%524) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %607 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %608 = "llvm.trunc"(%536) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %609 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %610 = "llvm.trunc"(%547) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %611 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %612 = "llvm.trunc"(%558) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %613 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %614 = "llvm.trunc"(%569) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %615 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %616 = "llvm.trunc"(%580) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %617 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %618 = "llvm.trunc"(%591) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %619 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %620 = "llvm.trunc"(%602) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %621 = "llvm.trunc"(%605) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %414) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %623 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %624 = "llvm.getelementptr"(%arg1, %429) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %625 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %626 = "llvm.getelementptr"(%arg1, %440) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %627 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %628 = "llvm.getelementptr"(%arg1, %451) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %629 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %630 = "llvm.getelementptr"(%arg1, %462) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %631 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %632 = "llvm.getelementptr"(%arg1, %473) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %633 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %634 = "llvm.getelementptr"(%arg1, %484) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %635 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %636 = "llvm.getelementptr"(%arg1, %495) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %637 = "llvm.getelementptr"(%arg1, %498) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc16)
    %638 = "llvm.insertelement"(%8, %221, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %639 = "llvm.bitcast"(%638) : (vector<1xf32>) -> i32 loc(#loc17)
    %640 = "llvm.inline_asm"(%639, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %641 = "llvm.insertelement"(%8, %232, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %642 = "llvm.bitcast"(%641) : (vector<1xf32>) -> i32 loc(#loc17)
    %643 = "llvm.inline_asm"(%642, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %644 = "llvm.insertelement"(%8, %243, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %645 = "llvm.bitcast"(%644) : (vector<1xf32>) -> i32 loc(#loc17)
    %646 = "llvm.inline_asm"(%645, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %647 = "llvm.insertelement"(%8, %254, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %648 = "llvm.bitcast"(%647) : (vector<1xf32>) -> i32 loc(#loc17)
    %649 = "llvm.inline_asm"(%648, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %650 = "llvm.insertelement"(%8, %265, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %651 = "llvm.bitcast"(%650) : (vector<1xf32>) -> i32 loc(#loc17)
    %652 = "llvm.inline_asm"(%651, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %653 = "llvm.insertelement"(%8, %276, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %654 = "llvm.bitcast"(%653) : (vector<1xf32>) -> i32 loc(#loc17)
    %655 = "llvm.inline_asm"(%654, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %656 = "llvm.insertelement"(%8, %287, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %657 = "llvm.bitcast"(%656) : (vector<1xf32>) -> i32 loc(#loc17)
    %658 = "llvm.inline_asm"(%657, %628, %612) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %659 = "llvm.insertelement"(%8, %298, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %660 = "llvm.bitcast"(%659) : (vector<1xf32>) -> i32 loc(#loc17)
    %661 = "llvm.inline_asm"(%660, %629, %613) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %662 = "llvm.insertelement"(%8, %324, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %663 = "llvm.bitcast"(%662) : (vector<1xf32>) -> i32 loc(#loc17)
    %664 = "llvm.inline_asm"(%663, %630, %614) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %665 = "llvm.insertelement"(%8, %330, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %666 = "llvm.bitcast"(%665) : (vector<1xf32>) -> i32 loc(#loc17)
    %667 = "llvm.inline_asm"(%666, %631, %615) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %668 = "llvm.insertelement"(%8, %336, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %669 = "llvm.bitcast"(%668) : (vector<1xf32>) -> i32 loc(#loc17)
    %670 = "llvm.inline_asm"(%669, %632, %616) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %671 = "llvm.insertelement"(%8, %342, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %672 = "llvm.bitcast"(%671) : (vector<1xf32>) -> i32 loc(#loc17)
    %673 = "llvm.inline_asm"(%672, %633, %617) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %674 = "llvm.insertelement"(%8, %348, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %675 = "llvm.bitcast"(%674) : (vector<1xf32>) -> i32 loc(#loc17)
    %676 = "llvm.inline_asm"(%675, %634, %618) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %677 = "llvm.insertelement"(%8, %354, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %678 = "llvm.bitcast"(%677) : (vector<1xf32>) -> i32 loc(#loc17)
    %679 = "llvm.inline_asm"(%678, %635, %619) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %680 = "llvm.insertelement"(%8, %360, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %681 = "llvm.bitcast"(%680) : (vector<1xf32>) -> i32 loc(#loc17)
    %682 = "llvm.inline_asm"(%681, %636, %620) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    %683 = "llvm.insertelement"(%8, %366, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc17)
    %684 = "llvm.bitcast"(%683) : (vector<1xf32>) -> i32 loc(#loc17)
    %685 = "llvm.inline_asm"(%684, %637, %621) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc17)
    "llvm.return"() : () -> () loc(#loc18)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/2248746708.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/2248746708.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/2248746708.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/2248746708.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/2248746708.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/2248746708.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/2248746708.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/2248746708.py":9:17)
#loc10 = loc("/tmp/ipykernel_14131/2248746708.py":10:17)
#loc11 = loc("/tmp/ipykernel_14131/2248746708.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/2248746708.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/2248746708.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/2248746708.py":17:35)
#loc15 = loc("/tmp/ipykernel_14131/2248746708.py":18:32)
#loc16 = loc("/tmp/ipykernel_14131/2248746708.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/2248746708.py":20:47)
#loc18 = loc("/tmp/ipykernel_14131/2248746708.py":20:4)


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc11)
    %34 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc11)
    %35 = "arith.muli"(%33, %34) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc11)
    %36 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc11)
    %37 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc11)
    %38 = "arith.cmpi"(%35, %36) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc11)
    %39 = "arith.cmpi"(%35, %37) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc11)
    %40 = "arith.andi"(%38, %39) : (i1, i1) -> i1 loc(#loc11)
    %41 = "arith.muli"(%32, %32) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %42 = "arith.sitofp"(%41) : (i32) -> f32 loc(#loc12)
    %43 = "tt.splat"(%42) : (f32) -> tensor<2x1024xf32> loc(#loc12)
    %44 = "arith.mulf"(%43, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %45 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %46 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc14)
    %47 = "arith.extsi"(%46) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc14)
    %48 = "arith.extsi"(%45) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc14)
    %49 = "arith.addi"(%47, %48) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc14)
    %50 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc14)
    %51 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc14)
    %52 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc14)
    %53 = "arith.cmpi"(%49, %52) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc14)
    %54 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc14)
    %55 = "arith.cmpi"(%49, %54) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc14)
    %56 = "arith.andi"(%53, %55) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc14)
    %57 = "arith.addi"(%46, %45) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %58 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %59 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc16)
    %60 = "arith.extsi"(%59) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %61 = "arith.extsi"(%58) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %62 = "arith.addi"(%60, %61) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc16)
    %63 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc16)
    %64 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc16)
    %65 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %66 = "arith.cmpi"(%62, %65) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %67 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %68 = "arith.cmpi"(%62, %67) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %69 = "arith.andi"(%66, %68) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc16)
    %70 = "arith.addi"(%59, %58) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %71 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %72 = "arith.extsi"(%70) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %73 = "arith.extsi"(%71) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %74 = "arith.addi"(%72, %73) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc17)
    %75 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc17)
    %76 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc17)
    %77 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %78 = "arith.cmpi"(%74, %77) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %79 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %80 = "arith.cmpi"(%74, %79) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %81 = "arith.andi"(%78, %80) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc17)
    %82 = "arith.addi"(%70, %71) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %83 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %84 = "arith.cmpi"(%57, %83) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc19)
    %86 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc19)
    %87 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc19)
    %88 = "arith.extsi"(%86) : (i32) -> i64 loc(#loc19)
    %89 = "arith.muli"(%87, %88) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc19)
    %90 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc19)
    %91 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc19)
    %92 = "arith.cmpi"(%89, %90) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc19)
    %93 = "arith.cmpi"(%89, %91) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc19)
    %94 = "arith.andi"(%92, %93) : (i1, i1) -> i1 loc(#loc19)
    %95 = "arith.muli"(%arg2, %86) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %96 = "tt.splat"(%95) : (i32) -> tensor<1024xi32> loc(#loc20)
    %97 = "arith.cmpi"(%82, %96) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %98 = "tt.join"(%57, %82) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %99 = "tt.trans"(%98) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %100 = "tt.join"(%84, %97) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %101 = "tt.trans"(%100) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %102 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %103 = "tt.addptr"(%102, %99) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%103, %44, %101) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":9:8)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @scalar_mult_duplicate) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc2)
    %3 = "arith.extsi"(%0) : (i32) -> i64 loc(#loc2)
    %4 = "arith.extsi"(%2) : (i32) -> i64 loc(#loc2)
    %5 = "arith.muli"(%3, %4) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc2)
    %6 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc2)
    %7 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc2)
    %8 = "arith.cmpi"(%5, %6) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %9 = "arith.cmpi"(%5, %7) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc2)
    %10 = "arith.andi"(%8, %9) : (i1, i1) -> i1 loc(#loc2)
    %11 = "arith.muli"(%0, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc2)
    %12 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc3)
    %13 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc4)
    %14 = "arith.extsi"(%13) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %15 = "arith.extsi"(%12) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc4)
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc4)
    %17 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc4)
    %18 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc4)
    %19 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %20 = "arith.cmpi"(%16, %19) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %21 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc4)
    %22 = "arith.cmpi"(%16, %21) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc4)
    %23 = "arith.andi"(%20, %22) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc4)
    %24 = "arith.addi"(%13, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc4)
    %25 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc5)
    %26 = "arith.cmpi"(%24, %25) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc5)
    %27 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %28 = "tt.addptr"(%27, %24) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %29 = "tt.load"(%28, %26) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc7)
    %30 = "tt.reshape"(%29) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc8)
    %31 = "tt.broadcast"(%30) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc9)
    %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %33 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc11)
    %34 = "arith.extsi"(%32) : (i32) -> i64 loc(#loc11)
    %35 = "arith.muli"(%33, %34) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc11)
    %36 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc11)
    %37 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc11)
    %38 = "arith.cmpi"(%35, %36) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc11)
    %39 = "arith.cmpi"(%35, %37) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc11)
    %40 = "arith.andi"(%38, %39) : (i1, i1) -> i1 loc(#loc11)
    %41 = "arith.muli"(%32, %32) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %42 = "arith.sitofp"(%41) : (i32) -> f32 loc(#loc12)
    %43 = "tt.splat"(%42) : (f32) -> tensor<2x1024xf32> loc(#loc12)
    %44 = "arith.mulf"(%43, %31) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc12)
    %45 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %46 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc14)
    %47 = "arith.extsi"(%46) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc14)
    %48 = "arith.extsi"(%45) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc14)
    %49 = "arith.addi"(%47, %48) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc14)
    %50 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc14)
    %51 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc14)
    %52 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc14)
    %53 = "arith.cmpi"(%49, %52) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc14)
    %54 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc14)
    %55 = "arith.cmpi"(%49, %54) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc14)
    %56 = "arith.andi"(%53, %55) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc14)
    %57 = "arith.addi"(%46, %45) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %58 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc15)
    %59 = "tt.splat"(%11) : (i32) -> tensor<1024xi32> loc(#loc16)
    %60 = "arith.extsi"(%59) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %61 = "arith.extsi"(%58) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc16)
    %62 = "arith.addi"(%60, %61) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc16)
    %63 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc16)
    %64 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc16)
    %65 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %66 = "arith.cmpi"(%62, %65) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %67 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc16)
    %68 = "arith.cmpi"(%62, %67) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc16)
    %69 = "arith.andi"(%66, %68) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc16)
    %70 = "arith.addi"(%59, %58) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %71 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %72 = "arith.extsi"(%70) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %73 = "arith.extsi"(%71) : (tensor<1024xi32>) -> tensor<1024xi64> loc(#loc17)
    %74 = "arith.addi"(%72, %73) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi64> loc(#loc17)
    %75 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc17)
    %76 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc17)
    %77 = "arith.constant"() <{value = dense<2147483647> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %78 = "arith.cmpi"(%74, %77) <{predicate = 3 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %79 = "arith.constant"() <{value = dense<-2147483648> : tensor<1024xi64>}> : () -> tensor<1024xi64> loc(#loc17)
    %80 = "arith.cmpi"(%74, %79) <{predicate = 5 : i64}> : (tensor<1024xi64>, tensor<1024xi64>) -> tensor<1024xi1> loc(#loc17)
    %81 = "arith.andi"(%78, %80) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024xi1> loc(#loc17)
    %82 = "arith.addi"(%70, %71) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc17)
    %83 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc18)
    %84 = "arith.cmpi"(%57, %83) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc19)
    %86 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc19)
    %87 = "arith.extsi"(%arg2) : (i32) -> i64 loc(#loc19)
    %88 = "arith.extsi"(%86) : (i32) -> i64 loc(#loc19)
    %89 = "arith.muli"(%87, %88) <{overflowFlags = #arith.overflow<none>}> : (i64, i64) -> i64 loc(#loc19)
    %90 = "arith.constant"() <{value = 2147483647 : i64}> : () -> i64 loc(#loc19)
    %91 = "arith.constant"() <{value = -2147483648 : i64}> : () -> i64 loc(#loc19)
    %92 = "arith.cmpi"(%89, %90) <{predicate = 3 : i64}> : (i64, i64) -> i1 loc(#loc19)
    %93 = "arith.cmpi"(%89, %91) <{predicate = 5 : i64}> : (i64, i64) -> i1 loc(#loc19)
    %94 = "arith.andi"(%92, %93) : (i1, i1) -> i1 loc(#loc19)
    %95 = "arith.muli"(%arg2, %86) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc19)
    %96 = "tt.splat"(%95) : (i32) -> tensor<1024xi32> loc(#loc20)
    %97 = "arith.cmpi"(%82, %96) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc20)
    %98 = "tt.join"(%57, %82) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc21)
    %99 = "tt.trans"(%98) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc22)
    %100 = "tt.join"(%84, %97) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc23)
    %101 = "tt.trans"(%100) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc24)
    %102 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    %103 = "tt.addptr"(%102, %99) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc25)
    "tt.store"(%103, %44, %101) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc26)
    "tt.return"() : () -> () loc(#loc27)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":9:8)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:17)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc27 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<2x1024xf32>}> : () -> tensor<2x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "tt.broadcast"(%13) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %15 = "arith.mulf"(%14, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<2x1024xf32>, tensor<2x1024xf32>) -> tensor<2x1024xf32> loc(#loc11)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc12)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc13)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc13)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc14)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc15)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc16)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc17)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc17)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc18)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc19)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc19)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc20)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc21)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc22)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc23)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc24)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc25)
    "tt.return"() : () -> () loc(#loc26)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":8:85)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc26 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc11)
    %17 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc12)
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc12)
    %19 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc13)
    %20 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc14)
    %21 = "arith.addi"(%20, %19) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc14)
    %22 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc15)
    %23 = "arith.addi"(%21, %22) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc15)
    %24 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc16)
    %25 = "arith.cmpi"(%18, %24) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc16)
    %26 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %27 = "tt.splat"(%26) : (i32) -> tensor<1024xi32> loc(#loc18)
    %28 = "arith.cmpi"(%23, %27) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc18)
    %29 = "tt.join"(%18, %23) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc19)
    %30 = "tt.trans"(%29) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc20)
    %31 = "tt.join"(%25, %28) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc21)
    %32 = "tt.trans"(%31) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc22)
    %33 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc23)
    %34 = "tt.addptr"(%33, %30) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc23)
    "tt.store"(%34, %15, %32) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc24)
    "tt.return"() : () -> () loc(#loc25)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":12:47)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":12:34)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":13:48)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":13:35)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":14:37)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc21 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc22 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc23 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc24 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc25 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32>}> : () -> tensor<1x1024xf32> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi32>) -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>>, tensor<1024xi1>) -> tensor<1024xf32> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32>) -> tensor<1x1024xf32> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32>, tensor<1x1024xf32>) -> tensor<1x1024xf32> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32>) -> tensor<2x1024xf32> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024x2xi32> loc(#loc14)
    %21 = "tt.trans"(%20) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32>) -> tensor<2x1024xi32> loc(#loc15)
    %22 = "tt.join"(%9, %19) : (tensor<1024xi1>, tensor<1024xi1>) -> tensor<1024x2xi1> loc(#loc16)
    %23 = "tt.trans"(%22) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1>) -> tensor<2x1024xi1> loc(#loc17)
    %24 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    %25 = "tt.addptr"(%24, %21) : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xi32>) -> tensor<2x1024x!tt.ptr<f32>> loc(#loc18)
    "tt.store"(%25, %15, %23) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>>, tensor<2x1024xf32>, tensor<2x1024xi1>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "tt.load"(%11, %9) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %13 = "tt.reshape"(%12) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %14 = "arith.mulf"(%13, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %15 = "tt.broadcast"(%14) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %16 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %17 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %18 = "tt.splat"(%17) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %19 = "arith.cmpi"(%16, %18) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %20 = "tt.join"(%7, %16) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked2> loc(#loc14)
    %21 = "ttg.convert_layout"(%20) : (tensor<1024x2xi32, #blocked2>) -> tensor<1024x2xi32, #blocked3> loc(#loc15)
    %22 = "tt.trans"(%21) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked3>) -> tensor<2x1024xi32, #blocked4> loc(#loc15)
    %23 = "ttg.convert_layout"(%22) : (tensor<2x1024xi32, #blocked4>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %24 = "tt.join"(%9, %19) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked2> loc(#loc17)
    %25 = "ttg.convert_layout"(%24) : (tensor<1024x2xi1, #blocked2>) -> tensor<1024x2xi1, #blocked3> loc(#loc18)
    %26 = "tt.trans"(%25) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked3>) -> tensor<2x1024xi1, #blocked4> loc(#loc18)
    %27 = "ttg.convert_layout"(%26) : (tensor<2x1024xi1, #blocked4>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %28 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = "tt.addptr"(%28, %23) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    "tt.store"(%29, %15, %27) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xf32, #blocked>, tensor<2x1024xi1, #blocked>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %2) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %7 = "arith.addi"(%6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %9 = "arith.cmpi"(%7, %8) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %10 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = "tt.addptr"(%10, %7) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = "ttg.convert_layout"(%11) : (tensor<1024x!tt.ptr<f32>, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %13 = "ttg.convert_layout"(%9) : (tensor<1024xi1, #blocked1>) -> tensor<1024xi1, #blocked2> loc(#loc8)
    %14 = "tt.load"(%12, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024xf32, #blocked2> loc(#loc8)
    %15 = "ttg.convert_layout"(%14) : (tensor<1024xf32, #blocked2>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %16 = "tt.reshape"(%15) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %17 = "arith.mulf"(%16, %0) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %18 = "tt.broadcast"(%17) : (tensor<1x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked> loc(#loc10)
    %19 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc11)
    %20 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %21 = "tt.splat"(%20) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc13)
    %22 = "arith.cmpi"(%19, %21) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc13)
    %23 = "tt.join"(%7, %19) : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x2xi32, #blocked3> loc(#loc14)
    %24 = "ttg.convert_layout"(%23) : (tensor<1024x2xi32, #blocked3>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %25 = "tt.trans"(%24) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked4>) -> tensor<2x1024xi32, #blocked5> loc(#loc15)
    %26 = "ttg.convert_layout"(%25) : (tensor<2x1024xi32, #blocked5>) -> tensor<2x1024xi32, #blocked> loc(#loc16)
    %27 = "tt.join"(%9, %22) : (tensor<1024xi1, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024x2xi1, #blocked3> loc(#loc17)
    %28 = "ttg.convert_layout"(%27) : (tensor<1024x2xi1, #blocked3>) -> tensor<1024x2xi1, #blocked4> loc(#loc18)
    %29 = "tt.trans"(%28) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked4>) -> tensor<2x1024xi1, #blocked5> loc(#loc18)
    %30 = "ttg.convert_layout"(%29) : (tensor<2x1024xi1, #blocked5>) -> tensor<2x1024xi1, #blocked> loc(#loc19)
    %31 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = "tt.addptr"(%31, %26) : (tensor<2x1024x!tt.ptr<f32>, #blocked>, tensor<2x1024xi32, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked> loc(#loc16)
    %33 = "ttg.convert_layout"(%32) : (tensor<2x1024x!tt.ptr<f32>, #blocked>) -> tensor<2x1024x!tt.ptr<f32>, #blocked5> loc(#loc19)
    %34 = "ttg.convert_layout"(%18) : (tensor<2x1024xf32, #blocked>) -> tensor<2x1024xf32, #blocked5> loc(#loc19)
    %35 = "ttg.convert_layout"(%30) : (tensor<2x1024xi1, #blocked>) -> tensor<2x1024xi1, #blocked5> loc(#loc19)
    "tt.store"(%33, %34, %35) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked5>, tensor<2x1024xf32, #blocked5>, tensor<2x1024xi1, #blocked5>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc11)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc12)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc14)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc14)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc15)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc16)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc16)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc17)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc18)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc18)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc19)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc11)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPULoopScheduling (tritongpu-loop-scheduling) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false} : () -> () loc(#loc)
}) {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "tt.func"() <{arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}], function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32) -> (), sym_name = "scalar_mult_duplicate", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !tt.ptr<f32> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "arith.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "arith.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "arith.constant"() <{value = dense<4.000000e+00> : tensor<1x1024xf32, #blocked>}> : () -> tensor<1x1024xf32, #blocked> loc(#loc1)
    %3 = "tt.get_program_id"() <{axis = 0 : i32}> : () -> i32 loc(#loc2)
    %4 = "arith.muli"(%3, %0) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %5 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked1> loc(#loc4)
    %6 = "tt.make_range"() <{end = 1024 : i32, start = 0 : i32}> : () -> tensor<1024xi32, #blocked2> loc(#loc4)
    %7 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %8 = "tt.splat"(%4) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %9 = "arith.addi"(%7, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi32, #blocked1> loc(#loc5)
    %10 = "arith.addi"(%8, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc5)
    %11 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked1> loc(#loc6)
    %12 = "tt.splat"(%arg2) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc6)
    %13 = "arith.cmpi"(%9, %11) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024xi1, #blocked1> loc(#loc6)
    %14 = "arith.cmpi"(%10, %12) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc6)
    %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %16 = "tt.addptr"(%15, %9) : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi32, #blocked1>) -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %17 = "tt.load"(%16, %13) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 0>}> : (tensor<1024x!tt.ptr<f32>, #blocked1>, tensor<1024xi1, #blocked1>) -> tensor<1024xf32, #blocked1> loc(#loc8)
    %18 = "tt.reshape"(%17) : (tensor<1024xf32, #blocked1>) -> tensor<1x1024xf32, #blocked> loc(#loc9)
    %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked> loc(#loc10)
    %20 = "ttg.convert_layout"(%19) {allocation.offset = 0 : i32} : (tensor<1x1024xf32, #blocked>) -> tensor<1x1024xf32, #blocked3> loc(#loc10)
    %21 = "tt.broadcast"(%20) : (tensor<1x1024xf32, #blocked3>) -> tensor<2x1024xf32, #blocked3> loc(#loc10)
    %22 = "arith.addi"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi32, #blocked2> loc(#loc11)
    %23 = "arith.muli"(%arg2, %1) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %24 = "tt.splat"(%23) : (i32) -> tensor<1024xi32, #blocked2> loc(#loc13)
    %25 = "arith.cmpi"(%22, %24) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024xi1, #blocked2> loc(#loc13)
    %26 = "tt.join"(%10, %22) : (tensor<1024xi32, #blocked2>, tensor<1024xi32, #blocked2>) -> tensor<1024x2xi32, #blocked4> loc(#loc14)
    %27 = "ttg.convert_layout"(%26) {allocation.offset = 0 : i32} : (tensor<1024x2xi32, #blocked4>) -> tensor<1024x2xi32, #blocked5> loc(#loc15)
    %28 = "tt.trans"(%27) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi32, #blocked5>) -> tensor<2x1024xi32, #blocked3> loc(#loc15)
    %29 = "tt.join"(%14, %25) : (tensor<1024xi1, #blocked2>, tensor<1024xi1, #blocked2>) -> tensor<1024x2xi1, #blocked4> loc(#loc16)
    %30 = "ttg.convert_layout"(%29) {allocation.offset = 0 : i32} : (tensor<1024x2xi1, #blocked4>) -> tensor<1024x2xi1, #blocked5> loc(#loc17)
    %31 = "tt.trans"(%30) <{order = array<i32: 1, 0>}> : (tensor<1024x2xi1, #blocked5>) -> tensor<2x1024xi1, #blocked3> loc(#loc17)
    %32 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    %33 = "tt.addptr"(%32, %28) : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xi32, #blocked3>) -> tensor<2x1024x!tt.ptr<f32>, #blocked3> loc(#loc18)
    "tt.store"(%33, %21, %31) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x1024x!tt.ptr<f32>, #blocked3>, tensor<2x1024xf32, #blocked3>, tensor<2x1024xi1, #blocked3>) -> () loc(#loc19)
    "tt.return"() : () -> () loc(#loc20)
  }) {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %1 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %2 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %3 = "llvm.bitcast"(%2) : (f32) -> f32 loc(#loc1)
    %4 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %5 = "llvm.insertvalue"(%4, %3) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %6 = "llvm.insertvalue"(%5, %3) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %7 = "llvm.insertvalue"(%6, %3) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %8 = "llvm.insertvalue"(%7, %3) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %9 = "llvm.insertvalue"(%8, %3) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %10 = "llvm.insertvalue"(%9, %3) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %11 = "llvm.insertvalue"(%10, %3) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %12 = "llvm.insertvalue"(%11, %3) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %13 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %14 = "llvm.mul"(%13, %0) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %15 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %16 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %17 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %18 = "llvm.urem"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %19 = "llvm.udiv"(%16, %17) : (i32, i32) -> i32 loc(#loc4)
    %20 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %21 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %22 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %24 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %25 = "llvm.and"(%18, %24) : (i32, i32) -> i32 loc(#loc4)
    %26 = "llvm.icmp"(%25, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %27 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %28 = "llvm.select"(%26, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %29 = "llvm.xor"(%23, %28) : (i32, i32) -> i32 loc(#loc4)
    %30 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %31 = "llvm.and"(%18, %30) : (i32, i32) -> i32 loc(#loc4)
    %32 = "llvm.icmp"(%31, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %33 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %34 = "llvm.select"(%32, %23, %33) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.xor"(%29, %34) : (i32, i32) -> i32 loc(#loc4)
    %36 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %37 = "llvm.and"(%18, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.icmp"(%37, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %39 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %40 = "llvm.select"(%38, %23, %39) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%35, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %43 = "llvm.and"(%18, %42) : (i32, i32) -> i32 loc(#loc4)
    %44 = "llvm.icmp"(%43, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %45 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %46 = "llvm.select"(%44, %23, %45) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.xor"(%41, %46) : (i32, i32) -> i32 loc(#loc4)
    %48 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %49 = "llvm.and"(%18, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.icmp"(%49, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %51 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %52 = "llvm.select"(%50, %23, %51) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%47, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %55 = "llvm.and"(%19, %54) : (i32, i32) -> i32 loc(#loc4)
    %56 = "llvm.icmp"(%55, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %57 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %58 = "llvm.select"(%56, %23, %57) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.xor"(%53, %58) : (i32, i32) -> i32 loc(#loc4)
    %60 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %61 = "llvm.and"(%19, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.icmp"(%61, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %63 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %64 = "llvm.select"(%62, %23, %63) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.xor"(%59, %64) : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %67 = "llvm.xor"(%65, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %69 = "llvm.xor"(%65, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %71 = "llvm.xor"(%65, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc4)
    %73 = "llvm.xor"(%65, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %75 = "llvm.xor"(%65, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.mlir.constant"() <{value = 513 : i32}> : () -> i32 loc(#loc4)
    %77 = "llvm.xor"(%65, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.mlir.constant"() <{value = 514 : i32}> : () -> i32 loc(#loc4)
    %79 = "llvm.xor"(%65, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.mlir.constant"() <{value = 515 : i32}> : () -> i32 loc(#loc4)
    %81 = "llvm.xor"(%65, %80) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.add"(%67, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.add"(%69, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.add"(%71, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.add"(%73, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.add"(%75, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.add"(%77, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%79, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %15) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %91 = "llvm.insertvalue"(%90, %82) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %92 = "llvm.insertvalue"(%91, %83) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %93 = "llvm.insertvalue"(%92, %84) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %94 = "llvm.insertvalue"(%93, %85) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %95 = "llvm.insertvalue"(%94, %86) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %96 = "llvm.insertvalue"(%95, %87) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %97 = "llvm.insertvalue"(%96, %88) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %98 = "llvm.insertvalue"(%97, %89) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %99 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc4)
    %100 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %101 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %102 = "llvm.urem"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.udiv"(%100, %101) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %105 = "nvgpu.cluster_id"() : () -> i32 loc(#loc4)
    %106 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %108 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %109 = "llvm.and"(%102, %108) : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.icmp"(%109, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %111 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %112 = "llvm.select"(%110, %107, %111) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.xor"(%107, %112) : (i32, i32) -> i32 loc(#loc4)
    %114 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %115 = "llvm.and"(%102, %114) : (i32, i32) -> i32 loc(#loc4)
    %116 = "llvm.icmp"(%115, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %117 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %118 = "llvm.select"(%116, %107, %117) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %119 = "llvm.xor"(%113, %118) : (i32, i32) -> i32 loc(#loc4)
    %120 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %121 = "llvm.and"(%102, %120) : (i32, i32) -> i32 loc(#loc4)
    %122 = "llvm.icmp"(%121, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %123 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc4)
    %124 = "llvm.select"(%122, %107, %123) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %125 = "llvm.xor"(%119, %124) : (i32, i32) -> i32 loc(#loc4)
    %126 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %127 = "llvm.and"(%102, %126) : (i32, i32) -> i32 loc(#loc4)
    %128 = "llvm.icmp"(%127, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %129 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc4)
    %130 = "llvm.select"(%128, %107, %129) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %131 = "llvm.xor"(%125, %130) : (i32, i32) -> i32 loc(#loc4)
    %132 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %133 = "llvm.and"(%102, %132) : (i32, i32) -> i32 loc(#loc4)
    %134 = "llvm.icmp"(%133, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %135 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc4)
    %136 = "llvm.select"(%134, %107, %135) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %137 = "llvm.xor"(%131, %136) : (i32, i32) -> i32 loc(#loc4)
    %138 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc4)
    %139 = "llvm.and"(%103, %138) : (i32, i32) -> i32 loc(#loc4)
    %140 = "llvm.icmp"(%139, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %141 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc4)
    %142 = "llvm.select"(%140, %107, %141) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %143 = "llvm.xor"(%137, %142) : (i32, i32) -> i32 loc(#loc4)
    %144 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc4)
    %145 = "llvm.and"(%103, %144) : (i32, i32) -> i32 loc(#loc4)
    %146 = "llvm.icmp"(%145, %107) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %147 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc4)
    %148 = "llvm.select"(%146, %107, %147) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %149 = "llvm.xor"(%143, %148) : (i32, i32) -> i32 loc(#loc4)
    %150 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc4)
    %151 = "llvm.xor"(%149, %150) : (i32, i32) -> i32 loc(#loc4)
    %152 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc4)
    %153 = "llvm.xor"(%149, %152) : (i32, i32) -> i32 loc(#loc4)
    %154 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc4)
    %155 = "llvm.xor"(%149, %154) : (i32, i32) -> i32 loc(#loc4)
    %156 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc4)
    %157 = "llvm.xor"(%149, %156) : (i32, i32) -> i32 loc(#loc4)
    %158 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc4)
    %159 = "llvm.xor"(%149, %158) : (i32, i32) -> i32 loc(#loc4)
    %160 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc4)
    %161 = "llvm.xor"(%149, %160) : (i32, i32) -> i32 loc(#loc4)
    %162 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc4)
    %163 = "llvm.xor"(%149, %162) : (i32, i32) -> i32 loc(#loc4)
    %164 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc4)
    %165 = "llvm.xor"(%149, %164) : (i32, i32) -> i32 loc(#loc4)
    %166 = "llvm.add"(%151, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %167 = "llvm.add"(%153, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %168 = "llvm.add"(%155, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %169 = "llvm.add"(%157, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %170 = "llvm.add"(%159, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %171 = "llvm.add"(%161, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %172 = "llvm.add"(%163, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %173 = "llvm.add"(%165, %99) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %174 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %175 = "llvm.insertvalue"(%174, %166) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %176 = "llvm.insertvalue"(%175, %167) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %177 = "llvm.insertvalue"(%176, %168) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %178 = "llvm.insertvalue"(%177, %169) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %179 = "llvm.insertvalue"(%178, %170) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %180 = "llvm.insertvalue"(%179, %171) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %181 = "llvm.insertvalue"(%180, %172) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %182 = "llvm.insertvalue"(%181, %173) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %183 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %185 = "llvm.insertvalue"(%184, %183) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %186 = "llvm.insertvalue"(%185, %183) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %187 = "llvm.insertvalue"(%186, %183) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %188 = "llvm.insertvalue"(%187, %183) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %189 = "llvm.insertvalue"(%188, %183) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %190 = "llvm.insertvalue"(%189, %183) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %191 = "llvm.insertvalue"(%190, %183) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %192 = "llvm.insertvalue"(%191, %183) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %193 = "llvm.bitcast"(%14) : (i32) -> i32 loc(#loc5)
    %194 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %195 = "llvm.insertvalue"(%194, %193) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %196 = "llvm.insertvalue"(%195, %193) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %197 = "llvm.insertvalue"(%196, %193) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %198 = "llvm.insertvalue"(%197, %193) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %199 = "llvm.insertvalue"(%198, %193) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %200 = "llvm.insertvalue"(%199, %193) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %201 = "llvm.insertvalue"(%200, %193) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %202 = "llvm.insertvalue"(%201, %193) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %203 = "llvm.extractvalue"(%192) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %204 = "llvm.extractvalue"(%192) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %205 = "llvm.extractvalue"(%192) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %206 = "llvm.extractvalue"(%192) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %207 = "llvm.extractvalue"(%192) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %208 = "llvm.extractvalue"(%192) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %209 = "llvm.extractvalue"(%192) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %210 = "llvm.extractvalue"(%192) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %211 = "llvm.extractvalue"(%98) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %212 = "llvm.extractvalue"(%98) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %213 = "llvm.extractvalue"(%98) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %214 = "llvm.extractvalue"(%98) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %215 = "llvm.extractvalue"(%98) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %216 = "llvm.extractvalue"(%98) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %217 = "llvm.extractvalue"(%98) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %218 = "llvm.extractvalue"(%98) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %219 = "llvm.add"(%203, %211) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %220 = "llvm.add"(%204, %212) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %221 = "llvm.add"(%205, %213) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %222 = "llvm.add"(%206, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %223 = "llvm.add"(%207, %215) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %224 = "llvm.add"(%208, %216) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %225 = "llvm.add"(%209, %217) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %226 = "llvm.add"(%210, %218) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %227 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %228 = "llvm.insertvalue"(%227, %219) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %229 = "llvm.insertvalue"(%228, %220) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %230 = "llvm.insertvalue"(%229, %221) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %231 = "llvm.insertvalue"(%230, %222) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %232 = "llvm.insertvalue"(%231, %223) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %233 = "llvm.insertvalue"(%232, %224) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %234 = "llvm.insertvalue"(%233, %225) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %235 = "llvm.insertvalue"(%234, %226) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %236 = "llvm.extractvalue"(%202) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %237 = "llvm.extractvalue"(%202) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %238 = "llvm.extractvalue"(%202) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %239 = "llvm.extractvalue"(%202) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %240 = "llvm.extractvalue"(%202) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %241 = "llvm.extractvalue"(%202) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %242 = "llvm.extractvalue"(%202) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %243 = "llvm.extractvalue"(%202) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %244 = "llvm.extractvalue"(%182) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %245 = "llvm.extractvalue"(%182) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %246 = "llvm.extractvalue"(%182) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %247 = "llvm.extractvalue"(%182) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %248 = "llvm.extractvalue"(%182) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %249 = "llvm.extractvalue"(%182) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %250 = "llvm.extractvalue"(%182) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %251 = "llvm.extractvalue"(%182) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc5)
    %252 = "llvm.add"(%236, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %253 = "llvm.add"(%237, %245) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %254 = "llvm.add"(%238, %246) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %255 = "llvm.add"(%239, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %256 = "llvm.add"(%240, %248) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %257 = "llvm.add"(%241, %249) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %258 = "llvm.add"(%242, %250) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %259 = "llvm.add"(%243, %251) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %260 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %261 = "llvm.insertvalue"(%260, %252) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %262 = "llvm.insertvalue"(%261, %253) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %263 = "llvm.insertvalue"(%262, %254) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %264 = "llvm.insertvalue"(%263, %255) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %265 = "llvm.insertvalue"(%264, %256) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %266 = "llvm.insertvalue"(%265, %257) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %267 = "llvm.insertvalue"(%266, %258) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %268 = "llvm.insertvalue"(%267, %259) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %269 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %270 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %271 = "llvm.insertvalue"(%270, %269) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %272 = "llvm.insertvalue"(%271, %269) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %273 = "llvm.insertvalue"(%272, %269) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %274 = "llvm.insertvalue"(%273, %269) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %275 = "llvm.insertvalue"(%274, %269) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %276 = "llvm.insertvalue"(%275, %269) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %277 = "llvm.insertvalue"(%276, %269) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %278 = "llvm.insertvalue"(%277, %269) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %279 = "llvm.bitcast"(%arg2) : (i32) -> i32 loc(#loc6)
    %280 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %281 = "llvm.insertvalue"(%280, %279) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %282 = "llvm.insertvalue"(%281, %279) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %283 = "llvm.insertvalue"(%282, %279) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %284 = "llvm.insertvalue"(%283, %279) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %285 = "llvm.insertvalue"(%284, %279) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %286 = "llvm.insertvalue"(%285, %279) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %287 = "llvm.insertvalue"(%286, %279) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %288 = "llvm.insertvalue"(%287, %279) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %289 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %290 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %291 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %292 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %293 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %294 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %295 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %296 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %297 = "llvm.extractvalue"(%278) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %298 = "llvm.extractvalue"(%278) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %299 = "llvm.extractvalue"(%278) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %300 = "llvm.extractvalue"(%278) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %301 = "llvm.extractvalue"(%278) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %302 = "llvm.extractvalue"(%278) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %303 = "llvm.extractvalue"(%278) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %304 = "llvm.extractvalue"(%278) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %305 = "llvm.icmp"(%289, %297) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %306 = "llvm.icmp"(%290, %298) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %307 = "llvm.icmp"(%291, %299) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %308 = "llvm.icmp"(%292, %300) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %309 = "llvm.icmp"(%293, %301) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %310 = "llvm.icmp"(%294, %302) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %311 = "llvm.icmp"(%295, %303) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %312 = "llvm.icmp"(%296, %304) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %313 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %314 = "llvm.insertvalue"(%313, %305) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %315 = "llvm.insertvalue"(%314, %305) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %316 = "llvm.insertvalue"(%315, %305) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %317 = "llvm.insertvalue"(%316, %305) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %318 = "llvm.insertvalue"(%317, %309) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %319 = "llvm.insertvalue"(%318, %309) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %320 = "llvm.insertvalue"(%319, %309) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %321 = "llvm.insertvalue"(%320, %309) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %322 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %323 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %324 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %325 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %326 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %327 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %328 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %329 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %330 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %331 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %332 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %333 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %334 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %335 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %336 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %337 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc6)
    %338 = "llvm.icmp"(%322, %330) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %339 = "llvm.icmp"(%323, %331) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %340 = "llvm.icmp"(%324, %332) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %341 = "llvm.icmp"(%325, %333) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %342 = "llvm.icmp"(%326, %334) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %343 = "llvm.icmp"(%327, %335) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %344 = "llvm.icmp"(%328, %336) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %345 = "llvm.icmp"(%329, %337) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %346 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %347 = "llvm.insertvalue"(%346, %338) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %348 = "llvm.insertvalue"(%347, %339) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %349 = "llvm.insertvalue"(%348, %340) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %350 = "llvm.insertvalue"(%349, %341) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %351 = "llvm.insertvalue"(%350, %342) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %352 = "llvm.insertvalue"(%351, %343) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %353 = "llvm.insertvalue"(%352, %344) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %354 = "llvm.insertvalue"(%353, %345) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %355 = "llvm.bitcast"(%arg0) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc7)
    %356 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %357 = "llvm.insertvalue"(%356, %355) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %358 = "llvm.insertvalue"(%357, %355) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %359 = "llvm.insertvalue"(%358, %355) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %360 = "llvm.insertvalue"(%359, %355) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %361 = "llvm.insertvalue"(%360, %355) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %362 = "llvm.insertvalue"(%361, %355) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %363 = "llvm.insertvalue"(%362, %355) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %364 = "llvm.insertvalue"(%363, %355) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %365 = "llvm.extractvalue"(%364) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %366 = "llvm.extractvalue"(%364) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %367 = "llvm.extractvalue"(%364) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %368 = "llvm.extractvalue"(%364) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %369 = "llvm.extractvalue"(%364) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %370 = "llvm.extractvalue"(%364) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %371 = "llvm.extractvalue"(%364) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %372 = "llvm.extractvalue"(%364) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc7)
    %373 = "llvm.extractvalue"(%235) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %374 = "llvm.extractvalue"(%235) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %375 = "llvm.extractvalue"(%235) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %376 = "llvm.extractvalue"(%235) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %377 = "llvm.extractvalue"(%235) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %378 = "llvm.extractvalue"(%235) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %379 = "llvm.extractvalue"(%235) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %380 = "llvm.extractvalue"(%235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc7)
    %381 = "llvm.getelementptr"(%365, %373) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %382 = "llvm.getelementptr"(%366, %374) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %383 = "llvm.getelementptr"(%367, %375) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %384 = "llvm.getelementptr"(%368, %376) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %385 = "llvm.getelementptr"(%369, %377) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %386 = "llvm.getelementptr"(%370, %378) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %387 = "llvm.getelementptr"(%371, %379) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %388 = "llvm.getelementptr"(%372, %380) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %389 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %390 = "llvm.insertvalue"(%389, %381) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %391 = "llvm.insertvalue"(%390, %382) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %392 = "llvm.insertvalue"(%391, %383) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %393 = "llvm.insertvalue"(%392, %384) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %394 = "llvm.insertvalue"(%393, %385) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %395 = "llvm.insertvalue"(%394, %386) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %396 = "llvm.insertvalue"(%395, %387) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %397 = "llvm.insertvalue"(%396, %388) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %398 = "llvm.extractvalue"(%397) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %399 = "llvm.extractvalue"(%397) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %400 = "llvm.extractvalue"(%397) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %401 = "llvm.extractvalue"(%397) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %402 = "llvm.extractvalue"(%397) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %403 = "llvm.extractvalue"(%397) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %404 = "llvm.extractvalue"(%397) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %405 = "llvm.extractvalue"(%397) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc8)
    %406 = "llvm.extractvalue"(%321) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %407 = "llvm.extractvalue"(%321) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %408 = "llvm.extractvalue"(%321) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %409 = "llvm.extractvalue"(%321) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %410 = "llvm.extractvalue"(%321) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %411 = "llvm.extractvalue"(%321) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %412 = "llvm.extractvalue"(%321) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %413 = "llvm.extractvalue"(%321) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc8)
    %414 = "llvm.inline_asm"(%398, %406) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %415 = "llvm.extractvalue"(%414) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %416 = "llvm.bitcast"(%415) : (i32) -> vector<1xf32> loc(#loc8)
    %417 = "llvm.extractvalue"(%414) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %418 = "llvm.bitcast"(%417) : (i32) -> vector<1xf32> loc(#loc8)
    %419 = "llvm.extractvalue"(%414) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %420 = "llvm.bitcast"(%419) : (i32) -> vector<1xf32> loc(#loc8)
    %421 = "llvm.extractvalue"(%414) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %422 = "llvm.bitcast"(%421) : (i32) -> vector<1xf32> loc(#loc8)
    %423 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %424 = "llvm.extractelement"(%416, %423) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %425 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %426 = "llvm.extractelement"(%418, %425) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %427 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %428 = "llvm.extractelement"(%420, %427) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %429 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %430 = "llvm.extractelement"(%422, %429) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %431 = "llvm.inline_asm"(%402, %410) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %432 = "llvm.extractvalue"(%431) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %433 = "llvm.bitcast"(%432) : (i32) -> vector<1xf32> loc(#loc8)
    %434 = "llvm.extractvalue"(%431) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %435 = "llvm.bitcast"(%434) : (i32) -> vector<1xf32> loc(#loc8)
    %436 = "llvm.extractvalue"(%431) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %437 = "llvm.bitcast"(%436) : (i32) -> vector<1xf32> loc(#loc8)
    %438 = "llvm.extractvalue"(%431) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %439 = "llvm.bitcast"(%438) : (i32) -> vector<1xf32> loc(#loc8)
    %440 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %441 = "llvm.extractelement"(%433, %440) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %442 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %443 = "llvm.extractelement"(%435, %442) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %444 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %445 = "llvm.extractelement"(%437, %444) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %446 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc8)
    %447 = "llvm.extractelement"(%439, %446) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %448 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %449 = "llvm.insertvalue"(%448, %424) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %450 = "llvm.insertvalue"(%449, %426) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %451 = "llvm.insertvalue"(%450, %428) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %452 = "llvm.insertvalue"(%451, %430) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %453 = "llvm.insertvalue"(%452, %441) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %454 = "llvm.insertvalue"(%453, %443) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %455 = "llvm.insertvalue"(%454, %445) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %456 = "llvm.insertvalue"(%455, %447) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %457 = "llvm.extractvalue"(%456) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %458 = "llvm.extractvalue"(%456) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %459 = "llvm.extractvalue"(%456) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %460 = "llvm.extractvalue"(%456) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %461 = "llvm.extractvalue"(%456) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %462 = "llvm.extractvalue"(%456) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %463 = "llvm.extractvalue"(%456) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %464 = "llvm.extractvalue"(%456) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc9)
    %465 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %466 = "llvm.insertvalue"(%465, %457) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %467 = "llvm.insertvalue"(%466, %458) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %468 = "llvm.insertvalue"(%467, %459) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %469 = "llvm.insertvalue"(%468, %460) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %470 = "llvm.insertvalue"(%469, %461) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %471 = "llvm.insertvalue"(%470, %462) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %472 = "llvm.insertvalue"(%471, %463) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %473 = "llvm.insertvalue"(%472, %464) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc9)
    %474 = "llvm.extractvalue"(%473) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %475 = "llvm.extractvalue"(%473) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %476 = "llvm.extractvalue"(%473) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %477 = "llvm.extractvalue"(%473) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %478 = "llvm.extractvalue"(%473) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %479 = "llvm.extractvalue"(%473) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %480 = "llvm.extractvalue"(%473) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %481 = "llvm.extractvalue"(%473) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %482 = "llvm.extractvalue"(%12) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %483 = "llvm.extractvalue"(%12) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %484 = "llvm.extractvalue"(%12) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %485 = "llvm.extractvalue"(%12) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %486 = "llvm.extractvalue"(%12) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %487 = "llvm.extractvalue"(%12) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %488 = "llvm.extractvalue"(%12) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %489 = "llvm.extractvalue"(%12) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %490 = "llvm.fmul"(%474, %482) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %491 = "llvm.fmul"(%475, %483) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %492 = "llvm.fmul"(%476, %484) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %493 = "llvm.fmul"(%477, %485) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %494 = "llvm.fmul"(%478, %486) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %495 = "llvm.fmul"(%479, %487) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %496 = "llvm.fmul"(%480, %488) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %497 = "llvm.fmul"(%481, %489) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc10)
    %498 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %499 = "llvm.insertvalue"(%498, %490) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %500 = "llvm.insertvalue"(%499, %491) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %501 = "llvm.insertvalue"(%500, %492) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %502 = "llvm.insertvalue"(%501, %493) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %503 = "llvm.insertvalue"(%502, %494) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %504 = "llvm.insertvalue"(%503, %495) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %505 = "llvm.insertvalue"(%504, %496) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %506 = "llvm.insertvalue"(%505, %497) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %507 = "llvm.extractvalue"(%506) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %508 = "llvm.extractvalue"(%506) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %509 = "llvm.extractvalue"(%506) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %510 = "llvm.extractvalue"(%506) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %511 = "llvm.extractvalue"(%506) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %512 = "llvm.extractvalue"(%506) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %513 = "llvm.extractvalue"(%506) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %514 = "llvm.extractvalue"(%506) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %515 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc10)
    %516 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %517 = "llvm.urem"(%515, %516) : (i32, i32) -> i32 loc(#loc10)
    %518 = "llvm.udiv"(%515, %516) : (i32, i32) -> i32 loc(#loc10)
    %519 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %520 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %521 = "llvm.getelementptr"(%520, %519) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %522 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %523 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %524 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %525 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %526 = "llvm.and"(%517, %525) : (i32, i32) -> i32 loc(#loc10)
    %527 = "llvm.icmp"(%526, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %528 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %529 = "llvm.select"(%527, %524, %528) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %530 = "llvm.xor"(%524, %529) : (i32, i32) -> i32 loc(#loc10)
    %531 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %532 = "llvm.and"(%517, %531) : (i32, i32) -> i32 loc(#loc10)
    %533 = "llvm.icmp"(%532, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %534 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %535 = "llvm.select"(%533, %524, %534) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %536 = "llvm.xor"(%530, %535) : (i32, i32) -> i32 loc(#loc10)
    %537 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %538 = "llvm.and"(%517, %537) : (i32, i32) -> i32 loc(#loc10)
    %539 = "llvm.icmp"(%538, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %540 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %541 = "llvm.select"(%539, %524, %540) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %542 = "llvm.xor"(%536, %541) : (i32, i32) -> i32 loc(#loc10)
    %543 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %544 = "llvm.and"(%517, %543) : (i32, i32) -> i32 loc(#loc10)
    %545 = "llvm.icmp"(%544, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %546 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %547 = "llvm.select"(%545, %524, %546) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %548 = "llvm.xor"(%542, %547) : (i32, i32) -> i32 loc(#loc10)
    %549 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %550 = "llvm.and"(%517, %549) : (i32, i32) -> i32 loc(#loc10)
    %551 = "llvm.icmp"(%550, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %552 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %553 = "llvm.select"(%551, %524, %552) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %554 = "llvm.xor"(%548, %553) : (i32, i32) -> i32 loc(#loc10)
    %555 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %556 = "llvm.and"(%518, %555) : (i32, i32) -> i32 loc(#loc10)
    %557 = "llvm.icmp"(%556, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %558 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %559 = "llvm.select"(%557, %524, %558) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %560 = "llvm.xor"(%554, %559) : (i32, i32) -> i32 loc(#loc10)
    %561 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %562 = "llvm.and"(%518, %561) : (i32, i32) -> i32 loc(#loc10)
    %563 = "llvm.icmp"(%562, %524) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %564 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %565 = "llvm.select"(%563, %524, %564) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %566 = "llvm.xor"(%560, %565) : (i32, i32) -> i32 loc(#loc10)
    %567 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %568 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %569 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %570 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %571 = "llvm.and"(%517, %570) : (i32, i32) -> i32 loc(#loc10)
    %572 = "llvm.icmp"(%571, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %573 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %574 = "llvm.and"(%517, %573) : (i32, i32) -> i32 loc(#loc10)
    %575 = "llvm.icmp"(%574, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %576 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %577 = "llvm.select"(%575, %569, %576) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %578 = "llvm.xor"(%569, %577) : (i32, i32) -> i32 loc(#loc10)
    %579 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %580 = "llvm.and"(%517, %579) : (i32, i32) -> i32 loc(#loc10)
    %581 = "llvm.icmp"(%580, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %582 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %583 = "llvm.select"(%581, %569, %582) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %584 = "llvm.xor"(%578, %583) : (i32, i32) -> i32 loc(#loc10)
    %585 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %586 = "llvm.and"(%517, %585) : (i32, i32) -> i32 loc(#loc10)
    %587 = "llvm.icmp"(%586, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %588 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc10)
    %589 = "llvm.select"(%587, %569, %588) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %590 = "llvm.xor"(%584, %589) : (i32, i32) -> i32 loc(#loc10)
    %591 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %592 = "llvm.and"(%517, %591) : (i32, i32) -> i32 loc(#loc10)
    %593 = "llvm.icmp"(%592, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %594 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc10)
    %595 = "llvm.select"(%593, %569, %594) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %596 = "llvm.xor"(%590, %595) : (i32, i32) -> i32 loc(#loc10)
    %597 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %598 = "llvm.and"(%518, %597) : (i32, i32) -> i32 loc(#loc10)
    %599 = "llvm.icmp"(%598, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %600 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc10)
    %601 = "llvm.select"(%599, %569, %600) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %602 = "llvm.xor"(%596, %601) : (i32, i32) -> i32 loc(#loc10)
    %603 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %604 = "llvm.and"(%518, %603) : (i32, i32) -> i32 loc(#loc10)
    %605 = "llvm.icmp"(%604, %569) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc10)
    %606 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc10)
    %607 = "llvm.select"(%605, %569, %606) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc10)
    %608 = "llvm.xor"(%602, %607) : (i32, i32) -> i32 loc(#loc10)
    %609 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %610 = "llvm.xor"(%566, %609) : (i32, i32) -> i32 loc(#loc10)
    %611 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %612 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %613 = "llvm.lshr"(%610, %612) : (i32, i32) -> i32 loc(#loc10)
    %614 = "llvm.shl"(%613, %611) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %615 = "llvm.add"(%614, %610) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %616 = "llvm.getelementptr"(%521, %615) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %617 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %618 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %619 = "llvm.insertelement"(%617, %507, %618) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %620 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %621 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %622 = "llvm.extractelement"(%619, %621) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %623 = "llvm.bitcast"(%622) : (f32) -> i32 loc(#loc10)
    %624 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %625 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %626 = "llvm.insertelement"(%624, %623, %625) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %627 = "llvm.inline_asm"(%616, %626, %620) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %628 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %629 = "llvm.xor"(%566, %628) : (i32, i32) -> i32 loc(#loc10)
    %630 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %631 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %632 = "llvm.lshr"(%629, %631) : (i32, i32) -> i32 loc(#loc10)
    %633 = "llvm.shl"(%632, %630) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %634 = "llvm.add"(%633, %629) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %635 = "llvm.getelementptr"(%521, %634) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %636 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %637 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %638 = "llvm.insertelement"(%636, %508, %637) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %639 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %640 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %641 = "llvm.extractelement"(%638, %640) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %642 = "llvm.bitcast"(%641) : (f32) -> i32 loc(#loc10)
    %643 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %644 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %645 = "llvm.insertelement"(%643, %642, %644) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %646 = "llvm.inline_asm"(%635, %645, %639) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %647 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %648 = "llvm.xor"(%566, %647) : (i32, i32) -> i32 loc(#loc10)
    %649 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %650 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %651 = "llvm.lshr"(%648, %650) : (i32, i32) -> i32 loc(#loc10)
    %652 = "llvm.shl"(%651, %649) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %653 = "llvm.add"(%652, %648) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %654 = "llvm.getelementptr"(%521, %653) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %655 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %656 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %657 = "llvm.insertelement"(%655, %509, %656) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %658 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %659 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %660 = "llvm.extractelement"(%657, %659) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %661 = "llvm.bitcast"(%660) : (f32) -> i32 loc(#loc10)
    %662 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %663 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %664 = "llvm.insertelement"(%662, %661, %663) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %665 = "llvm.inline_asm"(%654, %664, %658) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %666 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc10)
    %667 = "llvm.xor"(%566, %666) : (i32, i32) -> i32 loc(#loc10)
    %668 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %669 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %670 = "llvm.lshr"(%667, %669) : (i32, i32) -> i32 loc(#loc10)
    %671 = "llvm.shl"(%670, %668) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %672 = "llvm.add"(%671, %667) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %673 = "llvm.getelementptr"(%521, %672) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %674 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %675 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %676 = "llvm.insertelement"(%674, %510, %675) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %677 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %678 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %679 = "llvm.extractelement"(%676, %678) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %680 = "llvm.bitcast"(%679) : (f32) -> i32 loc(#loc10)
    %681 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %682 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %683 = "llvm.insertelement"(%681, %680, %682) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %684 = "llvm.inline_asm"(%673, %683, %677) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %685 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %686 = "llvm.xor"(%608, %685) : (i32, i32) -> i32 loc(#loc10)
    %687 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %688 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %689 = "llvm.lshr"(%686, %688) : (i32, i32) -> i32 loc(#loc10)
    %690 = "llvm.shl"(%689, %687) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %691 = "llvm.add"(%690, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %692 = "llvm.getelementptr"(%521, %691) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %693 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %694 = "llvm.load"(%692) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %695 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %696 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %697 = "llvm.insertelement"(%695, %694, %696) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %698 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %699 = "llvm.extractelement"(%697, %698) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %700 = "llvm.bitcast"(%699) : (i32) -> f32 loc(#loc10)
    %701 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %702 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %703 = "llvm.insertelement"(%701, %700, %702) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %704 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %705 = "llvm.extractelement"(%703, %704) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %706 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %707 = "llvm.xor"(%608, %706) : (i32, i32) -> i32 loc(#loc10)
    %708 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %709 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %710 = "llvm.lshr"(%707, %709) : (i32, i32) -> i32 loc(#loc10)
    %711 = "llvm.shl"(%710, %708) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %712 = "llvm.add"(%711, %707) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %713 = "llvm.getelementptr"(%521, %712) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %714 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %715 = "llvm.load"(%713) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %716 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %717 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %718 = "llvm.insertelement"(%716, %715, %717) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %719 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %720 = "llvm.extractelement"(%718, %719) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %721 = "llvm.bitcast"(%720) : (i32) -> f32 loc(#loc10)
    %722 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %723 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %724 = "llvm.insertelement"(%722, %721, %723) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %725 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %726 = "llvm.extractelement"(%724, %725) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %727 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %728 = "llvm.xor"(%608, %727) : (i32, i32) -> i32 loc(#loc10)
    %729 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %730 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %731 = "llvm.lshr"(%728, %730) : (i32, i32) -> i32 loc(#loc10)
    %732 = "llvm.shl"(%731, %729) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %733 = "llvm.add"(%732, %728) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %734 = "llvm.getelementptr"(%521, %733) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %735 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %736 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %737 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %738 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %739 = "llvm.insertelement"(%737, %736, %738) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %740 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %741 = "llvm.extractelement"(%739, %740) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %742 = "llvm.bitcast"(%741) : (i32) -> f32 loc(#loc10)
    %743 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %744 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %745 = "llvm.insertelement"(%743, %742, %744) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %746 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %747 = "llvm.extractelement"(%745, %746) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %748 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc10)
    %749 = "llvm.xor"(%608, %748) : (i32, i32) -> i32 loc(#loc10)
    %750 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %751 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %752 = "llvm.lshr"(%749, %751) : (i32, i32) -> i32 loc(#loc10)
    %753 = "llvm.shl"(%752, %750) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %754 = "llvm.add"(%753, %749) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %755 = "llvm.getelementptr"(%521, %754) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %756 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %757 = "llvm.load"(%755) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %758 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %759 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %760 = "llvm.insertelement"(%758, %757, %759) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %761 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %762 = "llvm.extractelement"(%760, %761) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %763 = "llvm.bitcast"(%762) : (i32) -> f32 loc(#loc10)
    %764 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %765 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %766 = "llvm.insertelement"(%764, %763, %765) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %767 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %768 = "llvm.extractelement"(%766, %767) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %769 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %770 = "llvm.xor"(%608, %769) : (i32, i32) -> i32 loc(#loc10)
    %771 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %772 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %773 = "llvm.lshr"(%770, %772) : (i32, i32) -> i32 loc(#loc10)
    %774 = "llvm.shl"(%773, %771) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %775 = "llvm.add"(%774, %770) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %776 = "llvm.getelementptr"(%521, %775) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %777 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %778 = "llvm.load"(%776) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %779 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %780 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %781 = "llvm.insertelement"(%779, %778, %780) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %782 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %783 = "llvm.extractelement"(%781, %782) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %784 = "llvm.bitcast"(%783) : (i32) -> f32 loc(#loc10)
    %785 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %786 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %787 = "llvm.insertelement"(%785, %784, %786) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %788 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %789 = "llvm.extractelement"(%787, %788) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %790 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc10)
    %791 = "llvm.xor"(%608, %790) : (i32, i32) -> i32 loc(#loc10)
    %792 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %793 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %794 = "llvm.lshr"(%791, %793) : (i32, i32) -> i32 loc(#loc10)
    %795 = "llvm.shl"(%794, %792) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %796 = "llvm.add"(%795, %791) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %797 = "llvm.getelementptr"(%521, %796) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %798 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %799 = "llvm.load"(%797) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %800 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %801 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %802 = "llvm.insertelement"(%800, %799, %801) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %803 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %804 = "llvm.extractelement"(%802, %803) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %805 = "llvm.bitcast"(%804) : (i32) -> f32 loc(#loc10)
    %806 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %807 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %808 = "llvm.insertelement"(%806, %805, %807) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %809 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %810 = "llvm.extractelement"(%808, %809) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %811 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc10)
    %812 = "llvm.xor"(%608, %811) : (i32, i32) -> i32 loc(#loc10)
    %813 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %814 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %815 = "llvm.lshr"(%812, %814) : (i32, i32) -> i32 loc(#loc10)
    %816 = "llvm.shl"(%815, %813) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %817 = "llvm.add"(%816, %812) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %818 = "llvm.getelementptr"(%521, %817) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %819 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %820 = "llvm.load"(%818) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %821 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %822 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %823 = "llvm.insertelement"(%821, %820, %822) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %824 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %825 = "llvm.extractelement"(%823, %824) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %826 = "llvm.bitcast"(%825) : (i32) -> f32 loc(#loc10)
    %827 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %828 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %829 = "llvm.insertelement"(%827, %826, %828) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %830 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %831 = "llvm.extractelement"(%829, %830) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %832 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc10)
    %833 = "llvm.xor"(%608, %832) : (i32, i32) -> i32 loc(#loc10)
    %834 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %835 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %836 = "llvm.lshr"(%833, %835) : (i32, i32) -> i32 loc(#loc10)
    %837 = "llvm.shl"(%836, %834) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %838 = "llvm.add"(%837, %833) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %839 = "llvm.getelementptr"(%521, %838) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %840 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %841 = "llvm.load"(%839) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %842 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %843 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %844 = "llvm.insertelement"(%842, %841, %843) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %845 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %846 = "llvm.extractelement"(%844, %845) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %847 = "llvm.bitcast"(%846) : (i32) -> f32 loc(#loc10)
    %848 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %849 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %850 = "llvm.insertelement"(%848, %847, %849) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %851 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %852 = "llvm.extractelement"(%850, %851) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %853 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %854 = "llvm.xor"(%566, %853) : (i32, i32) -> i32 loc(#loc10)
    %855 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %856 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %857 = "llvm.lshr"(%854, %856) : (i32, i32) -> i32 loc(#loc10)
    %858 = "llvm.shl"(%857, %855) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %859 = "llvm.add"(%858, %854) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %860 = "llvm.getelementptr"(%521, %859) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %861 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %862 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %863 = "llvm.insertelement"(%861, %511, %862) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %864 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %865 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %866 = "llvm.extractelement"(%863, %865) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %867 = "llvm.bitcast"(%866) : (f32) -> i32 loc(#loc10)
    %868 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %869 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %870 = "llvm.insertelement"(%868, %867, %869) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %871 = "llvm.inline_asm"(%860, %870, %864) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %872 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc10)
    %873 = "llvm.xor"(%566, %872) : (i32, i32) -> i32 loc(#loc10)
    %874 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %875 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %876 = "llvm.lshr"(%873, %875) : (i32, i32) -> i32 loc(#loc10)
    %877 = "llvm.shl"(%876, %874) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %878 = "llvm.add"(%877, %873) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %879 = "llvm.getelementptr"(%521, %878) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %880 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %881 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %882 = "llvm.insertelement"(%880, %512, %881) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %883 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %884 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %885 = "llvm.extractelement"(%882, %884) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %886 = "llvm.bitcast"(%885) : (f32) -> i32 loc(#loc10)
    %887 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %888 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %889 = "llvm.insertelement"(%887, %886, %888) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %890 = "llvm.inline_asm"(%879, %889, %883) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %891 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc10)
    %892 = "llvm.xor"(%566, %891) : (i32, i32) -> i32 loc(#loc10)
    %893 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %894 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %895 = "llvm.lshr"(%892, %894) : (i32, i32) -> i32 loc(#loc10)
    %896 = "llvm.shl"(%895, %893) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %897 = "llvm.add"(%896, %892) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %898 = "llvm.getelementptr"(%521, %897) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %899 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %900 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %901 = "llvm.insertelement"(%899, %513, %900) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %902 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %903 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %904 = "llvm.extractelement"(%901, %903) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %905 = "llvm.bitcast"(%904) : (f32) -> i32 loc(#loc10)
    %906 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %907 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %908 = "llvm.insertelement"(%906, %905, %907) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %909 = "llvm.inline_asm"(%898, %908, %902) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    %910 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc10)
    %911 = "llvm.xor"(%566, %910) : (i32, i32) -> i32 loc(#loc10)
    %912 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %913 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %914 = "llvm.lshr"(%911, %913) : (i32, i32) -> i32 loc(#loc10)
    %915 = "llvm.shl"(%914, %912) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %916 = "llvm.add"(%915, %911) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %917 = "llvm.getelementptr"(%521, %916) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %918 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %919 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %920 = "llvm.insertelement"(%918, %514, %919) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %921 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %922 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %923 = "llvm.extractelement"(%920, %922) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %924 = "llvm.bitcast"(%923) : (f32) -> i32 loc(#loc10)
    %925 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %926 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %927 = "llvm.insertelement"(%925, %924, %926) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %928 = "llvm.inline_asm"(%917, %927, %921) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc10)
    "nvvm.barrier0"() : () -> () loc(#loc10)
    %929 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %930 = "llvm.xor"(%608, %929) : (i32, i32) -> i32 loc(#loc10)
    %931 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %932 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %933 = "llvm.lshr"(%930, %932) : (i32, i32) -> i32 loc(#loc10)
    %934 = "llvm.shl"(%933, %931) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %935 = "llvm.add"(%934, %930) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %936 = "llvm.getelementptr"(%521, %935) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %937 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %938 = "llvm.load"(%936) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %939 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %940 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %941 = "llvm.insertelement"(%939, %938, %940) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %942 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %943 = "llvm.extractelement"(%941, %942) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %944 = "llvm.bitcast"(%943) : (i32) -> f32 loc(#loc10)
    %945 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %946 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %947 = "llvm.insertelement"(%945, %944, %946) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %948 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %949 = "llvm.extractelement"(%947, %948) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %950 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc10)
    %951 = "llvm.xor"(%608, %950) : (i32, i32) -> i32 loc(#loc10)
    %952 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %953 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %954 = "llvm.lshr"(%951, %953) : (i32, i32) -> i32 loc(#loc10)
    %955 = "llvm.shl"(%954, %952) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %956 = "llvm.add"(%955, %951) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %957 = "llvm.getelementptr"(%521, %956) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %958 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %959 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %960 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %961 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %962 = "llvm.insertelement"(%960, %959, %961) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %963 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %964 = "llvm.extractelement"(%962, %963) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %965 = "llvm.bitcast"(%964) : (i32) -> f32 loc(#loc10)
    %966 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %967 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %968 = "llvm.insertelement"(%966, %965, %967) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %969 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %970 = "llvm.extractelement"(%968, %969) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %971 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc10)
    %972 = "llvm.xor"(%608, %971) : (i32, i32) -> i32 loc(#loc10)
    %973 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %974 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %975 = "llvm.lshr"(%972, %974) : (i32, i32) -> i32 loc(#loc10)
    %976 = "llvm.shl"(%975, %973) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %977 = "llvm.add"(%976, %972) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %978 = "llvm.getelementptr"(%521, %977) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %979 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %980 = "llvm.load"(%978) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %981 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %982 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %983 = "llvm.insertelement"(%981, %980, %982) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %984 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %985 = "llvm.extractelement"(%983, %984) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %986 = "llvm.bitcast"(%985) : (i32) -> f32 loc(#loc10)
    %987 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %988 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %989 = "llvm.insertelement"(%987, %986, %988) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %990 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %991 = "llvm.extractelement"(%989, %990) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %992 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc10)
    %993 = "llvm.xor"(%608, %992) : (i32, i32) -> i32 loc(#loc10)
    %994 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %995 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %996 = "llvm.lshr"(%993, %995) : (i32, i32) -> i32 loc(#loc10)
    %997 = "llvm.shl"(%996, %994) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %998 = "llvm.add"(%997, %993) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %999 = "llvm.getelementptr"(%521, %998) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1000 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1001 = "llvm.load"(%999) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1002 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1003 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1004 = "llvm.insertelement"(%1002, %1001, %1003) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1005 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1006 = "llvm.extractelement"(%1004, %1005) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1007 = "llvm.bitcast"(%1006) : (i32) -> f32 loc(#loc10)
    %1008 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1009 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1010 = "llvm.insertelement"(%1008, %1007, %1009) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1011 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1012 = "llvm.extractelement"(%1010, %1011) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1013 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc10)
    %1014 = "llvm.xor"(%608, %1013) : (i32, i32) -> i32 loc(#loc10)
    %1015 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1016 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1017 = "llvm.lshr"(%1014, %1016) : (i32, i32) -> i32 loc(#loc10)
    %1018 = "llvm.shl"(%1017, %1015) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1019 = "llvm.add"(%1018, %1014) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1020 = "llvm.getelementptr"(%521, %1019) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1021 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1022 = "llvm.load"(%1020) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1023 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1024 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1025 = "llvm.insertelement"(%1023, %1022, %1024) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1026 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1027 = "llvm.extractelement"(%1025, %1026) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1028 = "llvm.bitcast"(%1027) : (i32) -> f32 loc(#loc10)
    %1029 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1030 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1031 = "llvm.insertelement"(%1029, %1028, %1030) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1032 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1033 = "llvm.extractelement"(%1031, %1032) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1034 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc10)
    %1035 = "llvm.xor"(%608, %1034) : (i32, i32) -> i32 loc(#loc10)
    %1036 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1037 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1038 = "llvm.lshr"(%1035, %1037) : (i32, i32) -> i32 loc(#loc10)
    %1039 = "llvm.shl"(%1038, %1036) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1040 = "llvm.add"(%1039, %1035) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1041 = "llvm.getelementptr"(%521, %1040) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1042 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1043 = "llvm.load"(%1041) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1044 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1045 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1046 = "llvm.insertelement"(%1044, %1043, %1045) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1047 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1048 = "llvm.extractelement"(%1046, %1047) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1049 = "llvm.bitcast"(%1048) : (i32) -> f32 loc(#loc10)
    %1050 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1051 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1052 = "llvm.insertelement"(%1050, %1049, %1051) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1053 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1054 = "llvm.extractelement"(%1052, %1053) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1055 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc10)
    %1056 = "llvm.xor"(%608, %1055) : (i32, i32) -> i32 loc(#loc10)
    %1057 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1058 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1059 = "llvm.lshr"(%1056, %1058) : (i32, i32) -> i32 loc(#loc10)
    %1060 = "llvm.shl"(%1059, %1057) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1061 = "llvm.add"(%1060, %1056) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1062 = "llvm.getelementptr"(%521, %1061) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1063 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1064 = "llvm.load"(%1062) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1065 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1066 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1067 = "llvm.insertelement"(%1065, %1064, %1066) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1068 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1069 = "llvm.extractelement"(%1067, %1068) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1070 = "llvm.bitcast"(%1069) : (i32) -> f32 loc(#loc10)
    %1071 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1072 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1073 = "llvm.insertelement"(%1071, %1070, %1072) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1074 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1075 = "llvm.extractelement"(%1073, %1074) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1076 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc10)
    %1077 = "llvm.xor"(%608, %1076) : (i32, i32) -> i32 loc(#loc10)
    %1078 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1079 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1080 = "llvm.lshr"(%1077, %1079) : (i32, i32) -> i32 loc(#loc10)
    %1081 = "llvm.shl"(%1080, %1078) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1082 = "llvm.add"(%1081, %1077) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %1083 = "llvm.getelementptr"(%521, %1082) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc10)
    %1084 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc10)
    %1085 = "llvm.load"(%1083) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc10)
    %1086 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc10)
    %1087 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1088 = "llvm.insertelement"(%1086, %1085, %1087) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc10)
    %1089 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1090 = "llvm.extractelement"(%1088, %1089) : (vector<1xi32>, i32) -> i32 loc(#loc10)
    %1091 = "llvm.bitcast"(%1090) : (i32) -> f32 loc(#loc10)
    %1092 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc10)
    %1093 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1094 = "llvm.insertelement"(%1092, %1091, %1093) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc10)
    %1095 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc10)
    %1096 = "llvm.extractelement"(%1094, %1095) : (vector<1xf32>, i32) -> f32 loc(#loc10)
    %1097 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1098 = "llvm.insertvalue"(%1097, %705) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1099 = "llvm.insertvalue"(%1098, %726) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1100 = "llvm.insertvalue"(%1099, %747) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1101 = "llvm.insertvalue"(%1100, %768) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1102 = "llvm.insertvalue"(%1101, %789) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1103 = "llvm.insertvalue"(%1102, %810) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1104 = "llvm.insertvalue"(%1103, %831) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1105 = "llvm.insertvalue"(%1104, %852) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1106 = "llvm.insertvalue"(%1105, %949) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1107 = "llvm.insertvalue"(%1106, %970) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1108 = "llvm.insertvalue"(%1107, %991) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1109 = "llvm.insertvalue"(%1108, %1012) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1110 = "llvm.insertvalue"(%1109, %1033) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1111 = "llvm.insertvalue"(%1110, %1054) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1112 = "llvm.insertvalue"(%1111, %1075) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1113 = "llvm.insertvalue"(%1112, %1096) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1114 = "llvm.extractvalue"(%1113) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1115 = "llvm.extractvalue"(%1113) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1116 = "llvm.extractvalue"(%1113) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1117 = "llvm.extractvalue"(%1113) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1118 = "llvm.extractvalue"(%1113) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1119 = "llvm.extractvalue"(%1113) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1120 = "llvm.extractvalue"(%1113) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1121 = "llvm.extractvalue"(%1113) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1122 = "llvm.extractvalue"(%1113) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1123 = "llvm.extractvalue"(%1113) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1124 = "llvm.extractvalue"(%1113) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1125 = "llvm.extractvalue"(%1113) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1126 = "llvm.extractvalue"(%1113) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1127 = "llvm.extractvalue"(%1113) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1128 = "llvm.extractvalue"(%1113) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1129 = "llvm.extractvalue"(%1113) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc10)
    %1130 = "llvm.mlir.undef"() : () -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1131 = "llvm.insertvalue"(%1130, %1114) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1132 = "llvm.insertvalue"(%1131, %1115) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1133 = "llvm.insertvalue"(%1132, %1116) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1134 = "llvm.insertvalue"(%1133, %1117) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1135 = "llvm.insertvalue"(%1134, %1118) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1136 = "llvm.insertvalue"(%1135, %1119) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1137 = "llvm.insertvalue"(%1136, %1120) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1138 = "llvm.insertvalue"(%1137, %1121) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1139 = "llvm.insertvalue"(%1138, %1122) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1140 = "llvm.insertvalue"(%1139, %1123) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1141 = "llvm.insertvalue"(%1140, %1124) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1142 = "llvm.insertvalue"(%1141, %1125) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1143 = "llvm.insertvalue"(%1142, %1126) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1144 = "llvm.insertvalue"(%1143, %1127) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1145 = "llvm.insertvalue"(%1144, %1128) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1146 = "llvm.insertvalue"(%1145, %1129) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %1147 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1148 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1149 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1150 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1151 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1152 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1153 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1154 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1155 = "llvm.extractvalue"(%288) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1156 = "llvm.extractvalue"(%288) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1157 = "llvm.extractvalue"(%288) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1158 = "llvm.extractvalue"(%288) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1159 = "llvm.extractvalue"(%288) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1160 = "llvm.extractvalue"(%288) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1161 = "llvm.extractvalue"(%288) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1162 = "llvm.extractvalue"(%288) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc11)
    %1163 = "llvm.add"(%1147, %1155) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1164 = "llvm.add"(%1148, %1156) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1165 = "llvm.add"(%1149, %1157) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1166 = "llvm.add"(%1150, %1158) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1167 = "llvm.add"(%1151, %1159) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1168 = "llvm.add"(%1152, %1160) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1169 = "llvm.add"(%1153, %1161) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1170 = "llvm.add"(%1154, %1162) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %1171 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1172 = "llvm.insertvalue"(%1171, %1163) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1173 = "llvm.insertvalue"(%1172, %1164) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1174 = "llvm.insertvalue"(%1173, %1165) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1175 = "llvm.insertvalue"(%1174, %1166) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1176 = "llvm.insertvalue"(%1175, %1167) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1177 = "llvm.insertvalue"(%1176, %1168) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1178 = "llvm.insertvalue"(%1177, %1169) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1179 = "llvm.insertvalue"(%1178, %1170) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %1180 = "llvm.mul"(%arg2, %1) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc12)
    %1181 = "llvm.bitcast"(%1180) : (i32) -> i32 loc(#loc13)
    %1182 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1183 = "llvm.insertvalue"(%1182, %1181) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1184 = "llvm.insertvalue"(%1183, %1181) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1185 = "llvm.insertvalue"(%1184, %1181) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1186 = "llvm.insertvalue"(%1185, %1181) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1187 = "llvm.insertvalue"(%1186, %1181) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1188 = "llvm.insertvalue"(%1187, %1181) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1189 = "llvm.insertvalue"(%1188, %1181) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1190 = "llvm.insertvalue"(%1189, %1181) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1191 = "llvm.extractvalue"(%1179) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1192 = "llvm.extractvalue"(%1179) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1193 = "llvm.extractvalue"(%1179) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1194 = "llvm.extractvalue"(%1179) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1195 = "llvm.extractvalue"(%1179) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1196 = "llvm.extractvalue"(%1179) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1197 = "llvm.extractvalue"(%1179) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1198 = "llvm.extractvalue"(%1179) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1199 = "llvm.extractvalue"(%1190) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1200 = "llvm.extractvalue"(%1190) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1201 = "llvm.extractvalue"(%1190) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1202 = "llvm.extractvalue"(%1190) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1203 = "llvm.extractvalue"(%1190) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1204 = "llvm.extractvalue"(%1190) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1205 = "llvm.extractvalue"(%1190) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1206 = "llvm.extractvalue"(%1190) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc13)
    %1207 = "llvm.icmp"(%1191, %1199) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1208 = "llvm.icmp"(%1192, %1200) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1209 = "llvm.icmp"(%1193, %1201) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1210 = "llvm.icmp"(%1194, %1202) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1211 = "llvm.icmp"(%1195, %1203) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1212 = "llvm.icmp"(%1196, %1204) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1213 = "llvm.icmp"(%1197, %1205) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1214 = "llvm.icmp"(%1198, %1206) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %1215 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1216 = "llvm.insertvalue"(%1215, %1207) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1217 = "llvm.insertvalue"(%1216, %1208) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1218 = "llvm.insertvalue"(%1217, %1209) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1219 = "llvm.insertvalue"(%1218, %1210) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1220 = "llvm.insertvalue"(%1219, %1211) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1221 = "llvm.insertvalue"(%1220, %1212) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1222 = "llvm.insertvalue"(%1221, %1213) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1223 = "llvm.insertvalue"(%1222, %1214) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc13)
    %1224 = "llvm.extractvalue"(%268) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1225 = "llvm.extractvalue"(%268) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1226 = "llvm.extractvalue"(%268) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1227 = "llvm.extractvalue"(%268) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1228 = "llvm.extractvalue"(%268) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1229 = "llvm.extractvalue"(%268) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1230 = "llvm.extractvalue"(%268) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1231 = "llvm.extractvalue"(%268) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1232 = "llvm.extractvalue"(%1179) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1233 = "llvm.extractvalue"(%1179) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1234 = "llvm.extractvalue"(%1179) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1235 = "llvm.extractvalue"(%1179) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1236 = "llvm.extractvalue"(%1179) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1237 = "llvm.extractvalue"(%1179) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1238 = "llvm.extractvalue"(%1179) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1239 = "llvm.extractvalue"(%1179) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc14)
    %1240 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1241 = "llvm.insertvalue"(%1240, %1224) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1242 = "llvm.insertvalue"(%1241, %1232) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1243 = "llvm.insertvalue"(%1242, %1225) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1244 = "llvm.insertvalue"(%1243, %1233) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1245 = "llvm.insertvalue"(%1244, %1226) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1246 = "llvm.insertvalue"(%1245, %1234) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1247 = "llvm.insertvalue"(%1246, %1227) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1248 = "llvm.insertvalue"(%1247, %1235) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1249 = "llvm.insertvalue"(%1248, %1228) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1250 = "llvm.insertvalue"(%1249, %1236) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1251 = "llvm.insertvalue"(%1250, %1229) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1252 = "llvm.insertvalue"(%1251, %1237) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1253 = "llvm.insertvalue"(%1252, %1230) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1254 = "llvm.insertvalue"(%1253, %1238) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1255 = "llvm.insertvalue"(%1254, %1231) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    %1256 = "llvm.insertvalue"(%1255, %1239) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1257 = "llvm.extractvalue"(%1256) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1258 = "llvm.extractvalue"(%1256) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1259 = "llvm.extractvalue"(%1256) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1260 = "llvm.extractvalue"(%1256) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1261 = "llvm.extractvalue"(%1256) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1262 = "llvm.extractvalue"(%1256) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1263 = "llvm.extractvalue"(%1256) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1264 = "llvm.extractvalue"(%1256) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1265 = "llvm.extractvalue"(%1256) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1266 = "llvm.extractvalue"(%1256) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1267 = "llvm.extractvalue"(%1256) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1268 = "llvm.extractvalue"(%1256) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1269 = "llvm.extractvalue"(%1256) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1270 = "llvm.extractvalue"(%1256) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1271 = "llvm.extractvalue"(%1256) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1272 = "llvm.extractvalue"(%1256) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc15)
    %1273 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc15)
    %1274 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1275 = "llvm.urem"(%1273, %1274) : (i32, i32) -> i32 loc(#loc15)
    %1276 = "llvm.udiv"(%1273, %1274) : (i32, i32) -> i32 loc(#loc15)
    %1277 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1278 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1279 = "llvm.getelementptr"(%1278, %1277) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1280 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1281 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1282 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1283 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1284 = "llvm.and"(%1275, %1283) : (i32, i32) -> i32 loc(#loc15)
    %1285 = "llvm.icmp"(%1284, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1286 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1287 = "llvm.select"(%1285, %1282, %1286) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1288 = "llvm.xor"(%1282, %1287) : (i32, i32) -> i32 loc(#loc15)
    %1289 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1290 = "llvm.and"(%1275, %1289) : (i32, i32) -> i32 loc(#loc15)
    %1291 = "llvm.icmp"(%1290, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1292 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1293 = "llvm.select"(%1291, %1282, %1292) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1294 = "llvm.xor"(%1288, %1293) : (i32, i32) -> i32 loc(#loc15)
    %1295 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1296 = "llvm.and"(%1275, %1295) : (i32, i32) -> i32 loc(#loc15)
    %1297 = "llvm.icmp"(%1296, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1298 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1299 = "llvm.select"(%1297, %1282, %1298) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1300 = "llvm.xor"(%1294, %1299) : (i32, i32) -> i32 loc(#loc15)
    %1301 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1302 = "llvm.and"(%1275, %1301) : (i32, i32) -> i32 loc(#loc15)
    %1303 = "llvm.icmp"(%1302, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1304 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1305 = "llvm.select"(%1303, %1282, %1304) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1306 = "llvm.xor"(%1300, %1305) : (i32, i32) -> i32 loc(#loc15)
    %1307 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1308 = "llvm.and"(%1275, %1307) : (i32, i32) -> i32 loc(#loc15)
    %1309 = "llvm.icmp"(%1308, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1310 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1311 = "llvm.select"(%1309, %1282, %1310) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1312 = "llvm.xor"(%1306, %1311) : (i32, i32) -> i32 loc(#loc15)
    %1313 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1314 = "llvm.and"(%1276, %1313) : (i32, i32) -> i32 loc(#loc15)
    %1315 = "llvm.icmp"(%1314, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1316 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc15)
    %1317 = "llvm.select"(%1315, %1282, %1316) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1318 = "llvm.xor"(%1312, %1317) : (i32, i32) -> i32 loc(#loc15)
    %1319 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1320 = "llvm.and"(%1276, %1319) : (i32, i32) -> i32 loc(#loc15)
    %1321 = "llvm.icmp"(%1320, %1282) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1322 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1323 = "llvm.select"(%1321, %1282, %1322) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1324 = "llvm.xor"(%1318, %1323) : (i32, i32) -> i32 loc(#loc15)
    %1325 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1326 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1327 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1328 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1329 = "llvm.and"(%1275, %1328) : (i32, i32) -> i32 loc(#loc15)
    %1330 = "llvm.icmp"(%1329, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1331 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1332 = "llvm.select"(%1330, %1327, %1331) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1333 = "llvm.xor"(%1327, %1332) : (i32, i32) -> i32 loc(#loc15)
    %1334 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1335 = "llvm.and"(%1275, %1334) : (i32, i32) -> i32 loc(#loc15)
    %1336 = "llvm.icmp"(%1335, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1337 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1338 = "llvm.select"(%1336, %1327, %1337) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1339 = "llvm.xor"(%1333, %1338) : (i32, i32) -> i32 loc(#loc15)
    %1340 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1341 = "llvm.and"(%1275, %1340) : (i32, i32) -> i32 loc(#loc15)
    %1342 = "llvm.icmp"(%1341, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1343 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc15)
    %1344 = "llvm.select"(%1342, %1327, %1343) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1345 = "llvm.xor"(%1339, %1344) : (i32, i32) -> i32 loc(#loc15)
    %1346 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1347 = "llvm.and"(%1275, %1346) : (i32, i32) -> i32 loc(#loc15)
    %1348 = "llvm.icmp"(%1347, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1349 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc15)
    %1350 = "llvm.select"(%1348, %1327, %1349) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1351 = "llvm.xor"(%1345, %1350) : (i32, i32) -> i32 loc(#loc15)
    %1352 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1353 = "llvm.and"(%1275, %1352) : (i32, i32) -> i32 loc(#loc15)
    %1354 = "llvm.icmp"(%1353, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1355 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc15)
    %1356 = "llvm.select"(%1354, %1327, %1355) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1357 = "llvm.xor"(%1351, %1356) : (i32, i32) -> i32 loc(#loc15)
    %1358 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1359 = "llvm.and"(%1276, %1358) : (i32, i32) -> i32 loc(#loc15)
    %1360 = "llvm.icmp"(%1359, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1361 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc15)
    %1362 = "llvm.select"(%1360, %1327, %1361) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1363 = "llvm.xor"(%1357, %1362) : (i32, i32) -> i32 loc(#loc15)
    %1364 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc15)
    %1365 = "llvm.and"(%1276, %1364) : (i32, i32) -> i32 loc(#loc15)
    %1366 = "llvm.icmp"(%1365, %1327) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc15)
    %1367 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc15)
    %1368 = "llvm.select"(%1366, %1327, %1367) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc15)
    %1369 = "llvm.xor"(%1363, %1368) : (i32, i32) -> i32 loc(#loc15)
    %1370 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1371 = "llvm.xor"(%1324, %1370) : (i32, i32) -> i32 loc(#loc15)
    %1372 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1373 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1374 = "llvm.lshr"(%1371, %1373) : (i32, i32) -> i32 loc(#loc15)
    %1375 = "llvm.shl"(%1374, %1372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1376 = "llvm.add"(%1375, %1371) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1377 = "llvm.getelementptr"(%1279, %1376) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1378 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1379 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1380 = "llvm.insertelement"(%1378, %1257, %1379) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1381 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1382 = "llvm.insertelement"(%1380, %1258, %1381) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1383 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1384 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1385 = "llvm.extractelement"(%1382, %1384) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1386 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1387 = "llvm.extractelement"(%1382, %1386) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1388 = "llvm.inline_asm"(%1377, %1385, %1387, %1383) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1389 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1390 = "llvm.xor"(%1369, %1389) : (i32, i32) -> i32 loc(#loc15)
    %1391 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1392 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1393 = "llvm.lshr"(%1390, %1392) : (i32, i32) -> i32 loc(#loc15)
    %1394 = "llvm.shl"(%1393, %1391) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1395 = "llvm.add"(%1394, %1390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1396 = "llvm.getelementptr"(%1279, %1395) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1397 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1398 = "llvm.load"(%1396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1399 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1400 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1401 = "llvm.insertelement"(%1399, %1398, %1400) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1402 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1403 = "llvm.extractelement"(%1401, %1402) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1404 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1405 = "llvm.xor"(%1369, %1404) : (i32, i32) -> i32 loc(#loc15)
    %1406 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1407 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1408 = "llvm.lshr"(%1405, %1407) : (i32, i32) -> i32 loc(#loc15)
    %1409 = "llvm.shl"(%1408, %1406) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1410 = "llvm.add"(%1409, %1405) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1411 = "llvm.getelementptr"(%1279, %1410) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1412 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1413 = "llvm.load"(%1411) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1414 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1415 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1416 = "llvm.insertelement"(%1414, %1413, %1415) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1417 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1418 = "llvm.extractelement"(%1416, %1417) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1419 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1420 = "llvm.xor"(%1324, %1419) : (i32, i32) -> i32 loc(#loc15)
    %1421 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1422 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1423 = "llvm.lshr"(%1420, %1422) : (i32, i32) -> i32 loc(#loc15)
    %1424 = "llvm.shl"(%1423, %1421) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1425 = "llvm.add"(%1424, %1420) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1426 = "llvm.getelementptr"(%1279, %1425) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1427 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1428 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1429 = "llvm.insertelement"(%1427, %1259, %1428) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1430 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1431 = "llvm.insertelement"(%1429, %1260, %1430) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1432 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1433 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1434 = "llvm.extractelement"(%1431, %1433) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1435 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1436 = "llvm.extractelement"(%1431, %1435) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1437 = "llvm.inline_asm"(%1426, %1434, %1436, %1432) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1438 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1439 = "llvm.xor"(%1369, %1438) : (i32, i32) -> i32 loc(#loc15)
    %1440 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1441 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1442 = "llvm.lshr"(%1439, %1441) : (i32, i32) -> i32 loc(#loc15)
    %1443 = "llvm.shl"(%1442, %1440) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1444 = "llvm.add"(%1443, %1439) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1445 = "llvm.getelementptr"(%1279, %1444) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1446 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1447 = "llvm.load"(%1445) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1448 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1449 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1450 = "llvm.insertelement"(%1448, %1447, %1449) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1451 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1452 = "llvm.extractelement"(%1450, %1451) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1453 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1454 = "llvm.xor"(%1369, %1453) : (i32, i32) -> i32 loc(#loc15)
    %1455 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1456 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1457 = "llvm.lshr"(%1454, %1456) : (i32, i32) -> i32 loc(#loc15)
    %1458 = "llvm.shl"(%1457, %1455) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1459 = "llvm.add"(%1458, %1454) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1460 = "llvm.getelementptr"(%1279, %1459) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1461 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1462 = "llvm.load"(%1460) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1463 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1464 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1465 = "llvm.insertelement"(%1463, %1462, %1464) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1466 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1467 = "llvm.extractelement"(%1465, %1466) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1468 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1469 = "llvm.xor"(%1324, %1468) : (i32, i32) -> i32 loc(#loc15)
    %1470 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1471 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1472 = "llvm.lshr"(%1469, %1471) : (i32, i32) -> i32 loc(#loc15)
    %1473 = "llvm.shl"(%1472, %1470) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1474 = "llvm.add"(%1473, %1469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1475 = "llvm.getelementptr"(%1279, %1474) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1476 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1477 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1478 = "llvm.insertelement"(%1476, %1261, %1477) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1479 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1480 = "llvm.insertelement"(%1478, %1262, %1479) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1481 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1482 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1483 = "llvm.extractelement"(%1480, %1482) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1484 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1485 = "llvm.extractelement"(%1480, %1484) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1486 = "llvm.inline_asm"(%1475, %1483, %1485, %1481) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1487 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1488 = "llvm.xor"(%1369, %1487) : (i32, i32) -> i32 loc(#loc15)
    %1489 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1490 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1491 = "llvm.lshr"(%1488, %1490) : (i32, i32) -> i32 loc(#loc15)
    %1492 = "llvm.shl"(%1491, %1489) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1493 = "llvm.add"(%1492, %1488) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1494 = "llvm.getelementptr"(%1279, %1493) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1495 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1496 = "llvm.load"(%1494) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1497 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1498 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1499 = "llvm.insertelement"(%1497, %1496, %1498) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1500 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1501 = "llvm.extractelement"(%1499, %1500) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1502 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1503 = "llvm.xor"(%1369, %1502) : (i32, i32) -> i32 loc(#loc15)
    %1504 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1505 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1506 = "llvm.lshr"(%1503, %1505) : (i32, i32) -> i32 loc(#loc15)
    %1507 = "llvm.shl"(%1506, %1504) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1508 = "llvm.add"(%1507, %1503) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1509 = "llvm.getelementptr"(%1279, %1508) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1510 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1511 = "llvm.load"(%1509) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1512 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1513 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1514 = "llvm.insertelement"(%1512, %1511, %1513) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1515 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1516 = "llvm.extractelement"(%1514, %1515) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1517 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1518 = "llvm.xor"(%1324, %1517) : (i32, i32) -> i32 loc(#loc15)
    %1519 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1520 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1521 = "llvm.lshr"(%1518, %1520) : (i32, i32) -> i32 loc(#loc15)
    %1522 = "llvm.shl"(%1521, %1519) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1523 = "llvm.add"(%1522, %1518) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1524 = "llvm.getelementptr"(%1279, %1523) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1525 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1526 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1527 = "llvm.insertelement"(%1525, %1263, %1526) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1528 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1529 = "llvm.insertelement"(%1527, %1264, %1528) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1530 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1531 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1532 = "llvm.extractelement"(%1529, %1531) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1533 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1534 = "llvm.extractelement"(%1529, %1533) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1535 = "llvm.inline_asm"(%1524, %1532, %1534, %1530) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1536 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1537 = "llvm.xor"(%1369, %1536) : (i32, i32) -> i32 loc(#loc15)
    %1538 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1539 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1540 = "llvm.lshr"(%1537, %1539) : (i32, i32) -> i32 loc(#loc15)
    %1541 = "llvm.shl"(%1540, %1538) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1542 = "llvm.add"(%1541, %1537) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1543 = "llvm.getelementptr"(%1279, %1542) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1544 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1545 = "llvm.load"(%1543) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1546 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1547 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1548 = "llvm.insertelement"(%1546, %1545, %1547) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1549 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1550 = "llvm.extractelement"(%1548, %1549) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1551 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1552 = "llvm.xor"(%1369, %1551) : (i32, i32) -> i32 loc(#loc15)
    %1553 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1554 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1555 = "llvm.lshr"(%1552, %1554) : (i32, i32) -> i32 loc(#loc15)
    %1556 = "llvm.shl"(%1555, %1553) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1557 = "llvm.add"(%1556, %1552) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1558 = "llvm.getelementptr"(%1279, %1557) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1559 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1560 = "llvm.load"(%1558) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1561 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1562 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1563 = "llvm.insertelement"(%1561, %1560, %1562) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1564 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1565 = "llvm.extractelement"(%1563, %1564) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1566 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1567 = "llvm.xor"(%1324, %1566) : (i32, i32) -> i32 loc(#loc15)
    %1568 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1569 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1570 = "llvm.lshr"(%1567, %1569) : (i32, i32) -> i32 loc(#loc15)
    %1571 = "llvm.shl"(%1570, %1568) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1572 = "llvm.add"(%1571, %1567) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1573 = "llvm.getelementptr"(%1279, %1572) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1574 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1575 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1576 = "llvm.insertelement"(%1574, %1265, %1575) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1577 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1578 = "llvm.insertelement"(%1576, %1266, %1577) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1579 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1580 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1581 = "llvm.extractelement"(%1578, %1580) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1582 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1583 = "llvm.extractelement"(%1578, %1582) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1584 = "llvm.inline_asm"(%1573, %1581, %1583, %1579) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1585 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1586 = "llvm.xor"(%1369, %1585) : (i32, i32) -> i32 loc(#loc15)
    %1587 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1588 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1589 = "llvm.lshr"(%1586, %1588) : (i32, i32) -> i32 loc(#loc15)
    %1590 = "llvm.shl"(%1589, %1587) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1591 = "llvm.add"(%1590, %1586) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1592 = "llvm.getelementptr"(%1279, %1591) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1593 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1594 = "llvm.load"(%1592) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1595 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1596 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1597 = "llvm.insertelement"(%1595, %1594, %1596) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1598 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1599 = "llvm.extractelement"(%1597, %1598) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1600 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1601 = "llvm.xor"(%1369, %1600) : (i32, i32) -> i32 loc(#loc15)
    %1602 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1603 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1604 = "llvm.lshr"(%1601, %1603) : (i32, i32) -> i32 loc(#loc15)
    %1605 = "llvm.shl"(%1604, %1602) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1606 = "llvm.add"(%1605, %1601) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1607 = "llvm.getelementptr"(%1279, %1606) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1608 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1609 = "llvm.load"(%1607) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1610 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1611 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1612 = "llvm.insertelement"(%1610, %1609, %1611) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1613 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1614 = "llvm.extractelement"(%1612, %1613) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1615 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1616 = "llvm.xor"(%1324, %1615) : (i32, i32) -> i32 loc(#loc15)
    %1617 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1618 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1619 = "llvm.lshr"(%1616, %1618) : (i32, i32) -> i32 loc(#loc15)
    %1620 = "llvm.shl"(%1619, %1617) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1621 = "llvm.add"(%1620, %1616) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1622 = "llvm.getelementptr"(%1279, %1621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1623 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1624 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1625 = "llvm.insertelement"(%1623, %1267, %1624) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1626 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1627 = "llvm.insertelement"(%1625, %1268, %1626) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1628 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1629 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1630 = "llvm.extractelement"(%1627, %1629) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1631 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1632 = "llvm.extractelement"(%1627, %1631) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1633 = "llvm.inline_asm"(%1622, %1630, %1632, %1628) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1634 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1635 = "llvm.xor"(%1369, %1634) : (i32, i32) -> i32 loc(#loc15)
    %1636 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1637 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1638 = "llvm.lshr"(%1635, %1637) : (i32, i32) -> i32 loc(#loc15)
    %1639 = "llvm.shl"(%1638, %1636) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1640 = "llvm.add"(%1639, %1635) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1641 = "llvm.getelementptr"(%1279, %1640) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1642 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1643 = "llvm.load"(%1641) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1644 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1645 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1646 = "llvm.insertelement"(%1644, %1643, %1645) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1647 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1648 = "llvm.extractelement"(%1646, %1647) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1649 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1650 = "llvm.xor"(%1369, %1649) : (i32, i32) -> i32 loc(#loc15)
    %1651 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1652 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1653 = "llvm.lshr"(%1650, %1652) : (i32, i32) -> i32 loc(#loc15)
    %1654 = "llvm.shl"(%1653, %1651) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1655 = "llvm.add"(%1654, %1650) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1656 = "llvm.getelementptr"(%1279, %1655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1657 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1658 = "llvm.load"(%1656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1659 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1660 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1661 = "llvm.insertelement"(%1659, %1658, %1660) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1662 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1663 = "llvm.extractelement"(%1661, %1662) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1664 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1665 = "llvm.xor"(%1324, %1664) : (i32, i32) -> i32 loc(#loc15)
    %1666 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1667 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1668 = "llvm.lshr"(%1665, %1667) : (i32, i32) -> i32 loc(#loc15)
    %1669 = "llvm.shl"(%1668, %1666) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1670 = "llvm.add"(%1669, %1665) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1671 = "llvm.getelementptr"(%1279, %1670) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1672 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1673 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1674 = "llvm.insertelement"(%1672, %1269, %1673) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1675 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1676 = "llvm.insertelement"(%1674, %1270, %1675) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1677 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1678 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1679 = "llvm.extractelement"(%1676, %1678) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1680 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1681 = "llvm.extractelement"(%1676, %1680) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1682 = "llvm.inline_asm"(%1671, %1679, %1681, %1677) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1683 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1684 = "llvm.xor"(%1369, %1683) : (i32, i32) -> i32 loc(#loc15)
    %1685 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1686 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1687 = "llvm.lshr"(%1684, %1686) : (i32, i32) -> i32 loc(#loc15)
    %1688 = "llvm.shl"(%1687, %1685) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1689 = "llvm.add"(%1688, %1684) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1690 = "llvm.getelementptr"(%1279, %1689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1691 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1692 = "llvm.load"(%1690) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1693 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1694 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1695 = "llvm.insertelement"(%1693, %1692, %1694) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1696 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1697 = "llvm.extractelement"(%1695, %1696) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1698 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1699 = "llvm.xor"(%1369, %1698) : (i32, i32) -> i32 loc(#loc15)
    %1700 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1701 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1702 = "llvm.lshr"(%1699, %1701) : (i32, i32) -> i32 loc(#loc15)
    %1703 = "llvm.shl"(%1702, %1700) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1704 = "llvm.add"(%1703, %1699) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1705 = "llvm.getelementptr"(%1279, %1704) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1706 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1707 = "llvm.load"(%1705) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1708 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1709 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1710 = "llvm.insertelement"(%1708, %1707, %1709) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1711 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1712 = "llvm.extractelement"(%1710, %1711) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1713 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1714 = "llvm.xor"(%1324, %1713) : (i32, i32) -> i32 loc(#loc15)
    %1715 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1716 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1717 = "llvm.lshr"(%1714, %1716) : (i32, i32) -> i32 loc(#loc15)
    %1718 = "llvm.shl"(%1717, %1715) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1719 = "llvm.add"(%1718, %1714) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1720 = "llvm.getelementptr"(%1279, %1719) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1721 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc15)
    %1722 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1723 = "llvm.insertelement"(%1721, %1271, %1722) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1724 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1725 = "llvm.insertelement"(%1723, %1272, %1724) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc15)
    %1726 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1727 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1728 = "llvm.extractelement"(%1725, %1727) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1729 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1730 = "llvm.extractelement"(%1725, %1729) : (vector<2xi32>, i32) -> i32 loc(#loc15)
    %1731 = "llvm.inline_asm"(%1720, %1728, %1730, %1726) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc15)
    "nvvm.barrier0"() : () -> () loc(#loc15)
    %1732 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1733 = "llvm.xor"(%1369, %1732) : (i32, i32) -> i32 loc(#loc15)
    %1734 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1735 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1736 = "llvm.lshr"(%1733, %1735) : (i32, i32) -> i32 loc(#loc15)
    %1737 = "llvm.shl"(%1736, %1734) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1738 = "llvm.add"(%1737, %1733) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1739 = "llvm.getelementptr"(%1279, %1738) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1740 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1741 = "llvm.load"(%1739) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1742 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1743 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1744 = "llvm.insertelement"(%1742, %1741, %1743) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1745 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1746 = "llvm.extractelement"(%1744, %1745) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1747 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc15)
    %1748 = "llvm.xor"(%1369, %1747) : (i32, i32) -> i32 loc(#loc15)
    %1749 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1750 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc15)
    %1751 = "llvm.lshr"(%1748, %1750) : (i32, i32) -> i32 loc(#loc15)
    %1752 = "llvm.shl"(%1751, %1749) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1753 = "llvm.add"(%1752, %1748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc15)
    %1754 = "llvm.getelementptr"(%1279, %1753) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc15)
    %1755 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc15)
    %1756 = "llvm.load"(%1754) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc15)
    %1757 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc15)
    %1758 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1759 = "llvm.insertelement"(%1757, %1756, %1758) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc15)
    %1760 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc15)
    %1761 = "llvm.extractelement"(%1759, %1760) : (vector<1xi32>, i32) -> i32 loc(#loc15)
    %1762 = "llvm.mlir.undef"() : () -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1763 = "llvm.insertvalue"(%1762, %1403) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1764 = "llvm.insertvalue"(%1763, %1418) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1765 = "llvm.insertvalue"(%1764, %1452) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1766 = "llvm.insertvalue"(%1765, %1467) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1767 = "llvm.insertvalue"(%1766, %1501) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1768 = "llvm.insertvalue"(%1767, %1516) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1769 = "llvm.insertvalue"(%1768, %1550) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1770 = "llvm.insertvalue"(%1769, %1565) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1771 = "llvm.insertvalue"(%1770, %1599) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1772 = "llvm.insertvalue"(%1771, %1614) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1773 = "llvm.insertvalue"(%1772, %1648) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1774 = "llvm.insertvalue"(%1773, %1663) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1775 = "llvm.insertvalue"(%1774, %1697) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1776 = "llvm.insertvalue"(%1775, %1712) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1777 = "llvm.insertvalue"(%1776, %1746) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1778 = "llvm.insertvalue"(%1777, %1761) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>, i32) -> !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %1779 = "llvm.extractvalue"(%354) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1780 = "llvm.extractvalue"(%354) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1781 = "llvm.extractvalue"(%354) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1782 = "llvm.extractvalue"(%354) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1783 = "llvm.extractvalue"(%354) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1784 = "llvm.extractvalue"(%354) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1785 = "llvm.extractvalue"(%354) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1786 = "llvm.extractvalue"(%354) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1787 = "llvm.extractvalue"(%1223) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1788 = "llvm.extractvalue"(%1223) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1789 = "llvm.extractvalue"(%1223) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1790 = "llvm.extractvalue"(%1223) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1791 = "llvm.extractvalue"(%1223) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1792 = "llvm.extractvalue"(%1223) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1793 = "llvm.extractvalue"(%1223) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1794 = "llvm.extractvalue"(%1223) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc16)
    %1795 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1796 = "llvm.insertvalue"(%1795, %1779) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1797 = "llvm.insertvalue"(%1796, %1787) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1798 = "llvm.insertvalue"(%1797, %1780) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1799 = "llvm.insertvalue"(%1798, %1788) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1800 = "llvm.insertvalue"(%1799, %1781) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1801 = "llvm.insertvalue"(%1800, %1789) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1802 = "llvm.insertvalue"(%1801, %1782) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1803 = "llvm.insertvalue"(%1802, %1790) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1804 = "llvm.insertvalue"(%1803, %1783) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1805 = "llvm.insertvalue"(%1804, %1791) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1806 = "llvm.insertvalue"(%1805, %1784) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1807 = "llvm.insertvalue"(%1806, %1792) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1808 = "llvm.insertvalue"(%1807, %1785) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1809 = "llvm.insertvalue"(%1808, %1793) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1810 = "llvm.insertvalue"(%1809, %1786) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    %1811 = "llvm.insertvalue"(%1810, %1794) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc16)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1812 = "llvm.extractvalue"(%1811) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1813 = "llvm.extractvalue"(%1811) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1814 = "llvm.extractvalue"(%1811) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1815 = "llvm.extractvalue"(%1811) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1816 = "llvm.extractvalue"(%1811) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1817 = "llvm.extractvalue"(%1811) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1818 = "llvm.extractvalue"(%1811) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1819 = "llvm.extractvalue"(%1811) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1820 = "llvm.extractvalue"(%1811) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1821 = "llvm.extractvalue"(%1811) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1822 = "llvm.extractvalue"(%1811) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1823 = "llvm.extractvalue"(%1811) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1824 = "llvm.extractvalue"(%1811) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1825 = "llvm.extractvalue"(%1811) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1826 = "llvm.extractvalue"(%1811) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1827 = "llvm.extractvalue"(%1811) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc17)
    %1828 = "llvm.zext"(%1812) : (i1) -> i8 loc(#loc17)
    %1829 = "llvm.zext"(%1813) : (i1) -> i8 loc(#loc17)
    %1830 = "llvm.zext"(%1814) : (i1) -> i8 loc(#loc17)
    %1831 = "llvm.zext"(%1815) : (i1) -> i8 loc(#loc17)
    %1832 = "llvm.zext"(%1816) : (i1) -> i8 loc(#loc17)
    %1833 = "llvm.zext"(%1817) : (i1) -> i8 loc(#loc17)
    %1834 = "llvm.zext"(%1818) : (i1) -> i8 loc(#loc17)
    %1835 = "llvm.zext"(%1819) : (i1) -> i8 loc(#loc17)
    %1836 = "llvm.zext"(%1820) : (i1) -> i8 loc(#loc17)
    %1837 = "llvm.zext"(%1821) : (i1) -> i8 loc(#loc17)
    %1838 = "llvm.zext"(%1822) : (i1) -> i8 loc(#loc17)
    %1839 = "llvm.zext"(%1823) : (i1) -> i8 loc(#loc17)
    %1840 = "llvm.zext"(%1824) : (i1) -> i8 loc(#loc17)
    %1841 = "llvm.zext"(%1825) : (i1) -> i8 loc(#loc17)
    %1842 = "llvm.zext"(%1826) : (i1) -> i8 loc(#loc17)
    %1843 = "llvm.zext"(%1827) : (i1) -> i8 loc(#loc17)
    %1844 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc17)
    %1845 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1846 = "llvm.urem"(%1844, %1845) : (i32, i32) -> i32 loc(#loc17)
    %1847 = "llvm.udiv"(%1844, %1845) : (i32, i32) -> i32 loc(#loc17)
    %1848 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1849 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc)
    %1850 = "llvm.getelementptr"(%1849, %1848) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1851 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1852 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1853 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1854 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1855 = "llvm.and"(%1846, %1854) : (i32, i32) -> i32 loc(#loc17)
    %1856 = "llvm.icmp"(%1855, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1857 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1858 = "llvm.select"(%1856, %1853, %1857) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1859 = "llvm.xor"(%1853, %1858) : (i32, i32) -> i32 loc(#loc17)
    %1860 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1861 = "llvm.and"(%1846, %1860) : (i32, i32) -> i32 loc(#loc17)
    %1862 = "llvm.icmp"(%1861, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1863 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1864 = "llvm.select"(%1862, %1853, %1863) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1865 = "llvm.xor"(%1859, %1864) : (i32, i32) -> i32 loc(#loc17)
    %1866 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1867 = "llvm.and"(%1846, %1866) : (i32, i32) -> i32 loc(#loc17)
    %1868 = "llvm.icmp"(%1867, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1869 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1870 = "llvm.select"(%1868, %1853, %1869) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1871 = "llvm.xor"(%1865, %1870) : (i32, i32) -> i32 loc(#loc17)
    %1872 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1873 = "llvm.and"(%1846, %1872) : (i32, i32) -> i32 loc(#loc17)
    %1874 = "llvm.icmp"(%1873, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1875 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1876 = "llvm.select"(%1874, %1853, %1875) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1877 = "llvm.xor"(%1871, %1876) : (i32, i32) -> i32 loc(#loc17)
    %1878 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1879 = "llvm.and"(%1846, %1878) : (i32, i32) -> i32 loc(#loc17)
    %1880 = "llvm.icmp"(%1879, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1881 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1882 = "llvm.select"(%1880, %1853, %1881) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1883 = "llvm.xor"(%1877, %1882) : (i32, i32) -> i32 loc(#loc17)
    %1884 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1885 = "llvm.and"(%1847, %1884) : (i32, i32) -> i32 loc(#loc17)
    %1886 = "llvm.icmp"(%1885, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1887 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc17)
    %1888 = "llvm.select"(%1886, %1853, %1887) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1889 = "llvm.xor"(%1883, %1888) : (i32, i32) -> i32 loc(#loc17)
    %1890 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1891 = "llvm.and"(%1847, %1890) : (i32, i32) -> i32 loc(#loc17)
    %1892 = "llvm.icmp"(%1891, %1853) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1893 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %1894 = "llvm.select"(%1892, %1853, %1893) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1895 = "llvm.xor"(%1889, %1894) : (i32, i32) -> i32 loc(#loc17)
    %1896 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1897 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1898 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1899 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1900 = "llvm.and"(%1846, %1899) : (i32, i32) -> i32 loc(#loc17)
    %1901 = "llvm.icmp"(%1900, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1902 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1903 = "llvm.select"(%1901, %1898, %1902) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1904 = "llvm.xor"(%1898, %1903) : (i32, i32) -> i32 loc(#loc17)
    %1905 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1906 = "llvm.and"(%1846, %1905) : (i32, i32) -> i32 loc(#loc17)
    %1907 = "llvm.icmp"(%1906, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1908 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1909 = "llvm.select"(%1907, %1898, %1908) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1910 = "llvm.xor"(%1904, %1909) : (i32, i32) -> i32 loc(#loc17)
    %1911 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1912 = "llvm.and"(%1846, %1911) : (i32, i32) -> i32 loc(#loc17)
    %1913 = "llvm.icmp"(%1912, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1914 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc17)
    %1915 = "llvm.select"(%1913, %1898, %1914) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1916 = "llvm.xor"(%1910, %1915) : (i32, i32) -> i32 loc(#loc17)
    %1917 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1918 = "llvm.and"(%1846, %1917) : (i32, i32) -> i32 loc(#loc17)
    %1919 = "llvm.icmp"(%1918, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1920 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc17)
    %1921 = "llvm.select"(%1919, %1898, %1920) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1922 = "llvm.xor"(%1916, %1921) : (i32, i32) -> i32 loc(#loc17)
    %1923 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1924 = "llvm.and"(%1846, %1923) : (i32, i32) -> i32 loc(#loc17)
    %1925 = "llvm.icmp"(%1924, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1926 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc17)
    %1927 = "llvm.select"(%1925, %1898, %1926) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1928 = "llvm.xor"(%1922, %1927) : (i32, i32) -> i32 loc(#loc17)
    %1929 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1930 = "llvm.and"(%1847, %1929) : (i32, i32) -> i32 loc(#loc17)
    %1931 = "llvm.icmp"(%1930, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1932 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc17)
    %1933 = "llvm.select"(%1931, %1898, %1932) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1934 = "llvm.xor"(%1928, %1933) : (i32, i32) -> i32 loc(#loc17)
    %1935 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc17)
    %1936 = "llvm.and"(%1847, %1935) : (i32, i32) -> i32 loc(#loc17)
    %1937 = "llvm.icmp"(%1936, %1898) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc17)
    %1938 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc17)
    %1939 = "llvm.select"(%1937, %1898, %1938) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc17)
    %1940 = "llvm.xor"(%1934, %1939) : (i32, i32) -> i32 loc(#loc17)
    %1941 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1942 = "llvm.xor"(%1895, %1941) : (i32, i32) -> i32 loc(#loc17)
    %1943 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1944 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1945 = "llvm.lshr"(%1942, %1944) : (i32, i32) -> i32 loc(#loc17)
    %1946 = "llvm.shl"(%1945, %1943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1947 = "llvm.add"(%1946, %1942) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1948 = "llvm.getelementptr"(%1850, %1947) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1949 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %1950 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1951 = "llvm.insertelement"(%1949, %1828, %1950) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %1952 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1953 = "llvm.insertelement"(%1951, %1829, %1952) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %1954 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1955 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1956 = "llvm.extractelement"(%1953, %1955) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %1957 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1958 = "llvm.extractelement"(%1953, %1957) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %1959 = "llvm.inline_asm"(%1948, %1956, %1958, %1954) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1960 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1961 = "llvm.xor"(%1940, %1960) : (i32, i32) -> i32 loc(#loc17)
    %1962 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1963 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1964 = "llvm.lshr"(%1961, %1963) : (i32, i32) -> i32 loc(#loc17)
    %1965 = "llvm.shl"(%1964, %1962) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1966 = "llvm.add"(%1965, %1961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1967 = "llvm.getelementptr"(%1850, %1966) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1968 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1969 = "llvm.load"(%1967) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %1970 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %1971 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1972 = "llvm.insertelement"(%1970, %1969, %1971) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %1973 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1974 = "llvm.extractelement"(%1972, %1973) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %1975 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %1976 = "llvm.xor"(%1940, %1975) : (i32, i32) -> i32 loc(#loc17)
    %1977 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1978 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1979 = "llvm.lshr"(%1976, %1978) : (i32, i32) -> i32 loc(#loc17)
    %1980 = "llvm.shl"(%1979, %1977) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1981 = "llvm.add"(%1980, %1976) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1982 = "llvm.getelementptr"(%1850, %1981) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1983 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %1984 = "llvm.load"(%1982) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %1985 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %1986 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1987 = "llvm.insertelement"(%1985, %1984, %1986) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %1988 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1989 = "llvm.extractelement"(%1987, %1988) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %1990 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %1991 = "llvm.xor"(%1895, %1990) : (i32, i32) -> i32 loc(#loc17)
    %1992 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1993 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %1994 = "llvm.lshr"(%1991, %1993) : (i32, i32) -> i32 loc(#loc17)
    %1995 = "llvm.shl"(%1994, %1992) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1996 = "llvm.add"(%1995, %1991) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %1997 = "llvm.getelementptr"(%1850, %1996) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %1998 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %1999 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2000 = "llvm.insertelement"(%1998, %1830, %1999) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2001 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2002 = "llvm.insertelement"(%2000, %1831, %2001) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2003 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2004 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2005 = "llvm.extractelement"(%2002, %2004) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2006 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2007 = "llvm.extractelement"(%2002, %2006) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2008 = "llvm.inline_asm"(%1997, %2005, %2007, %2003) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2009 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2010 = "llvm.xor"(%1940, %2009) : (i32, i32) -> i32 loc(#loc17)
    %2011 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2012 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2013 = "llvm.lshr"(%2010, %2012) : (i32, i32) -> i32 loc(#loc17)
    %2014 = "llvm.shl"(%2013, %2011) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2015 = "llvm.add"(%2014, %2010) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2016 = "llvm.getelementptr"(%1850, %2015) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2017 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2018 = "llvm.load"(%2016) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2019 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2020 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2021 = "llvm.insertelement"(%2019, %2018, %2020) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2022 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2023 = "llvm.extractelement"(%2021, %2022) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2024 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2025 = "llvm.xor"(%1940, %2024) : (i32, i32) -> i32 loc(#loc17)
    %2026 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2027 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2028 = "llvm.lshr"(%2025, %2027) : (i32, i32) -> i32 loc(#loc17)
    %2029 = "llvm.shl"(%2028, %2026) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2030 = "llvm.add"(%2029, %2025) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2031 = "llvm.getelementptr"(%1850, %2030) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2032 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2033 = "llvm.load"(%2031) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2034 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2035 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2036 = "llvm.insertelement"(%2034, %2033, %2035) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2037 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2038 = "llvm.extractelement"(%2036, %2037) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2039 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2040 = "llvm.xor"(%1895, %2039) : (i32, i32) -> i32 loc(#loc17)
    %2041 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2042 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2043 = "llvm.lshr"(%2040, %2042) : (i32, i32) -> i32 loc(#loc17)
    %2044 = "llvm.shl"(%2043, %2041) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2045 = "llvm.add"(%2044, %2040) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2046 = "llvm.getelementptr"(%1850, %2045) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2047 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2048 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2049 = "llvm.insertelement"(%2047, %1832, %2048) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2050 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2051 = "llvm.insertelement"(%2049, %1833, %2050) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2052 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2053 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2054 = "llvm.extractelement"(%2051, %2053) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2055 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2056 = "llvm.extractelement"(%2051, %2055) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2057 = "llvm.inline_asm"(%2046, %2054, %2056, %2052) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2058 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2059 = "llvm.xor"(%1940, %2058) : (i32, i32) -> i32 loc(#loc17)
    %2060 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2061 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2062 = "llvm.lshr"(%2059, %2061) : (i32, i32) -> i32 loc(#loc17)
    %2063 = "llvm.shl"(%2062, %2060) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2064 = "llvm.add"(%2063, %2059) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2065 = "llvm.getelementptr"(%1850, %2064) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2066 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2067 = "llvm.load"(%2065) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2068 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2069 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2070 = "llvm.insertelement"(%2068, %2067, %2069) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2071 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2072 = "llvm.extractelement"(%2070, %2071) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2073 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2074 = "llvm.xor"(%1940, %2073) : (i32, i32) -> i32 loc(#loc17)
    %2075 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2076 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2077 = "llvm.lshr"(%2074, %2076) : (i32, i32) -> i32 loc(#loc17)
    %2078 = "llvm.shl"(%2077, %2075) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2079 = "llvm.add"(%2078, %2074) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2080 = "llvm.getelementptr"(%1850, %2079) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2081 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2082 = "llvm.load"(%2080) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2083 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2084 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2085 = "llvm.insertelement"(%2083, %2082, %2084) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2086 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2087 = "llvm.extractelement"(%2085, %2086) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2088 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2089 = "llvm.xor"(%1895, %2088) : (i32, i32) -> i32 loc(#loc17)
    %2090 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2091 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2092 = "llvm.lshr"(%2089, %2091) : (i32, i32) -> i32 loc(#loc17)
    %2093 = "llvm.shl"(%2092, %2090) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2094 = "llvm.add"(%2093, %2089) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2095 = "llvm.getelementptr"(%1850, %2094) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2096 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2097 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2098 = "llvm.insertelement"(%2096, %1834, %2097) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2099 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2100 = "llvm.insertelement"(%2098, %1835, %2099) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2101 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2102 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2103 = "llvm.extractelement"(%2100, %2102) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2104 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2105 = "llvm.extractelement"(%2100, %2104) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2106 = "llvm.inline_asm"(%2095, %2103, %2105, %2101) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2107 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2108 = "llvm.xor"(%1940, %2107) : (i32, i32) -> i32 loc(#loc17)
    %2109 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2110 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2111 = "llvm.lshr"(%2108, %2110) : (i32, i32) -> i32 loc(#loc17)
    %2112 = "llvm.shl"(%2111, %2109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2113 = "llvm.add"(%2112, %2108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2114 = "llvm.getelementptr"(%1850, %2113) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2115 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2116 = "llvm.load"(%2114) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2117 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2118 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2119 = "llvm.insertelement"(%2117, %2116, %2118) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2120 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2121 = "llvm.extractelement"(%2119, %2120) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2122 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2123 = "llvm.xor"(%1940, %2122) : (i32, i32) -> i32 loc(#loc17)
    %2124 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2125 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2126 = "llvm.lshr"(%2123, %2125) : (i32, i32) -> i32 loc(#loc17)
    %2127 = "llvm.shl"(%2126, %2124) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2128 = "llvm.add"(%2127, %2123) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2129 = "llvm.getelementptr"(%1850, %2128) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2130 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2131 = "llvm.load"(%2129) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2132 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2133 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2134 = "llvm.insertelement"(%2132, %2131, %2133) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2135 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2136 = "llvm.extractelement"(%2134, %2135) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2137 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2138 = "llvm.xor"(%1895, %2137) : (i32, i32) -> i32 loc(#loc17)
    %2139 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2140 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2141 = "llvm.lshr"(%2138, %2140) : (i32, i32) -> i32 loc(#loc17)
    %2142 = "llvm.shl"(%2141, %2139) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2143 = "llvm.add"(%2142, %2138) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2144 = "llvm.getelementptr"(%1850, %2143) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2145 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2146 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2147 = "llvm.insertelement"(%2145, %1836, %2146) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2148 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2149 = "llvm.insertelement"(%2147, %1837, %2148) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2150 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2151 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2152 = "llvm.extractelement"(%2149, %2151) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2153 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2154 = "llvm.extractelement"(%2149, %2153) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2155 = "llvm.inline_asm"(%2144, %2152, %2154, %2150) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2156 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2157 = "llvm.xor"(%1940, %2156) : (i32, i32) -> i32 loc(#loc17)
    %2158 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2159 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2160 = "llvm.lshr"(%2157, %2159) : (i32, i32) -> i32 loc(#loc17)
    %2161 = "llvm.shl"(%2160, %2158) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2162 = "llvm.add"(%2161, %2157) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2163 = "llvm.getelementptr"(%1850, %2162) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2164 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2165 = "llvm.load"(%2163) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2166 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2167 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2168 = "llvm.insertelement"(%2166, %2165, %2167) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2169 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2170 = "llvm.extractelement"(%2168, %2169) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2171 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2172 = "llvm.xor"(%1940, %2171) : (i32, i32) -> i32 loc(#loc17)
    %2173 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2174 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2175 = "llvm.lshr"(%2172, %2174) : (i32, i32) -> i32 loc(#loc17)
    %2176 = "llvm.shl"(%2175, %2173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2177 = "llvm.add"(%2176, %2172) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2178 = "llvm.getelementptr"(%1850, %2177) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2179 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2180 = "llvm.load"(%2178) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2181 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2182 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2183 = "llvm.insertelement"(%2181, %2180, %2182) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2184 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2185 = "llvm.extractelement"(%2183, %2184) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2186 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2187 = "llvm.xor"(%1895, %2186) : (i32, i32) -> i32 loc(#loc17)
    %2188 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2189 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2190 = "llvm.lshr"(%2187, %2189) : (i32, i32) -> i32 loc(#loc17)
    %2191 = "llvm.shl"(%2190, %2188) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2192 = "llvm.add"(%2191, %2187) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2193 = "llvm.getelementptr"(%1850, %2192) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2194 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2195 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2196 = "llvm.insertelement"(%2194, %1838, %2195) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2197 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2198 = "llvm.insertelement"(%2196, %1839, %2197) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2199 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2200 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2201 = "llvm.extractelement"(%2198, %2200) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2202 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2203 = "llvm.extractelement"(%2198, %2202) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2204 = "llvm.inline_asm"(%2193, %2201, %2203, %2199) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2205 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2206 = "llvm.xor"(%1940, %2205) : (i32, i32) -> i32 loc(#loc17)
    %2207 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2208 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2209 = "llvm.lshr"(%2206, %2208) : (i32, i32) -> i32 loc(#loc17)
    %2210 = "llvm.shl"(%2209, %2207) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2211 = "llvm.add"(%2210, %2206) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2212 = "llvm.getelementptr"(%1850, %2211) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2213 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2214 = "llvm.load"(%2212) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2215 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2216 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2217 = "llvm.insertelement"(%2215, %2214, %2216) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2218 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2219 = "llvm.extractelement"(%2217, %2218) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2220 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2221 = "llvm.xor"(%1940, %2220) : (i32, i32) -> i32 loc(#loc17)
    %2222 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2223 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2224 = "llvm.lshr"(%2221, %2223) : (i32, i32) -> i32 loc(#loc17)
    %2225 = "llvm.shl"(%2224, %2222) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2226 = "llvm.add"(%2225, %2221) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2227 = "llvm.getelementptr"(%1850, %2226) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2228 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2229 = "llvm.load"(%2227) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2230 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2231 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2232 = "llvm.insertelement"(%2230, %2229, %2231) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2233 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2234 = "llvm.extractelement"(%2232, %2233) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2235 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2236 = "llvm.xor"(%1895, %2235) : (i32, i32) -> i32 loc(#loc17)
    %2237 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2238 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2239 = "llvm.lshr"(%2236, %2238) : (i32, i32) -> i32 loc(#loc17)
    %2240 = "llvm.shl"(%2239, %2237) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2241 = "llvm.add"(%2240, %2236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2242 = "llvm.getelementptr"(%1850, %2241) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2243 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2244 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2245 = "llvm.insertelement"(%2243, %1840, %2244) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2246 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2247 = "llvm.insertelement"(%2245, %1841, %2246) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2248 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2249 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2250 = "llvm.extractelement"(%2247, %2249) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2251 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2252 = "llvm.extractelement"(%2247, %2251) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2253 = "llvm.inline_asm"(%2242, %2250, %2252, %2248) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2254 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2255 = "llvm.xor"(%1940, %2254) : (i32, i32) -> i32 loc(#loc17)
    %2256 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2257 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2258 = "llvm.lshr"(%2255, %2257) : (i32, i32) -> i32 loc(#loc17)
    %2259 = "llvm.shl"(%2258, %2256) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2260 = "llvm.add"(%2259, %2255) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2261 = "llvm.getelementptr"(%1850, %2260) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2262 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2263 = "llvm.load"(%2261) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2264 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2265 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2266 = "llvm.insertelement"(%2264, %2263, %2265) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2267 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2268 = "llvm.extractelement"(%2266, %2267) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2269 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2270 = "llvm.xor"(%1940, %2269) : (i32, i32) -> i32 loc(#loc17)
    %2271 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2272 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2273 = "llvm.lshr"(%2270, %2272) : (i32, i32) -> i32 loc(#loc17)
    %2274 = "llvm.shl"(%2273, %2271) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2275 = "llvm.add"(%2274, %2270) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2276 = "llvm.getelementptr"(%1850, %2275) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2277 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2278 = "llvm.load"(%2276) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2279 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2280 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2281 = "llvm.insertelement"(%2279, %2278, %2280) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2282 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2283 = "llvm.extractelement"(%2281, %2282) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2284 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2285 = "llvm.xor"(%1895, %2284) : (i32, i32) -> i32 loc(#loc17)
    %2286 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2287 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2288 = "llvm.lshr"(%2285, %2287) : (i32, i32) -> i32 loc(#loc17)
    %2289 = "llvm.shl"(%2288, %2286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2290 = "llvm.add"(%2289, %2285) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2291 = "llvm.getelementptr"(%1850, %2290) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2292 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc17)
    %2293 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2294 = "llvm.insertelement"(%2292, %1842, %2293) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2295 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2296 = "llvm.insertelement"(%2294, %1843, %2295) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc17)
    %2297 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2298 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2299 = "llvm.extractelement"(%2296, %2298) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2300 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2301 = "llvm.extractelement"(%2296, %2300) : (vector<2xi8>, i32) -> i8 loc(#loc17)
    %2302 = "llvm.inline_asm"(%2291, %2299, %2301, %2297) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc17)
    "nvvm.barrier0"() : () -> () loc(#loc17)
    %2303 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2304 = "llvm.xor"(%1940, %2303) : (i32, i32) -> i32 loc(#loc17)
    %2305 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2306 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2307 = "llvm.lshr"(%2304, %2306) : (i32, i32) -> i32 loc(#loc17)
    %2308 = "llvm.shl"(%2307, %2305) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2309 = "llvm.add"(%2308, %2304) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2310 = "llvm.getelementptr"(%1850, %2309) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2311 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2312 = "llvm.load"(%2310) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2313 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2314 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2315 = "llvm.insertelement"(%2313, %2312, %2314) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2316 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2317 = "llvm.extractelement"(%2315, %2316) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2318 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc17)
    %2319 = "llvm.xor"(%1940, %2318) : (i32, i32) -> i32 loc(#loc17)
    %2320 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2321 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc17)
    %2322 = "llvm.lshr"(%2319, %2321) : (i32, i32) -> i32 loc(#loc17)
    %2323 = "llvm.shl"(%2322, %2320) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2324 = "llvm.add"(%2323, %2319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc17)
    %2325 = "llvm.getelementptr"(%1850, %2324) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc17)
    %2326 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc17)
    %2327 = "llvm.load"(%2325) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc17)
    %2328 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc17)
    %2329 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2330 = "llvm.insertelement"(%2328, %2327, %2329) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc17)
    %2331 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc17)
    %2332 = "llvm.extractelement"(%2330, %2331) : (vector<1xi8>, i32) -> i8 loc(#loc17)
    %2333 = "llvm.trunc"(%1974) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2334 = "llvm.trunc"(%1989) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2335 = "llvm.trunc"(%2023) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2336 = "llvm.trunc"(%2038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2337 = "llvm.trunc"(%2072) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2338 = "llvm.trunc"(%2087) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2339 = "llvm.trunc"(%2121) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2340 = "llvm.trunc"(%2136) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2341 = "llvm.trunc"(%2170) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2342 = "llvm.trunc"(%2185) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2343 = "llvm.trunc"(%2219) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2344 = "llvm.trunc"(%2234) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2345 = "llvm.trunc"(%2268) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2346 = "llvm.trunc"(%2283) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2347 = "llvm.trunc"(%2317) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2348 = "llvm.trunc"(%2332) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc17)
    %2349 = "llvm.mlir.undef"() : () -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2350 = "llvm.insertvalue"(%2349, %2333) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2351 = "llvm.insertvalue"(%2350, %2334) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2352 = "llvm.insertvalue"(%2351, %2335) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2353 = "llvm.insertvalue"(%2352, %2336) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2354 = "llvm.insertvalue"(%2353, %2337) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2355 = "llvm.insertvalue"(%2354, %2338) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2356 = "llvm.insertvalue"(%2355, %2339) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2357 = "llvm.insertvalue"(%2356, %2340) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2358 = "llvm.insertvalue"(%2357, %2341) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2359 = "llvm.insertvalue"(%2358, %2342) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2360 = "llvm.insertvalue"(%2359, %2343) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2361 = "llvm.insertvalue"(%2360, %2344) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2362 = "llvm.insertvalue"(%2361, %2345) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2363 = "llvm.insertvalue"(%2362, %2346) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2364 = "llvm.insertvalue"(%2363, %2347) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2365 = "llvm.insertvalue"(%2364, %2348) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>, i1) -> !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc17)
    %2366 = "llvm.bitcast"(%arg1) : (!llvm.ptr<1>) -> !llvm.ptr<1> loc(#loc18)
    %2367 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2368 = "llvm.insertvalue"(%2367, %2366) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2369 = "llvm.insertvalue"(%2368, %2366) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2370 = "llvm.insertvalue"(%2369, %2366) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2371 = "llvm.insertvalue"(%2370, %2366) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2372 = "llvm.insertvalue"(%2371, %2366) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2373 = "llvm.insertvalue"(%2372, %2366) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2374 = "llvm.insertvalue"(%2373, %2366) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2375 = "llvm.insertvalue"(%2374, %2366) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2376 = "llvm.insertvalue"(%2375, %2366) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2377 = "llvm.insertvalue"(%2376, %2366) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2378 = "llvm.insertvalue"(%2377, %2366) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2379 = "llvm.insertvalue"(%2378, %2366) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2380 = "llvm.insertvalue"(%2379, %2366) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2381 = "llvm.insertvalue"(%2380, %2366) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2382 = "llvm.insertvalue"(%2381, %2366) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2383 = "llvm.insertvalue"(%2382, %2366) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2384 = "llvm.extractvalue"(%2383) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2385 = "llvm.extractvalue"(%2383) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2386 = "llvm.extractvalue"(%2383) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2387 = "llvm.extractvalue"(%2383) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2388 = "llvm.extractvalue"(%2383) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2389 = "llvm.extractvalue"(%2383) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2390 = "llvm.extractvalue"(%2383) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2391 = "llvm.extractvalue"(%2383) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2392 = "llvm.extractvalue"(%2383) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2393 = "llvm.extractvalue"(%2383) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2394 = "llvm.extractvalue"(%2383) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2395 = "llvm.extractvalue"(%2383) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2396 = "llvm.extractvalue"(%2383) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2397 = "llvm.extractvalue"(%2383) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2398 = "llvm.extractvalue"(%2383) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2399 = "llvm.extractvalue"(%2383) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc18)
    %2400 = "llvm.extractvalue"(%1778) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2401 = "llvm.extractvalue"(%1778) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2402 = "llvm.extractvalue"(%1778) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2403 = "llvm.extractvalue"(%1778) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2404 = "llvm.extractvalue"(%1778) <{position = array<i64: 4>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2405 = "llvm.extractvalue"(%1778) <{position = array<i64: 5>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2406 = "llvm.extractvalue"(%1778) <{position = array<i64: 6>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2407 = "llvm.extractvalue"(%1778) <{position = array<i64: 7>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2408 = "llvm.extractvalue"(%1778) <{position = array<i64: 8>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2409 = "llvm.extractvalue"(%1778) <{position = array<i64: 9>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2410 = "llvm.extractvalue"(%1778) <{position = array<i64: 10>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2411 = "llvm.extractvalue"(%1778) <{position = array<i64: 11>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2412 = "llvm.extractvalue"(%1778) <{position = array<i64: 12>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2413 = "llvm.extractvalue"(%1778) <{position = array<i64: 13>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2414 = "llvm.extractvalue"(%1778) <{position = array<i64: 14>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2415 = "llvm.extractvalue"(%1778) <{position = array<i64: 15>}> : (!llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>) -> i32 loc(#loc18)
    %2416 = "llvm.getelementptr"(%2384, %2400) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2417 = "llvm.getelementptr"(%2385, %2401) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2418 = "llvm.getelementptr"(%2386, %2402) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2419 = "llvm.getelementptr"(%2387, %2403) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2420 = "llvm.getelementptr"(%2388, %2404) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2421 = "llvm.getelementptr"(%2389, %2405) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2422 = "llvm.getelementptr"(%2390, %2406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2423 = "llvm.getelementptr"(%2391, %2407) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2424 = "llvm.getelementptr"(%2392, %2408) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2425 = "llvm.getelementptr"(%2393, %2409) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2426 = "llvm.getelementptr"(%2394, %2410) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2427 = "llvm.getelementptr"(%2395, %2411) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2428 = "llvm.getelementptr"(%2396, %2412) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2429 = "llvm.getelementptr"(%2397, %2413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2430 = "llvm.getelementptr"(%2398, %2414) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2431 = "llvm.getelementptr"(%2399, %2415) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc18)
    %2432 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2433 = "llvm.insertvalue"(%2432, %2416) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2434 = "llvm.insertvalue"(%2433, %2417) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2435 = "llvm.insertvalue"(%2434, %2418) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2436 = "llvm.insertvalue"(%2435, %2419) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2437 = "llvm.insertvalue"(%2436, %2420) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2438 = "llvm.insertvalue"(%2437, %2421) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2439 = "llvm.insertvalue"(%2438, %2422) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2440 = "llvm.insertvalue"(%2439, %2423) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2441 = "llvm.insertvalue"(%2440, %2424) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2442 = "llvm.insertvalue"(%2441, %2425) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2443 = "llvm.insertvalue"(%2442, %2426) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2444 = "llvm.insertvalue"(%2443, %2427) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2445 = "llvm.insertvalue"(%2444, %2428) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2446 = "llvm.insertvalue"(%2445, %2429) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2447 = "llvm.insertvalue"(%2446, %2430) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2448 = "llvm.insertvalue"(%2447, %2431) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>, !llvm.ptr<1>) -> !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc18)
    %2449 = "llvm.extractvalue"(%2448) <{position = array<i64: 0>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2450 = "llvm.extractvalue"(%2448) <{position = array<i64: 1>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2451 = "llvm.extractvalue"(%2448) <{position = array<i64: 2>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2452 = "llvm.extractvalue"(%2448) <{position = array<i64: 3>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2453 = "llvm.extractvalue"(%2448) <{position = array<i64: 4>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2454 = "llvm.extractvalue"(%2448) <{position = array<i64: 5>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2455 = "llvm.extractvalue"(%2448) <{position = array<i64: 6>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2456 = "llvm.extractvalue"(%2448) <{position = array<i64: 7>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2457 = "llvm.extractvalue"(%2448) <{position = array<i64: 8>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2458 = "llvm.extractvalue"(%2448) <{position = array<i64: 9>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2459 = "llvm.extractvalue"(%2448) <{position = array<i64: 10>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2460 = "llvm.extractvalue"(%2448) <{position = array<i64: 11>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2461 = "llvm.extractvalue"(%2448) <{position = array<i64: 12>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2462 = "llvm.extractvalue"(%2448) <{position = array<i64: 13>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2463 = "llvm.extractvalue"(%2448) <{position = array<i64: 14>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2464 = "llvm.extractvalue"(%2448) <{position = array<i64: 15>}> : (!llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>) -> !llvm.ptr<1> loc(#loc19)
    %2465 = "llvm.extractvalue"(%1146) <{position = array<i64: 0>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2466 = "llvm.extractvalue"(%1146) <{position = array<i64: 1>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2467 = "llvm.extractvalue"(%1146) <{position = array<i64: 2>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2468 = "llvm.extractvalue"(%1146) <{position = array<i64: 3>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2469 = "llvm.extractvalue"(%1146) <{position = array<i64: 4>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2470 = "llvm.extractvalue"(%1146) <{position = array<i64: 5>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2471 = "llvm.extractvalue"(%1146) <{position = array<i64: 6>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2472 = "llvm.extractvalue"(%1146) <{position = array<i64: 7>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2473 = "llvm.extractvalue"(%1146) <{position = array<i64: 8>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2474 = "llvm.extractvalue"(%1146) <{position = array<i64: 9>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2475 = "llvm.extractvalue"(%1146) <{position = array<i64: 10>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2476 = "llvm.extractvalue"(%1146) <{position = array<i64: 11>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2477 = "llvm.extractvalue"(%1146) <{position = array<i64: 12>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2478 = "llvm.extractvalue"(%1146) <{position = array<i64: 13>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2479 = "llvm.extractvalue"(%1146) <{position = array<i64: 14>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2480 = "llvm.extractvalue"(%1146) <{position = array<i64: 15>}> : (!llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) -> f32 loc(#loc19)
    %2481 = "llvm.extractvalue"(%2365) <{position = array<i64: 0>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2482 = "llvm.extractvalue"(%2365) <{position = array<i64: 1>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2483 = "llvm.extractvalue"(%2365) <{position = array<i64: 2>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2484 = "llvm.extractvalue"(%2365) <{position = array<i64: 3>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2485 = "llvm.extractvalue"(%2365) <{position = array<i64: 4>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2486 = "llvm.extractvalue"(%2365) <{position = array<i64: 5>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2487 = "llvm.extractvalue"(%2365) <{position = array<i64: 6>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2488 = "llvm.extractvalue"(%2365) <{position = array<i64: 7>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2489 = "llvm.extractvalue"(%2365) <{position = array<i64: 8>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2490 = "llvm.extractvalue"(%2365) <{position = array<i64: 9>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2491 = "llvm.extractvalue"(%2365) <{position = array<i64: 10>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2492 = "llvm.extractvalue"(%2365) <{position = array<i64: 11>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2493 = "llvm.extractvalue"(%2365) <{position = array<i64: 12>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2494 = "llvm.extractvalue"(%2365) <{position = array<i64: 13>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2495 = "llvm.extractvalue"(%2365) <{position = array<i64: 14>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2496 = "llvm.extractvalue"(%2365) <{position = array<i64: 15>}> : (!llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>) -> i1 loc(#loc19)
    %2497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc19)
    %2498 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc19)
    %2499 = "llvm.urem"(%2497, %2498) : (i32, i32) -> i32 loc(#loc19)
    %2500 = "llvm.udiv"(%2497, %2498) : (i32, i32) -> i32 loc(#loc19)
    %2501 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2502 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2503 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2504 = "llvm.bitcast"(%2465) : (f32) -> f32 loc(#loc19)
    %2505 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2506 = "llvm.insertelement"(%2503, %2504, %2505) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2507 = "llvm.bitcast"(%2506) : (vector<1xf32>) -> i32 loc(#loc19)
    %2508 = "llvm.inline_asm"(%2507, %2449, %2481) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2509 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2510 = "llvm.bitcast"(%2466) : (f32) -> f32 loc(#loc19)
    %2511 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2512 = "llvm.insertelement"(%2509, %2510, %2511) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2513 = "llvm.bitcast"(%2512) : (vector<1xf32>) -> i32 loc(#loc19)
    %2514 = "llvm.inline_asm"(%2513, %2450, %2482) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2515 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2516 = "llvm.bitcast"(%2467) : (f32) -> f32 loc(#loc19)
    %2517 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2518 = "llvm.insertelement"(%2515, %2516, %2517) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2519 = "llvm.bitcast"(%2518) : (vector<1xf32>) -> i32 loc(#loc19)
    %2520 = "llvm.inline_asm"(%2519, %2451, %2483) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2521 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2522 = "llvm.bitcast"(%2468) : (f32) -> f32 loc(#loc19)
    %2523 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2524 = "llvm.insertelement"(%2521, %2522, %2523) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2525 = "llvm.bitcast"(%2524) : (vector<1xf32>) -> i32 loc(#loc19)
    %2526 = "llvm.inline_asm"(%2525, %2452, %2484) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2527 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2528 = "llvm.bitcast"(%2469) : (f32) -> f32 loc(#loc19)
    %2529 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2530 = "llvm.insertelement"(%2527, %2528, %2529) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2531 = "llvm.bitcast"(%2530) : (vector<1xf32>) -> i32 loc(#loc19)
    %2532 = "llvm.inline_asm"(%2531, %2453, %2485) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2533 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2534 = "llvm.bitcast"(%2470) : (f32) -> f32 loc(#loc19)
    %2535 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2536 = "llvm.insertelement"(%2533, %2534, %2535) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2537 = "llvm.bitcast"(%2536) : (vector<1xf32>) -> i32 loc(#loc19)
    %2538 = "llvm.inline_asm"(%2537, %2454, %2486) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2539 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2540 = "llvm.bitcast"(%2471) : (f32) -> f32 loc(#loc19)
    %2541 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2542 = "llvm.insertelement"(%2539, %2540, %2541) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2543 = "llvm.bitcast"(%2542) : (vector<1xf32>) -> i32 loc(#loc19)
    %2544 = "llvm.inline_asm"(%2543, %2455, %2487) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2545 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2546 = "llvm.bitcast"(%2472) : (f32) -> f32 loc(#loc19)
    %2547 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2548 = "llvm.insertelement"(%2545, %2546, %2547) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2549 = "llvm.bitcast"(%2548) : (vector<1xf32>) -> i32 loc(#loc19)
    %2550 = "llvm.inline_asm"(%2549, %2456, %2488) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2551 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2552 = "llvm.bitcast"(%2473) : (f32) -> f32 loc(#loc19)
    %2553 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2554 = "llvm.insertelement"(%2551, %2552, %2553) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2555 = "llvm.bitcast"(%2554) : (vector<1xf32>) -> i32 loc(#loc19)
    %2556 = "llvm.inline_asm"(%2555, %2457, %2489) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2557 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2558 = "llvm.bitcast"(%2474) : (f32) -> f32 loc(#loc19)
    %2559 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2560 = "llvm.insertelement"(%2557, %2558, %2559) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2561 = "llvm.bitcast"(%2560) : (vector<1xf32>) -> i32 loc(#loc19)
    %2562 = "llvm.inline_asm"(%2561, %2458, %2490) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2563 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2564 = "llvm.bitcast"(%2475) : (f32) -> f32 loc(#loc19)
    %2565 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2566 = "llvm.insertelement"(%2563, %2564, %2565) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2567 = "llvm.bitcast"(%2566) : (vector<1xf32>) -> i32 loc(#loc19)
    %2568 = "llvm.inline_asm"(%2567, %2459, %2491) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2569 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2570 = "llvm.bitcast"(%2476) : (f32) -> f32 loc(#loc19)
    %2571 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2572 = "llvm.insertelement"(%2569, %2570, %2571) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2573 = "llvm.bitcast"(%2572) : (vector<1xf32>) -> i32 loc(#loc19)
    %2574 = "llvm.inline_asm"(%2573, %2460, %2492) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2575 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2576 = "llvm.bitcast"(%2477) : (f32) -> f32 loc(#loc19)
    %2577 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2578 = "llvm.insertelement"(%2575, %2576, %2577) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2579 = "llvm.bitcast"(%2578) : (vector<1xf32>) -> i32 loc(#loc19)
    %2580 = "llvm.inline_asm"(%2579, %2461, %2493) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2581 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2582 = "llvm.bitcast"(%2478) : (f32) -> f32 loc(#loc19)
    %2583 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2584 = "llvm.insertelement"(%2581, %2582, %2583) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2585 = "llvm.bitcast"(%2584) : (vector<1xf32>) -> i32 loc(#loc19)
    %2586 = "llvm.inline_asm"(%2585, %2462, %2494) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2587 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2588 = "llvm.bitcast"(%2479) : (f32) -> f32 loc(#loc19)
    %2589 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2590 = "llvm.insertelement"(%2587, %2588, %2589) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2591 = "llvm.bitcast"(%2590) : (vector<1xf32>) -> i32 loc(#loc19)
    %2592 = "llvm.inline_asm"(%2591, %2463, %2495) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    %2593 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc19)
    %2594 = "llvm.bitcast"(%2480) : (f32) -> f32 loc(#loc19)
    %2595 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc19)
    %2596 = "llvm.insertelement"(%2593, %2594, %2595) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc19)
    %2597 = "llvm.bitcast"(%2596) : (vector<1xf32>) -> i32 loc(#loc19)
    %2598 = "llvm.inline_asm"(%2597, %2464, %2496) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc19)
    "llvm.return"() : () -> () loc(#loc20)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":8:52)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":17:58)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":18:56)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc18 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc19 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc20 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %67 = "llvm.urem"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.udiv"(%66, %24) : (i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.and"(%67, %22) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.icmp"(%69, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %71 = "llvm.select"(%70, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.xor"(%23, %71) : (i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.and"(%67, %27) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.icmp"(%73, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %75 = "llvm.select"(%74, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.xor"(%72, %75) : (i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.and"(%67, %21) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.icmp"(%77, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %79 = "llvm.select"(%78, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%76, %79) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.and"(%67, %20) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.icmp"(%81, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %83 = "llvm.select"(%82, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%80, %83) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.and"(%67, %19) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.icmp"(%85, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %87 = "llvm.select"(%86, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.xor"(%84, %87) : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.and"(%68, %22) : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.icmp"(%89, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %91 = "llvm.select"(%90, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.xor"(%88, %91) : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.and"(%68, %27) : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.icmp"(%93, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %95 = "llvm.select"(%94, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.xor"(%92, %95) : (i32, i32) -> i32 loc(#loc4)
    %97 = "llvm.xor"(%96, %23) : (i32, i32) -> i32 loc(#loc4)
    %98 = "llvm.xor"(%96, %17) : (i32, i32) -> i32 loc(#loc4)
    %99 = "llvm.xor"(%96, %16) : (i32, i32) -> i32 loc(#loc4)
    %100 = "llvm.xor"(%96, %13) : (i32, i32) -> i32 loc(#loc4)
    %101 = "llvm.xor"(%96, %14) : (i32, i32) -> i32 loc(#loc4)
    %102 = "llvm.xor"(%96, %12) : (i32, i32) -> i32 loc(#loc4)
    %103 = "llvm.xor"(%96, %11) : (i32, i32) -> i32 loc(#loc4)
    %104 = "llvm.xor"(%96, %10) : (i32, i32) -> i32 loc(#loc4)
    %105 = "llvm.add"(%97, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %106 = "llvm.add"(%98, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %107 = "llvm.add"(%99, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %108 = "llvm.add"(%100, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %109 = "llvm.add"(%101, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %110 = "llvm.add"(%102, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %111 = "llvm.add"(%103, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %112 = "llvm.add"(%104, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %113 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %114 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %115 = "llvm.add"(%30, %105) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %116 = "llvm.add"(%30, %106) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %117 = "llvm.add"(%30, %107) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %118 = "llvm.add"(%30, %108) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %119 = "llvm.add"(%30, %109) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %120 = "llvm.add"(%30, %110) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %121 = "llvm.add"(%30, %111) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %122 = "llvm.add"(%30, %112) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %123 = "llvm.icmp"(%113, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %124 = "llvm.icmp"(%114, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %125 = "llvm.icmp"(%115, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %126 = "llvm.icmp"(%116, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %127 = "llvm.icmp"(%117, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %128 = "llvm.icmp"(%118, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %129 = "llvm.icmp"(%119, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %130 = "llvm.icmp"(%120, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %131 = "llvm.icmp"(%121, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %132 = "llvm.icmp"(%122, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %133 = "llvm.getelementptr"(%arg0, %113) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %134 = "llvm.getelementptr"(%arg0, %114) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %135 = "llvm.inline_asm"(%133, %123) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %136 = "llvm.extractvalue"(%135) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%135) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractvalue"(%135) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %141 = "llvm.bitcast"(%140) : (i32) -> vector<1xf32> loc(#loc8)
    %142 = "llvm.extractvalue"(%135) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %143 = "llvm.bitcast"(%142) : (i32) -> vector<1xf32> loc(#loc8)
    %144 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %145 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %146 = "llvm.extractelement"(%141, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %147 = "llvm.extractelement"(%143, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %148 = "llvm.inline_asm"(%134, %124) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %149 = "llvm.extractvalue"(%148) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %150 = "llvm.bitcast"(%149) : (i32) -> vector<1xf32> loc(#loc8)
    %151 = "llvm.extractvalue"(%148) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %152 = "llvm.bitcast"(%151) : (i32) -> vector<1xf32> loc(#loc8)
    %153 = "llvm.extractvalue"(%148) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %154 = "llvm.bitcast"(%153) : (i32) -> vector<1xf32> loc(#loc8)
    %155 = "llvm.extractvalue"(%148) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %156 = "llvm.bitcast"(%155) : (i32) -> vector<1xf32> loc(#loc8)
    %157 = "llvm.extractelement"(%150, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %158 = "llvm.extractelement"(%152, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %159 = "llvm.extractelement"(%154, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %160 = "llvm.extractelement"(%156, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %161 = "llvm.fmul"(%144, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %162 = "llvm.fmul"(%145, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %163 = "llvm.fmul"(%146, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %164 = "llvm.fmul"(%147, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %165 = "llvm.fmul"(%157, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %166 = "llvm.fmul"(%158, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %167 = "llvm.fmul"(%159, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %168 = "llvm.fmul"(%160, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %169 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc9)
    %170 = "llvm.urem"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %171 = "llvm.udiv"(%169, %24) : (i32, i32) -> i32 loc(#loc9)
    %172 = "llvm.and"(%170, %22) : (i32, i32) -> i32 loc(#loc9)
    %173 = "llvm.icmp"(%172, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %174 = "llvm.select"(%173, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.xor"(%23, %174) : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.icmp"(%176, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %178 = "llvm.select"(%177, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %179 = "llvm.xor"(%175, %178) : (i32, i32) -> i32 loc(#loc9)
    %180 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %181 = "llvm.icmp"(%180, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %182 = "llvm.select"(%181, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %183 = "llvm.xor"(%179, %182) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.icmp"(%184, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %186 = "llvm.select"(%185, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.xor"(%183, %186) : (i32, i32) -> i32 loc(#loc9)
    %188 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %189 = "llvm.icmp"(%188, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %190 = "llvm.select"(%189, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %191 = "llvm.xor"(%187, %190) : (i32, i32) -> i32 loc(#loc9)
    %192 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %193 = "llvm.icmp"(%192, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %194 = "llvm.select"(%193, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.xor"(%191, %194) : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.icmp"(%196, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %198 = "llvm.select"(%197, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %199 = "llvm.xor"(%195, %198) : (i32, i32) -> i32 loc(#loc9)
    %200 = "llvm.and"(%170, %27) : (i32, i32) -> i32 loc(#loc9)
    %201 = "llvm.icmp"(%200, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %202 = "llvm.select"(%201, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %203 = "llvm.xor"(%23, %202) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.and"(%170, %21) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.icmp"(%204, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %206 = "llvm.select"(%205, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.xor"(%203, %206) : (i32, i32) -> i32 loc(#loc9)
    %208 = "llvm.and"(%170, %20) : (i32, i32) -> i32 loc(#loc9)
    %209 = "llvm.icmp"(%208, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %210 = "llvm.select"(%209, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %211 = "llvm.xor"(%207, %210) : (i32, i32) -> i32 loc(#loc9)
    %212 = "llvm.and"(%170, %19) : (i32, i32) -> i32 loc(#loc9)
    %213 = "llvm.icmp"(%212, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %214 = "llvm.select"(%213, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.xor"(%211, %214) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.and"(%171, %22) : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.icmp"(%216, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %218 = "llvm.select"(%217, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %219 = "llvm.xor"(%215, %218) : (i32, i32) -> i32 loc(#loc9)
    %220 = "llvm.and"(%171, %27) : (i32, i32) -> i32 loc(#loc9)
    %221 = "llvm.icmp"(%220, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc9)
    %222 = "llvm.select"(%221, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %223 = "llvm.xor"(%219, %222) : (i32, i32) -> i32 loc(#loc9)
    %224 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %225 = "llvm.lshr"(%224, %23) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.shl"(%225, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.add"(%226, %224) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.getelementptr"(%9, %227) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %229 = "llvm.insertelement"(%8, %161, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %230 = "llvm.extractelement"(%229, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %231 = "llvm.bitcast"(%230) : (f32) -> i32 loc(#loc9)
    %232 = "llvm.insertelement"(%6, %231, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %233 = "llvm.inline_asm"(%228, %232, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %234 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %235 = "llvm.lshr"(%234, %23) : (i32, i32) -> i32 loc(#loc9)
    %236 = "llvm.shl"(%235, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.add"(%236, %234) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.getelementptr"(%9, %237) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %239 = "llvm.insertelement"(%8, %162, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %240 = "llvm.extractelement"(%239, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %241 = "llvm.bitcast"(%240) : (f32) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.inline_asm"(%238, %242, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %244 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %245 = "llvm.lshr"(%244, %23) : (i32, i32) -> i32 loc(#loc9)
    %246 = "llvm.shl"(%245, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %247 = "llvm.add"(%246, %244) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.getelementptr"(%9, %247) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %249 = "llvm.insertelement"(%8, %163, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %250 = "llvm.extractelement"(%249, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %251 = "llvm.bitcast"(%250) : (f32) -> i32 loc(#loc9)
    %252 = "llvm.insertelement"(%6, %251, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %253 = "llvm.inline_asm"(%248, %252, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %254 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %255 = "llvm.lshr"(%254, %23) : (i32, i32) -> i32 loc(#loc9)
    %256 = "llvm.shl"(%255, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %257 = "llvm.add"(%256, %254) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %258 = "llvm.getelementptr"(%9, %257) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %259 = "llvm.insertelement"(%8, %164, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %260 = "llvm.extractelement"(%259, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %261 = "llvm.bitcast"(%260) : (f32) -> i32 loc(#loc9)
    %262 = "llvm.insertelement"(%6, %261, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %263 = "llvm.inline_asm"(%258, %262, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %264 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %265 = "llvm.lshr"(%264, %23) : (i32, i32) -> i32 loc(#loc9)
    %266 = "llvm.shl"(%265, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %267 = "llvm.add"(%266, %264) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %268 = "llvm.getelementptr"(%9, %267) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %269 = "llvm.load"(%268) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %270 = "llvm.insertelement"(%6, %269, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %271 = "llvm.extractelement"(%270, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %272 = "llvm.bitcast"(%271) : (i32) -> f32 loc(#loc9)
    %273 = "llvm.insertelement"(%8, %272, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %274 = "llvm.extractelement"(%273, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %275 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %276 = "llvm.lshr"(%275, %23) : (i32, i32) -> i32 loc(#loc9)
    %277 = "llvm.shl"(%276, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %278 = "llvm.add"(%277, %275) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %279 = "llvm.getelementptr"(%9, %278) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %280 = "llvm.load"(%279) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %281 = "llvm.insertelement"(%6, %280, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %282 = "llvm.extractelement"(%281, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %283 = "llvm.bitcast"(%282) : (i32) -> f32 loc(#loc9)
    %284 = "llvm.insertelement"(%8, %283, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %285 = "llvm.extractelement"(%284, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %286 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %287 = "llvm.lshr"(%286, %23) : (i32, i32) -> i32 loc(#loc9)
    %288 = "llvm.shl"(%287, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %289 = "llvm.add"(%288, %286) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %290 = "llvm.getelementptr"(%9, %289) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %291 = "llvm.load"(%290) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %292 = "llvm.insertelement"(%6, %291, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %293 = "llvm.extractelement"(%292, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %294 = "llvm.bitcast"(%293) : (i32) -> f32 loc(#loc9)
    %295 = "llvm.insertelement"(%8, %294, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %296 = "llvm.extractelement"(%295, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %297 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %298 = "llvm.lshr"(%297, %23) : (i32, i32) -> i32 loc(#loc9)
    %299 = "llvm.shl"(%298, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %300 = "llvm.add"(%299, %297) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %301 = "llvm.getelementptr"(%9, %300) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %302 = "llvm.load"(%301) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %303 = "llvm.insertelement"(%6, %302, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %304 = "llvm.extractelement"(%303, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %305 = "llvm.bitcast"(%304) : (i32) -> f32 loc(#loc9)
    %306 = "llvm.insertelement"(%8, %305, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %309 = "llvm.lshr"(%308, %23) : (i32, i32) -> i32 loc(#loc9)
    %310 = "llvm.shl"(%309, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %311 = "llvm.add"(%310, %308) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %312 = "llvm.getelementptr"(%9, %311) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %313 = "llvm.load"(%312) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %314 = "llvm.insertelement"(%6, %313, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %315 = "llvm.extractelement"(%314, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %316 = "llvm.bitcast"(%315) : (i32) -> f32 loc(#loc9)
    %317 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %318 = "llvm.extractelement"(%317, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %319 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %320 = "llvm.lshr"(%319, %23) : (i32, i32) -> i32 loc(#loc9)
    %321 = "llvm.shl"(%320, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %322 = "llvm.add"(%321, %319) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %323 = "llvm.getelementptr"(%9, %322) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %324 = "llvm.load"(%323) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %325 = "llvm.insertelement"(%6, %324, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %326 = "llvm.extractelement"(%325, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %327 = "llvm.bitcast"(%326) : (i32) -> f32 loc(#loc9)
    %328 = "llvm.insertelement"(%8, %327, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %329 = "llvm.extractelement"(%328, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %330 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %331 = "llvm.lshr"(%330, %23) : (i32, i32) -> i32 loc(#loc9)
    %332 = "llvm.shl"(%331, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %333 = "llvm.add"(%332, %330) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %334 = "llvm.getelementptr"(%9, %333) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %335 = "llvm.load"(%334) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %342 = "llvm.lshr"(%341, %23) : (i32, i32) -> i32 loc(#loc9)
    %343 = "llvm.shl"(%342, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %344 = "llvm.add"(%343, %341) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %345 = "llvm.getelementptr"(%9, %344) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %346 = "llvm.load"(%345) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %347 = "llvm.insertelement"(%6, %346, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %348 = "llvm.extractelement"(%347, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %349 = "llvm.bitcast"(%348) : (i32) -> f32 loc(#loc9)
    %350 = "llvm.insertelement"(%8, %349, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %351 = "llvm.extractelement"(%350, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %352 = "llvm.xor"(%199, %23) : (i32, i32) -> i32 loc(#loc9)
    %353 = "llvm.lshr"(%352, %23) : (i32, i32) -> i32 loc(#loc9)
    %354 = "llvm.shl"(%353, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %355 = "llvm.add"(%354, %352) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %356 = "llvm.getelementptr"(%9, %355) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %357 = "llvm.insertelement"(%8, %165, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.bitcast"(%358) : (f32) -> i32 loc(#loc9)
    %360 = "llvm.insertelement"(%6, %359, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %361 = "llvm.inline_asm"(%356, %360, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %362 = "llvm.xor"(%199, %22) : (i32, i32) -> i32 loc(#loc9)
    %363 = "llvm.lshr"(%362, %23) : (i32, i32) -> i32 loc(#loc9)
    %364 = "llvm.shl"(%363, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %365 = "llvm.add"(%364, %362) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %366 = "llvm.getelementptr"(%9, %365) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %367 = "llvm.insertelement"(%8, %166, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %368 = "llvm.extractelement"(%367, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %369 = "llvm.bitcast"(%368) : (f32) -> i32 loc(#loc9)
    %370 = "llvm.insertelement"(%6, %369, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %371 = "llvm.inline_asm"(%366, %370, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %372 = "llvm.xor"(%199, %27) : (i32, i32) -> i32 loc(#loc9)
    %373 = "llvm.lshr"(%372, %23) : (i32, i32) -> i32 loc(#loc9)
    %374 = "llvm.shl"(%373, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %375 = "llvm.add"(%374, %372) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %376 = "llvm.getelementptr"(%9, %375) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %377 = "llvm.insertelement"(%8, %167, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %378 = "llvm.extractelement"(%377, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %379 = "llvm.bitcast"(%378) : (f32) -> i32 loc(#loc9)
    %380 = "llvm.insertelement"(%6, %379, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %381 = "llvm.inline_asm"(%376, %380, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %382 = "llvm.xor"(%199, %15) : (i32, i32) -> i32 loc(#loc9)
    %383 = "llvm.lshr"(%382, %23) : (i32, i32) -> i32 loc(#loc9)
    %384 = "llvm.shl"(%383, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %385 = "llvm.add"(%384, %382) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %386 = "llvm.getelementptr"(%9, %385) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %387 = "llvm.insertelement"(%8, %168, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %388 = "llvm.extractelement"(%387, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %389 = "llvm.bitcast"(%388) : (f32) -> i32 loc(#loc9)
    %390 = "llvm.insertelement"(%6, %389, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %391 = "llvm.inline_asm"(%386, %390, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %392 = "llvm.xor"(%223, %23) : (i32, i32) -> i32 loc(#loc9)
    %393 = "llvm.lshr"(%392, %23) : (i32, i32) -> i32 loc(#loc9)
    %394 = "llvm.shl"(%393, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %395 = "llvm.add"(%394, %392) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %396 = "llvm.getelementptr"(%9, %395) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %397 = "llvm.load"(%396) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %398 = "llvm.insertelement"(%6, %397, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %399 = "llvm.extractelement"(%398, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %400 = "llvm.bitcast"(%399) : (i32) -> f32 loc(#loc9)
    %401 = "llvm.insertelement"(%8, %400, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %402 = "llvm.extractelement"(%401, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %403 = "llvm.xor"(%223, %18) : (i32, i32) -> i32 loc(#loc9)
    %404 = "llvm.lshr"(%403, %23) : (i32, i32) -> i32 loc(#loc9)
    %405 = "llvm.shl"(%404, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %406 = "llvm.add"(%405, %403) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %407 = "llvm.getelementptr"(%9, %406) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %408 = "llvm.load"(%407) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %409 = "llvm.insertelement"(%6, %408, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %410 = "llvm.extractelement"(%409, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %411 = "llvm.bitcast"(%410) : (i32) -> f32 loc(#loc9)
    %412 = "llvm.insertelement"(%8, %411, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %414 = "llvm.xor"(%223, %17) : (i32, i32) -> i32 loc(#loc9)
    %415 = "llvm.lshr"(%414, %23) : (i32, i32) -> i32 loc(#loc9)
    %416 = "llvm.shl"(%415, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %417 = "llvm.add"(%416, %414) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %418 = "llvm.getelementptr"(%9, %417) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %419 = "llvm.load"(%418) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %422 = "llvm.bitcast"(%421) : (i32) -> f32 loc(#loc9)
    %423 = "llvm.insertelement"(%8, %422, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %425 = "llvm.xor"(%223, %5) : (i32, i32) -> i32 loc(#loc9)
    %426 = "llvm.lshr"(%425, %23) : (i32, i32) -> i32 loc(#loc9)
    %427 = "llvm.shl"(%426, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %428 = "llvm.add"(%427, %425) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %429 = "llvm.getelementptr"(%9, %428) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %430 = "llvm.load"(%429) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %433 = "llvm.bitcast"(%432) : (i32) -> f32 loc(#loc9)
    %434 = "llvm.insertelement"(%8, %433, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %436 = "llvm.xor"(%223, %16) : (i32, i32) -> i32 loc(#loc9)
    %437 = "llvm.lshr"(%436, %23) : (i32, i32) -> i32 loc(#loc9)
    %438 = "llvm.shl"(%437, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %439 = "llvm.add"(%438, %436) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %440 = "llvm.getelementptr"(%9, %439) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %441 = "llvm.load"(%440) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %444 = "llvm.bitcast"(%443) : (i32) -> f32 loc(#loc9)
    %445 = "llvm.insertelement"(%8, %444, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %447 = "llvm.xor"(%223, %4) : (i32, i32) -> i32 loc(#loc9)
    %448 = "llvm.lshr"(%447, %23) : (i32, i32) -> i32 loc(#loc9)
    %449 = "llvm.shl"(%448, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %450 = "llvm.add"(%449, %447) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %451 = "llvm.getelementptr"(%9, %450) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %452 = "llvm.load"(%451) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %455 = "llvm.bitcast"(%454) : (i32) -> f32 loc(#loc9)
    %456 = "llvm.insertelement"(%8, %455, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %458 = "llvm.xor"(%223, %13) : (i32, i32) -> i32 loc(#loc9)
    %459 = "llvm.lshr"(%458, %23) : (i32, i32) -> i32 loc(#loc9)
    %460 = "llvm.shl"(%459, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %461 = "llvm.add"(%460, %458) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %462 = "llvm.getelementptr"(%9, %461) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %463 = "llvm.load"(%462) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %466 = "llvm.bitcast"(%465) : (i32) -> f32 loc(#loc9)
    %467 = "llvm.insertelement"(%8, %466, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %469 = "llvm.xor"(%223, %3) : (i32, i32) -> i32 loc(#loc9)
    %470 = "llvm.lshr"(%469, %23) : (i32, i32) -> i32 loc(#loc9)
    %471 = "llvm.shl"(%470, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %472 = "llvm.add"(%471, %469) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %473 = "llvm.getelementptr"(%9, %472) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %474 = "llvm.load"(%473) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %477 = "llvm.bitcast"(%476) : (i32) -> f32 loc(#loc9)
    %478 = "llvm.insertelement"(%8, %477, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %480 = "llvm.add"(%115, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %481 = "llvm.add"(%116, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %482 = "llvm.add"(%117, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %483 = "llvm.add"(%118, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %484 = "llvm.add"(%119, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %485 = "llvm.add"(%120, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %486 = "llvm.add"(%121, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %487 = "llvm.add"(%122, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %488 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %489 = "llvm.icmp"(%480, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %490 = "llvm.icmp"(%481, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %491 = "llvm.icmp"(%482, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %492 = "llvm.icmp"(%483, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %493 = "llvm.icmp"(%484, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %494 = "llvm.icmp"(%485, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %495 = "llvm.icmp"(%486, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %496 = "llvm.icmp"(%487, %488) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %497 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc13)
    %498 = "llvm.urem"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %499 = "llvm.udiv"(%497, %24) : (i32, i32) -> i32 loc(#loc13)
    %500 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %501 = "llvm.icmp"(%500, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %502 = "llvm.select"(%501, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %503 = "llvm.xor"(%23, %502) : (i32, i32) -> i32 loc(#loc13)
    %504 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %505 = "llvm.icmp"(%504, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %506 = "llvm.select"(%505, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %507 = "llvm.xor"(%503, %506) : (i32, i32) -> i32 loc(#loc13)
    %508 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %509 = "llvm.icmp"(%508, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %510 = "llvm.select"(%509, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %511 = "llvm.xor"(%507, %510) : (i32, i32) -> i32 loc(#loc13)
    %512 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %513 = "llvm.icmp"(%512, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %514 = "llvm.select"(%513, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %515 = "llvm.xor"(%511, %514) : (i32, i32) -> i32 loc(#loc13)
    %516 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %517 = "llvm.icmp"(%516, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %518 = "llvm.select"(%517, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %519 = "llvm.xor"(%515, %518) : (i32, i32) -> i32 loc(#loc13)
    %520 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %521 = "llvm.icmp"(%520, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %522 = "llvm.select"(%521, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %523 = "llvm.xor"(%519, %522) : (i32, i32) -> i32 loc(#loc13)
    %524 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %525 = "llvm.icmp"(%524, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %526 = "llvm.select"(%525, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %527 = "llvm.xor"(%523, %526) : (i32, i32) -> i32 loc(#loc13)
    %528 = "llvm.and"(%498, %22) : (i32, i32) -> i32 loc(#loc13)
    %529 = "llvm.icmp"(%528, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %530 = "llvm.select"(%529, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %531 = "llvm.xor"(%23, %530) : (i32, i32) -> i32 loc(#loc13)
    %532 = "llvm.and"(%498, %27) : (i32, i32) -> i32 loc(#loc13)
    %533 = "llvm.icmp"(%532, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %534 = "llvm.select"(%533, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %535 = "llvm.xor"(%531, %534) : (i32, i32) -> i32 loc(#loc13)
    %536 = "llvm.and"(%498, %21) : (i32, i32) -> i32 loc(#loc13)
    %537 = "llvm.icmp"(%536, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %538 = "llvm.select"(%537, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %539 = "llvm.xor"(%535, %538) : (i32, i32) -> i32 loc(#loc13)
    %540 = "llvm.and"(%498, %20) : (i32, i32) -> i32 loc(#loc13)
    %541 = "llvm.icmp"(%540, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %542 = "llvm.select"(%541, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %543 = "llvm.xor"(%539, %542) : (i32, i32) -> i32 loc(#loc13)
    %544 = "llvm.and"(%498, %19) : (i32, i32) -> i32 loc(#loc13)
    %545 = "llvm.icmp"(%544, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %546 = "llvm.select"(%545, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %547 = "llvm.xor"(%543, %546) : (i32, i32) -> i32 loc(#loc13)
    %548 = "llvm.and"(%499, %22) : (i32, i32) -> i32 loc(#loc13)
    %549 = "llvm.icmp"(%548, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %550 = "llvm.select"(%549, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %551 = "llvm.xor"(%547, %550) : (i32, i32) -> i32 loc(#loc13)
    %552 = "llvm.and"(%499, %27) : (i32, i32) -> i32 loc(#loc13)
    %553 = "llvm.icmp"(%552, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc13)
    %554 = "llvm.select"(%553, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %555 = "llvm.xor"(%551, %554) : (i32, i32) -> i32 loc(#loc13)
    %556 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %557 = "llvm.lshr"(%556, %22) : (i32, i32) -> i32 loc(#loc13)
    %558 = "llvm.shl"(%557, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %559 = "llvm.add"(%558, %556) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %560 = "llvm.getelementptr"(%9, %559) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %561 = "llvm.insertelement"(%2, %115, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %562 = "llvm.insertelement"(%561, %480, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %563 = "llvm.extractelement"(%562, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %564 = "llvm.extractelement"(%562, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %565 = "llvm.inline_asm"(%560, %563, %564, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %566 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %567 = "llvm.lshr"(%566, %22) : (i32, i32) -> i32 loc(#loc13)
    %568 = "llvm.shl"(%567, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %569 = "llvm.add"(%568, %566) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %570 = "llvm.getelementptr"(%9, %569) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %571 = "llvm.load"(%570) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %572 = "llvm.insertelement"(%6, %571, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %573 = "llvm.extractelement"(%572, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %574 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %575 = "llvm.lshr"(%574, %22) : (i32, i32) -> i32 loc(#loc13)
    %576 = "llvm.shl"(%575, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %577 = "llvm.add"(%576, %574) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %578 = "llvm.getelementptr"(%9, %577) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %579 = "llvm.load"(%578) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %580 = "llvm.insertelement"(%6, %579, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %581 = "llvm.extractelement"(%580, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %582 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %583 = "llvm.lshr"(%582, %22) : (i32, i32) -> i32 loc(#loc13)
    %584 = "llvm.shl"(%583, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %585 = "llvm.add"(%584, %582) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %586 = "llvm.getelementptr"(%9, %585) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %587 = "llvm.insertelement"(%2, %116, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %588 = "llvm.insertelement"(%587, %481, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %591 = "llvm.inline_asm"(%586, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %592 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %593 = "llvm.lshr"(%592, %22) : (i32, i32) -> i32 loc(#loc13)
    %594 = "llvm.shl"(%593, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %595 = "llvm.add"(%594, %592) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %596 = "llvm.getelementptr"(%9, %595) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %597 = "llvm.load"(%596) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %598 = "llvm.insertelement"(%6, %597, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %599 = "llvm.extractelement"(%598, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %600 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %601 = "llvm.lshr"(%600, %22) : (i32, i32) -> i32 loc(#loc13)
    %602 = "llvm.shl"(%601, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %603 = "llvm.add"(%602, %600) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %604 = "llvm.getelementptr"(%9, %603) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %605 = "llvm.load"(%604) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %606 = "llvm.insertelement"(%6, %605, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %607 = "llvm.extractelement"(%606, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %608 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %609 = "llvm.lshr"(%608, %22) : (i32, i32) -> i32 loc(#loc13)
    %610 = "llvm.shl"(%609, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %611 = "llvm.add"(%610, %608) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %612 = "llvm.getelementptr"(%9, %611) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %613 = "llvm.insertelement"(%2, %117, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %614 = "llvm.insertelement"(%613, %482, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %615 = "llvm.extractelement"(%614, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %616 = "llvm.extractelement"(%614, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %617 = "llvm.inline_asm"(%612, %615, %616, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %618 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %619 = "llvm.lshr"(%618, %22) : (i32, i32) -> i32 loc(#loc13)
    %620 = "llvm.shl"(%619, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %621 = "llvm.add"(%620, %618) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %622 = "llvm.getelementptr"(%9, %621) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %623 = "llvm.load"(%622) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %624 = "llvm.insertelement"(%6, %623, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %625 = "llvm.extractelement"(%624, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %626 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %627 = "llvm.lshr"(%626, %22) : (i32, i32) -> i32 loc(#loc13)
    %628 = "llvm.shl"(%627, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %629 = "llvm.add"(%628, %626) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %630 = "llvm.getelementptr"(%9, %629) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %631 = "llvm.load"(%630) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %632 = "llvm.insertelement"(%6, %631, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %633 = "llvm.extractelement"(%632, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %634 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %635 = "llvm.lshr"(%634, %22) : (i32, i32) -> i32 loc(#loc13)
    %636 = "llvm.shl"(%635, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %637 = "llvm.add"(%636, %634) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %638 = "llvm.getelementptr"(%9, %637) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %639 = "llvm.insertelement"(%2, %118, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %640 = "llvm.insertelement"(%639, %483, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %641 = "llvm.extractelement"(%640, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %642 = "llvm.extractelement"(%640, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %643 = "llvm.inline_asm"(%638, %641, %642, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %644 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %645 = "llvm.lshr"(%644, %22) : (i32, i32) -> i32 loc(#loc13)
    %646 = "llvm.shl"(%645, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %647 = "llvm.add"(%646, %644) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %648 = "llvm.getelementptr"(%9, %647) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %649 = "llvm.load"(%648) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %650 = "llvm.insertelement"(%6, %649, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %651 = "llvm.extractelement"(%650, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %652 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %653 = "llvm.lshr"(%652, %22) : (i32, i32) -> i32 loc(#loc13)
    %654 = "llvm.shl"(%653, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %655 = "llvm.add"(%654, %652) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %656 = "llvm.getelementptr"(%9, %655) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %657 = "llvm.load"(%656) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %658 = "llvm.insertelement"(%6, %657, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %659 = "llvm.extractelement"(%658, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %660 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %661 = "llvm.lshr"(%660, %22) : (i32, i32) -> i32 loc(#loc13)
    %662 = "llvm.shl"(%661, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %663 = "llvm.add"(%662, %660) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %664 = "llvm.getelementptr"(%9, %663) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %665 = "llvm.insertelement"(%2, %119, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %666 = "llvm.insertelement"(%665, %484, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %667 = "llvm.extractelement"(%666, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %668 = "llvm.extractelement"(%666, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %669 = "llvm.inline_asm"(%664, %667, %668, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %670 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %671 = "llvm.lshr"(%670, %22) : (i32, i32) -> i32 loc(#loc13)
    %672 = "llvm.shl"(%671, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %673 = "llvm.add"(%672, %670) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %674 = "llvm.getelementptr"(%9, %673) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %675 = "llvm.load"(%674) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %676 = "llvm.insertelement"(%6, %675, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %677 = "llvm.extractelement"(%676, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %678 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %679 = "llvm.lshr"(%678, %22) : (i32, i32) -> i32 loc(#loc13)
    %680 = "llvm.shl"(%679, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %681 = "llvm.add"(%680, %678) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %682 = "llvm.getelementptr"(%9, %681) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %683 = "llvm.load"(%682) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %684 = "llvm.insertelement"(%6, %683, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %685 = "llvm.extractelement"(%684, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %686 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %687 = "llvm.lshr"(%686, %22) : (i32, i32) -> i32 loc(#loc13)
    %688 = "llvm.shl"(%687, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %689 = "llvm.add"(%688, %686) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %690 = "llvm.getelementptr"(%9, %689) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %691 = "llvm.insertelement"(%2, %120, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %692 = "llvm.insertelement"(%691, %485, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %693 = "llvm.extractelement"(%692, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %694 = "llvm.extractelement"(%692, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %695 = "llvm.inline_asm"(%690, %693, %694, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %696 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %697 = "llvm.lshr"(%696, %22) : (i32, i32) -> i32 loc(#loc13)
    %698 = "llvm.shl"(%697, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %699 = "llvm.add"(%698, %696) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %700 = "llvm.getelementptr"(%9, %699) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %701 = "llvm.load"(%700) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %702 = "llvm.insertelement"(%6, %701, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %703 = "llvm.extractelement"(%702, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %704 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %705 = "llvm.lshr"(%704, %22) : (i32, i32) -> i32 loc(#loc13)
    %706 = "llvm.shl"(%705, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %707 = "llvm.add"(%706, %704) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %708 = "llvm.getelementptr"(%9, %707) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %709 = "llvm.load"(%708) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %710 = "llvm.insertelement"(%6, %709, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %711 = "llvm.extractelement"(%710, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %712 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %713 = "llvm.lshr"(%712, %22) : (i32, i32) -> i32 loc(#loc13)
    %714 = "llvm.shl"(%713, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %715 = "llvm.add"(%714, %712) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %716 = "llvm.getelementptr"(%9, %715) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %717 = "llvm.insertelement"(%2, %121, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %718 = "llvm.insertelement"(%717, %486, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %719 = "llvm.extractelement"(%718, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %720 = "llvm.extractelement"(%718, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %721 = "llvm.inline_asm"(%716, %719, %720, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %722 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %723 = "llvm.lshr"(%722, %22) : (i32, i32) -> i32 loc(#loc13)
    %724 = "llvm.shl"(%723, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %725 = "llvm.add"(%724, %722) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %726 = "llvm.getelementptr"(%9, %725) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %727 = "llvm.load"(%726) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %728 = "llvm.insertelement"(%6, %727, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %729 = "llvm.extractelement"(%728, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %730 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %731 = "llvm.lshr"(%730, %22) : (i32, i32) -> i32 loc(#loc13)
    %732 = "llvm.shl"(%731, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %733 = "llvm.add"(%732, %730) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %734 = "llvm.getelementptr"(%9, %733) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %735 = "llvm.load"(%734) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %736 = "llvm.insertelement"(%6, %735, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %737 = "llvm.extractelement"(%736, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %738 = "llvm.xor"(%527, %23) : (i32, i32) -> i32 loc(#loc13)
    %739 = "llvm.lshr"(%738, %22) : (i32, i32) -> i32 loc(#loc13)
    %740 = "llvm.shl"(%739, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %741 = "llvm.add"(%740, %738) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %742 = "llvm.getelementptr"(%9, %741) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %743 = "llvm.insertelement"(%2, %122, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %744 = "llvm.insertelement"(%743, %487, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %745 = "llvm.extractelement"(%744, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %746 = "llvm.extractelement"(%744, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %747 = "llvm.inline_asm"(%742, %745, %746, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %748 = "llvm.xor"(%555, %23) : (i32, i32) -> i32 loc(#loc13)
    %749 = "llvm.lshr"(%748, %22) : (i32, i32) -> i32 loc(#loc13)
    %750 = "llvm.shl"(%749, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %751 = "llvm.add"(%750, %748) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %752 = "llvm.getelementptr"(%9, %751) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %753 = "llvm.load"(%752) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %754 = "llvm.insertelement"(%6, %753, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %755 = "llvm.extractelement"(%754, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %756 = "llvm.xor"(%555, %17) : (i32, i32) -> i32 loc(#loc13)
    %757 = "llvm.lshr"(%756, %22) : (i32, i32) -> i32 loc(#loc13)
    %758 = "llvm.shl"(%757, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %759 = "llvm.add"(%758, %756) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %760 = "llvm.getelementptr"(%9, %759) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %761 = "llvm.load"(%760) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %762 = "llvm.insertelement"(%6, %761, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %763 = "llvm.extractelement"(%762, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %764 = "llvm.zext"(%125) : (i1) -> i8 loc(#loc14)
    %765 = "llvm.zext"(%489) : (i1) -> i8 loc(#loc14)
    %766 = "llvm.zext"(%126) : (i1) -> i8 loc(#loc14)
    %767 = "llvm.zext"(%490) : (i1) -> i8 loc(#loc14)
    %768 = "llvm.zext"(%127) : (i1) -> i8 loc(#loc14)
    %769 = "llvm.zext"(%491) : (i1) -> i8 loc(#loc14)
    %770 = "llvm.zext"(%128) : (i1) -> i8 loc(#loc14)
    %771 = "llvm.zext"(%492) : (i1) -> i8 loc(#loc14)
    %772 = "llvm.zext"(%129) : (i1) -> i8 loc(#loc14)
    %773 = "llvm.zext"(%493) : (i1) -> i8 loc(#loc14)
    %774 = "llvm.zext"(%130) : (i1) -> i8 loc(#loc14)
    %775 = "llvm.zext"(%494) : (i1) -> i8 loc(#loc14)
    %776 = "llvm.zext"(%131) : (i1) -> i8 loc(#loc14)
    %777 = "llvm.zext"(%495) : (i1) -> i8 loc(#loc14)
    %778 = "llvm.zext"(%132) : (i1) -> i8 loc(#loc14)
    %779 = "llvm.zext"(%496) : (i1) -> i8 loc(#loc14)
    %780 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc14)
    %781 = "llvm.urem"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %782 = "llvm.udiv"(%780, %24) : (i32, i32) -> i32 loc(#loc14)
    %783 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %784 = "llvm.icmp"(%783, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %785 = "llvm.select"(%784, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %786 = "llvm.xor"(%23, %785) : (i32, i32) -> i32 loc(#loc14)
    %787 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %788 = "llvm.icmp"(%787, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %789 = "llvm.select"(%788, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %790 = "llvm.xor"(%786, %789) : (i32, i32) -> i32 loc(#loc14)
    %791 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %792 = "llvm.icmp"(%791, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %793 = "llvm.select"(%792, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %794 = "llvm.xor"(%790, %793) : (i32, i32) -> i32 loc(#loc14)
    %795 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %796 = "llvm.icmp"(%795, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %797 = "llvm.select"(%796, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %798 = "llvm.xor"(%794, %797) : (i32, i32) -> i32 loc(#loc14)
    %799 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %800 = "llvm.icmp"(%799, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %801 = "llvm.select"(%800, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %802 = "llvm.xor"(%798, %801) : (i32, i32) -> i32 loc(#loc14)
    %803 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %804 = "llvm.icmp"(%803, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %805 = "llvm.select"(%804, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %806 = "llvm.xor"(%802, %805) : (i32, i32) -> i32 loc(#loc14)
    %807 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %808 = "llvm.icmp"(%807, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %809 = "llvm.select"(%808, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %810 = "llvm.xor"(%806, %809) : (i32, i32) -> i32 loc(#loc14)
    %811 = "llvm.and"(%781, %22) : (i32, i32) -> i32 loc(#loc14)
    %812 = "llvm.icmp"(%811, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %813 = "llvm.select"(%812, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %814 = "llvm.xor"(%23, %813) : (i32, i32) -> i32 loc(#loc14)
    %815 = "llvm.and"(%781, %27) : (i32, i32) -> i32 loc(#loc14)
    %816 = "llvm.icmp"(%815, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %817 = "llvm.select"(%816, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %818 = "llvm.xor"(%814, %817) : (i32, i32) -> i32 loc(#loc14)
    %819 = "llvm.and"(%781, %21) : (i32, i32) -> i32 loc(#loc14)
    %820 = "llvm.icmp"(%819, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %821 = "llvm.select"(%820, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %822 = "llvm.xor"(%818, %821) : (i32, i32) -> i32 loc(#loc14)
    %823 = "llvm.and"(%781, %20) : (i32, i32) -> i32 loc(#loc14)
    %824 = "llvm.icmp"(%823, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %825 = "llvm.select"(%824, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %826 = "llvm.xor"(%822, %825) : (i32, i32) -> i32 loc(#loc14)
    %827 = "llvm.and"(%781, %19) : (i32, i32) -> i32 loc(#loc14)
    %828 = "llvm.icmp"(%827, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %829 = "llvm.select"(%828, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %830 = "llvm.xor"(%826, %829) : (i32, i32) -> i32 loc(#loc14)
    %831 = "llvm.and"(%782, %22) : (i32, i32) -> i32 loc(#loc14)
    %832 = "llvm.icmp"(%831, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %833 = "llvm.select"(%832, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %834 = "llvm.xor"(%830, %833) : (i32, i32) -> i32 loc(#loc14)
    %835 = "llvm.and"(%782, %27) : (i32, i32) -> i32 loc(#loc14)
    %836 = "llvm.icmp"(%835, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc14)
    %837 = "llvm.select"(%836, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc14)
    %838 = "llvm.xor"(%834, %837) : (i32, i32) -> i32 loc(#loc14)
    %839 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %840 = "llvm.lshr"(%839, %22) : (i32, i32) -> i32 loc(#loc14)
    %841 = "llvm.shl"(%840, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %842 = "llvm.add"(%841, %839) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %843 = "llvm.getelementptr"(%9, %842) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %844 = "llvm.insertelement"(%1, %764, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %845 = "llvm.insertelement"(%844, %765, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %846 = "llvm.extractelement"(%845, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %847 = "llvm.extractelement"(%845, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %848 = "llvm.inline_asm"(%843, %846, %847, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %849 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %850 = "llvm.lshr"(%849, %22) : (i32, i32) -> i32 loc(#loc14)
    %851 = "llvm.shl"(%850, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %852 = "llvm.add"(%851, %849) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %853 = "llvm.getelementptr"(%9, %852) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %854 = "llvm.load"(%853) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %855 = "llvm.insertelement"(%0, %854, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %856 = "llvm.extractelement"(%855, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %857 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %858 = "llvm.lshr"(%857, %22) : (i32, i32) -> i32 loc(#loc14)
    %859 = "llvm.shl"(%858, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %860 = "llvm.add"(%859, %857) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %861 = "llvm.getelementptr"(%9, %860) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %862 = "llvm.load"(%861) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %863 = "llvm.insertelement"(%0, %862, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %864 = "llvm.extractelement"(%863, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %865 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %866 = "llvm.lshr"(%865, %22) : (i32, i32) -> i32 loc(#loc14)
    %867 = "llvm.shl"(%866, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %868 = "llvm.add"(%867, %865) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %869 = "llvm.getelementptr"(%9, %868) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %870 = "llvm.insertelement"(%1, %766, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %871 = "llvm.insertelement"(%870, %767, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %872 = "llvm.extractelement"(%871, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %873 = "llvm.extractelement"(%871, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %874 = "llvm.inline_asm"(%869, %872, %873, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %875 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %876 = "llvm.lshr"(%875, %22) : (i32, i32) -> i32 loc(#loc14)
    %877 = "llvm.shl"(%876, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %878 = "llvm.add"(%877, %875) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %879 = "llvm.getelementptr"(%9, %878) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %880 = "llvm.load"(%879) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %881 = "llvm.insertelement"(%0, %880, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %882 = "llvm.extractelement"(%881, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %883 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %884 = "llvm.lshr"(%883, %22) : (i32, i32) -> i32 loc(#loc14)
    %885 = "llvm.shl"(%884, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %886 = "llvm.add"(%885, %883) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %887 = "llvm.getelementptr"(%9, %886) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %888 = "llvm.load"(%887) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %889 = "llvm.insertelement"(%0, %888, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %890 = "llvm.extractelement"(%889, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %891 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %892 = "llvm.lshr"(%891, %22) : (i32, i32) -> i32 loc(#loc14)
    %893 = "llvm.shl"(%892, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %894 = "llvm.add"(%893, %891) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %895 = "llvm.getelementptr"(%9, %894) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %896 = "llvm.insertelement"(%1, %768, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %897 = "llvm.insertelement"(%896, %769, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %898 = "llvm.extractelement"(%897, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %899 = "llvm.extractelement"(%897, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %900 = "llvm.inline_asm"(%895, %898, %899, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %901 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %902 = "llvm.lshr"(%901, %22) : (i32, i32) -> i32 loc(#loc14)
    %903 = "llvm.shl"(%902, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %904 = "llvm.add"(%903, %901) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %905 = "llvm.getelementptr"(%9, %904) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %906 = "llvm.load"(%905) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %907 = "llvm.insertelement"(%0, %906, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %908 = "llvm.extractelement"(%907, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %909 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %910 = "llvm.lshr"(%909, %22) : (i32, i32) -> i32 loc(#loc14)
    %911 = "llvm.shl"(%910, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %912 = "llvm.add"(%911, %909) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %913 = "llvm.getelementptr"(%9, %912) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %914 = "llvm.load"(%913) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %915 = "llvm.insertelement"(%0, %914, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %916 = "llvm.extractelement"(%915, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %917 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %918 = "llvm.lshr"(%917, %22) : (i32, i32) -> i32 loc(#loc14)
    %919 = "llvm.shl"(%918, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %920 = "llvm.add"(%919, %917) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %921 = "llvm.getelementptr"(%9, %920) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %922 = "llvm.insertelement"(%1, %770, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %923 = "llvm.insertelement"(%922, %771, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %924 = "llvm.extractelement"(%923, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %925 = "llvm.extractelement"(%923, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %926 = "llvm.inline_asm"(%921, %924, %925, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %927 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %928 = "llvm.lshr"(%927, %22) : (i32, i32) -> i32 loc(#loc14)
    %929 = "llvm.shl"(%928, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %930 = "llvm.add"(%929, %927) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %931 = "llvm.getelementptr"(%9, %930) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %932 = "llvm.load"(%931) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %933 = "llvm.insertelement"(%0, %932, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %934 = "llvm.extractelement"(%933, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %935 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %936 = "llvm.lshr"(%935, %22) : (i32, i32) -> i32 loc(#loc14)
    %937 = "llvm.shl"(%936, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %938 = "llvm.add"(%937, %935) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %939 = "llvm.getelementptr"(%9, %938) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %940 = "llvm.load"(%939) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %941 = "llvm.insertelement"(%0, %940, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %942 = "llvm.extractelement"(%941, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %943 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %944 = "llvm.lshr"(%943, %22) : (i32, i32) -> i32 loc(#loc14)
    %945 = "llvm.shl"(%944, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %946 = "llvm.add"(%945, %943) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %947 = "llvm.getelementptr"(%9, %946) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %948 = "llvm.insertelement"(%1, %772, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %949 = "llvm.insertelement"(%948, %773, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %950 = "llvm.extractelement"(%949, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %951 = "llvm.extractelement"(%949, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %952 = "llvm.inline_asm"(%947, %950, %951, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %953 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %954 = "llvm.lshr"(%953, %22) : (i32, i32) -> i32 loc(#loc14)
    %955 = "llvm.shl"(%954, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %956 = "llvm.add"(%955, %953) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %957 = "llvm.getelementptr"(%9, %956) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %958 = "llvm.load"(%957) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %959 = "llvm.insertelement"(%0, %958, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %960 = "llvm.extractelement"(%959, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %961 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %962 = "llvm.lshr"(%961, %22) : (i32, i32) -> i32 loc(#loc14)
    %963 = "llvm.shl"(%962, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %964 = "llvm.add"(%963, %961) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %965 = "llvm.getelementptr"(%9, %964) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %966 = "llvm.load"(%965) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %967 = "llvm.insertelement"(%0, %966, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %968 = "llvm.extractelement"(%967, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %969 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %970 = "llvm.lshr"(%969, %22) : (i32, i32) -> i32 loc(#loc14)
    %971 = "llvm.shl"(%970, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %972 = "llvm.add"(%971, %969) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %973 = "llvm.getelementptr"(%9, %972) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %974 = "llvm.insertelement"(%1, %774, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %975 = "llvm.insertelement"(%974, %775, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %976 = "llvm.extractelement"(%975, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %977 = "llvm.extractelement"(%975, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %978 = "llvm.inline_asm"(%973, %976, %977, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %979 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %980 = "llvm.lshr"(%979, %22) : (i32, i32) -> i32 loc(#loc14)
    %981 = "llvm.shl"(%980, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %982 = "llvm.add"(%981, %979) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %983 = "llvm.getelementptr"(%9, %982) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %984 = "llvm.load"(%983) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %985 = "llvm.insertelement"(%0, %984, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %986 = "llvm.extractelement"(%985, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %987 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %988 = "llvm.lshr"(%987, %22) : (i32, i32) -> i32 loc(#loc14)
    %989 = "llvm.shl"(%988, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %990 = "llvm.add"(%989, %987) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %991 = "llvm.getelementptr"(%9, %990) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %992 = "llvm.load"(%991) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %993 = "llvm.insertelement"(%0, %992, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %994 = "llvm.extractelement"(%993, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %995 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %996 = "llvm.lshr"(%995, %22) : (i32, i32) -> i32 loc(#loc14)
    %997 = "llvm.shl"(%996, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %998 = "llvm.add"(%997, %995) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %999 = "llvm.getelementptr"(%9, %998) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1000 = "llvm.insertelement"(%1, %776, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1001 = "llvm.insertelement"(%1000, %777, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1002 = "llvm.extractelement"(%1001, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1003 = "llvm.extractelement"(%1001, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1004 = "llvm.inline_asm"(%999, %1002, %1003, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1005 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1006 = "llvm.lshr"(%1005, %22) : (i32, i32) -> i32 loc(#loc14)
    %1007 = "llvm.shl"(%1006, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1008 = "llvm.add"(%1007, %1005) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1009 = "llvm.getelementptr"(%9, %1008) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1010 = "llvm.load"(%1009) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1011 = "llvm.insertelement"(%0, %1010, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1012 = "llvm.extractelement"(%1011, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1013 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1014 = "llvm.lshr"(%1013, %22) : (i32, i32) -> i32 loc(#loc14)
    %1015 = "llvm.shl"(%1014, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1016 = "llvm.add"(%1015, %1013) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1017 = "llvm.getelementptr"(%9, %1016) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1018 = "llvm.load"(%1017) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1019 = "llvm.insertelement"(%0, %1018, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1020 = "llvm.extractelement"(%1019, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1021 = "llvm.xor"(%810, %23) : (i32, i32) -> i32 loc(#loc14)
    %1022 = "llvm.lshr"(%1021, %22) : (i32, i32) -> i32 loc(#loc14)
    %1023 = "llvm.shl"(%1022, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1024 = "llvm.add"(%1023, %1021) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1025 = "llvm.getelementptr"(%9, %1024) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1026 = "llvm.insertelement"(%1, %778, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1027 = "llvm.insertelement"(%1026, %779, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %1028 = "llvm.extractelement"(%1027, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1029 = "llvm.extractelement"(%1027, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %1030 = "llvm.inline_asm"(%1025, %1028, %1029, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %1031 = "llvm.xor"(%838, %23) : (i32, i32) -> i32 loc(#loc14)
    %1032 = "llvm.lshr"(%1031, %22) : (i32, i32) -> i32 loc(#loc14)
    %1033 = "llvm.shl"(%1032, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1034 = "llvm.add"(%1033, %1031) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1035 = "llvm.getelementptr"(%9, %1034) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1036 = "llvm.load"(%1035) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1037 = "llvm.insertelement"(%0, %1036, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1038 = "llvm.extractelement"(%1037, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1039 = "llvm.xor"(%838, %17) : (i32, i32) -> i32 loc(#loc14)
    %1040 = "llvm.lshr"(%1039, %22) : (i32, i32) -> i32 loc(#loc14)
    %1041 = "llvm.shl"(%1040, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1042 = "llvm.add"(%1041, %1039) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc14)
    %1043 = "llvm.getelementptr"(%9, %1042) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %1044 = "llvm.load"(%1043) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %1045 = "llvm.insertelement"(%0, %1044, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %1046 = "llvm.extractelement"(%1045, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %1047 = "llvm.trunc"(%856) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1048 = "llvm.trunc"(%864) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1049 = "llvm.trunc"(%882) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1050 = "llvm.trunc"(%890) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1051 = "llvm.trunc"(%908) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1052 = "llvm.trunc"(%916) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1053 = "llvm.trunc"(%934) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1054 = "llvm.trunc"(%942) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1055 = "llvm.trunc"(%960) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1056 = "llvm.trunc"(%968) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1057 = "llvm.trunc"(%986) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1058 = "llvm.trunc"(%994) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1059 = "llvm.trunc"(%1012) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1060 = "llvm.trunc"(%1020) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1061 = "llvm.trunc"(%1038) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1062 = "llvm.trunc"(%1046) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %1063 = "llvm.getelementptr"(%arg1, %573) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1064 = "llvm.getelementptr"(%arg1, %581) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1065 = "llvm.getelementptr"(%arg1, %599) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1066 = "llvm.getelementptr"(%arg1, %607) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1067 = "llvm.getelementptr"(%arg1, %625) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1068 = "llvm.getelementptr"(%arg1, %633) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1069 = "llvm.getelementptr"(%arg1, %651) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1070 = "llvm.getelementptr"(%arg1, %659) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1071 = "llvm.getelementptr"(%arg1, %677) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1072 = "llvm.getelementptr"(%arg1, %685) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1073 = "llvm.getelementptr"(%arg1, %703) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1074 = "llvm.getelementptr"(%arg1, %711) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1075 = "llvm.getelementptr"(%arg1, %729) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1076 = "llvm.getelementptr"(%arg1, %737) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1077 = "llvm.getelementptr"(%arg1, %755) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1078 = "llvm.getelementptr"(%arg1, %763) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %1079 = "llvm.insertelement"(%8, %274, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1080 = "llvm.bitcast"(%1079) : (vector<1xf32>) -> i32 loc(#loc16)
    %1081 = "llvm.inline_asm"(%1080, %1063, %1047) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1082 = "llvm.insertelement"(%8, %285, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1083 = "llvm.bitcast"(%1082) : (vector<1xf32>) -> i32 loc(#loc16)
    %1084 = "llvm.inline_asm"(%1083, %1064, %1048) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1085 = "llvm.insertelement"(%8, %296, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1086 = "llvm.bitcast"(%1085) : (vector<1xf32>) -> i32 loc(#loc16)
    %1087 = "llvm.inline_asm"(%1086, %1065, %1049) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1088 = "llvm.insertelement"(%8, %307, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1089 = "llvm.bitcast"(%1088) : (vector<1xf32>) -> i32 loc(#loc16)
    %1090 = "llvm.inline_asm"(%1089, %1066, %1050) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1091 = "llvm.insertelement"(%8, %318, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1092 = "llvm.bitcast"(%1091) : (vector<1xf32>) -> i32 loc(#loc16)
    %1093 = "llvm.inline_asm"(%1092, %1067, %1051) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1094 = "llvm.insertelement"(%8, %329, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1095 = "llvm.bitcast"(%1094) : (vector<1xf32>) -> i32 loc(#loc16)
    %1096 = "llvm.inline_asm"(%1095, %1068, %1052) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1097 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1098 = "llvm.bitcast"(%1097) : (vector<1xf32>) -> i32 loc(#loc16)
    %1099 = "llvm.inline_asm"(%1098, %1069, %1053) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1100 = "llvm.insertelement"(%8, %351, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1101 = "llvm.bitcast"(%1100) : (vector<1xf32>) -> i32 loc(#loc16)
    %1102 = "llvm.inline_asm"(%1101, %1070, %1054) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1103 = "llvm.insertelement"(%8, %402, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1104 = "llvm.bitcast"(%1103) : (vector<1xf32>) -> i32 loc(#loc16)
    %1105 = "llvm.inline_asm"(%1104, %1071, %1055) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1106 = "llvm.insertelement"(%8, %413, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1107 = "llvm.bitcast"(%1106) : (vector<1xf32>) -> i32 loc(#loc16)
    %1108 = "llvm.inline_asm"(%1107, %1072, %1056) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1109 = "llvm.insertelement"(%8, %424, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1110 = "llvm.bitcast"(%1109) : (vector<1xf32>) -> i32 loc(#loc16)
    %1111 = "llvm.inline_asm"(%1110, %1073, %1057) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1112 = "llvm.insertelement"(%8, %435, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1113 = "llvm.bitcast"(%1112) : (vector<1xf32>) -> i32 loc(#loc16)
    %1114 = "llvm.inline_asm"(%1113, %1074, %1058) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1115 = "llvm.insertelement"(%8, %446, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1116 = "llvm.bitcast"(%1115) : (vector<1xf32>) -> i32 loc(#loc16)
    %1117 = "llvm.inline_asm"(%1116, %1075, %1059) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1118 = "llvm.insertelement"(%8, %457, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1119 = "llvm.bitcast"(%1118) : (vector<1xf32>) -> i32 loc(#loc16)
    %1120 = "llvm.inline_asm"(%1119, %1076, %1060) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1121 = "llvm.insertelement"(%8, %468, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1122 = "llvm.bitcast"(%1121) : (vector<1xf32>) -> i32 loc(#loc16)
    %1123 = "llvm.inline_asm"(%1122, %1077, %1061) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %1124 = "llvm.insertelement"(%8, %479, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %1125 = "llvm.bitcast"(%1124) : (vector<1xf32>) -> i32 loc(#loc16)
    %1126 = "llvm.inline_asm"(%1125, %1078, %1062) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %153 = "llvm.xor"(%23, %152) : (i32, i32) -> i32 loc(#loc9)
    %154 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %155 = "llvm.xor"(%153, %154) : (i32, i32) -> i32 loc(#loc9)
    %156 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %157 = "llvm.xor"(%155, %156) : (i32, i32) -> i32 loc(#loc9)
    %158 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %159 = "llvm.xor"(%157, %158) : (i32, i32) -> i32 loc(#loc9)
    %160 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %161 = "llvm.xor"(%159, %160) : (i32, i32) -> i32 loc(#loc9)
    %162 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc9)
    %164 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc9)
    %165 = "llvm.shl"(%164, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %166 = "llvm.add"(%165, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %167 = "llvm.getelementptr"(%9, %166) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %168 = "llvm.insertelement"(%8, %144, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %169 = "llvm.extractelement"(%168, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %170 = "llvm.bitcast"(%169) : (f32) -> i32 loc(#loc9)
    %171 = "llvm.insertelement"(%6, %170, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %172 = "llvm.inline_asm"(%167, %171, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %173 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc9)
    %174 = "llvm.lshr"(%173, %23) : (i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.shl"(%174, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.add"(%175, %173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.getelementptr"(%9, %176) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %178 = "llvm.insertelement"(%8, %145, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %179 = "llvm.extractelement"(%178, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %180 = "llvm.bitcast"(%179) : (f32) -> i32 loc(#loc9)
    %181 = "llvm.insertelement"(%6, %180, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %182 = "llvm.inline_asm"(%177, %181, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %183 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.lshr"(%183, %23) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.shl"(%184, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %186 = "llvm.add"(%185, %183) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.getelementptr"(%9, %186) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %188 = "llvm.insertelement"(%8, %146, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %189 = "llvm.extractelement"(%188, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %190 = "llvm.bitcast"(%189) : (f32) -> i32 loc(#loc9)
    %191 = "llvm.insertelement"(%6, %190, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %192 = "llvm.inline_asm"(%187, %191, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %193 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc9)
    %194 = "llvm.lshr"(%193, %23) : (i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.shl"(%194, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.add"(%195, %193) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.getelementptr"(%9, %196) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %198 = "llvm.insertelement"(%8, %147, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %199 = "llvm.extractelement"(%198, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %200 = "llvm.bitcast"(%199) : (f32) -> i32 loc(#loc9)
    %201 = "llvm.insertelement"(%6, %200, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %202 = "llvm.inline_asm"(%197, %201, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %203 = "llvm.xor"(%163, %23) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.lshr"(%203, %23) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.shl"(%204, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %206 = "llvm.add"(%205, %203) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.getelementptr"(%9, %206) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %208 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %210 = "llvm.extractelement"(%209, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %211 = "llvm.bitcast"(%210) : (i32) -> f32 loc(#loc9)
    %212 = "llvm.insertelement"(%8, %211, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %213 = "llvm.extractelement"(%212, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %214 = "llvm.xor"(%163, %18) : (i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.lshr"(%214, %23) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.shl"(%215, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.add"(%216, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %218 = "llvm.getelementptr"(%9, %217) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %219 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %220 = "llvm.insertelement"(%6, %219, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %222 = "llvm.bitcast"(%221) : (i32) -> f32 loc(#loc9)
    %223 = "llvm.insertelement"(%8, %222, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %224 = "llvm.extractelement"(%223, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %225 = "llvm.xor"(%163, %17) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.lshr"(%225, %23) : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.shl"(%226, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.add"(%227, %225) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %229 = "llvm.getelementptr"(%9, %228) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %230 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %231 = "llvm.insertelement"(%6, %230, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %233 = "llvm.bitcast"(%232) : (i32) -> f32 loc(#loc9)
    %234 = "llvm.insertelement"(%8, %233, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %235 = "llvm.extractelement"(%234, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %236 = "llvm.xor"(%163, %5) : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.lshr"(%236, %23) : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.shl"(%237, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %239 = "llvm.add"(%238, %236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %240 = "llvm.getelementptr"(%9, %239) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %241 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %244 = "llvm.bitcast"(%243) : (i32) -> f32 loc(#loc9)
    %245 = "llvm.insertelement"(%8, %244, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %246 = "llvm.extractelement"(%245, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %247 = "llvm.xor"(%163, %16) : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.lshr"(%247, %23) : (i32, i32) -> i32 loc(#loc9)
    %249 = "llvm.shl"(%248, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %250 = "llvm.add"(%249, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %251 = "llvm.getelementptr"(%9, %250) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %252 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %253 = "llvm.insertelement"(%6, %252, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %255 = "llvm.bitcast"(%254) : (i32) -> f32 loc(#loc9)
    %256 = "llvm.insertelement"(%8, %255, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %257 = "llvm.extractelement"(%256, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %258 = "llvm.xor"(%163, %4) : (i32, i32) -> i32 loc(#loc9)
    %259 = "llvm.lshr"(%258, %23) : (i32, i32) -> i32 loc(#loc9)
    %260 = "llvm.shl"(%259, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %261 = "llvm.add"(%260, %258) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %262 = "llvm.getelementptr"(%9, %261) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %263 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %264 = "llvm.insertelement"(%6, %263, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %266 = "llvm.bitcast"(%265) : (i32) -> f32 loc(#loc9)
    %267 = "llvm.insertelement"(%8, %266, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %269 = "llvm.xor"(%163, %13) : (i32, i32) -> i32 loc(#loc9)
    %270 = "llvm.lshr"(%269, %23) : (i32, i32) -> i32 loc(#loc9)
    %271 = "llvm.shl"(%270, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %272 = "llvm.add"(%271, %269) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %273 = "llvm.getelementptr"(%9, %272) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %274 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %275 = "llvm.insertelement"(%6, %274, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %277 = "llvm.bitcast"(%276) : (i32) -> f32 loc(#loc9)
    %278 = "llvm.insertelement"(%8, %277, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %280 = "llvm.xor"(%163, %3) : (i32, i32) -> i32 loc(#loc9)
    %281 = "llvm.lshr"(%280, %23) : (i32, i32) -> i32 loc(#loc9)
    %282 = "llvm.shl"(%281, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %283 = "llvm.add"(%282, %280) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %284 = "llvm.getelementptr"(%9, %283) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %285 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %286 = "llvm.insertelement"(%6, %285, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %288 = "llvm.bitcast"(%287) : (i32) -> f32 loc(#loc9)
    %289 = "llvm.insertelement"(%8, %288, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %291 = "llvm.insertelement"(%8, %148, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %292 = "llvm.extractelement"(%291, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %293 = "llvm.bitcast"(%292) : (f32) -> i32 loc(#loc9)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %295 = "llvm.inline_asm"(%167, %294, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %296 = "llvm.insertelement"(%8, %149, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %297 = "llvm.extractelement"(%296, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %298 = "llvm.bitcast"(%297) : (f32) -> i32 loc(#loc9)
    %299 = "llvm.insertelement"(%6, %298, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %300 = "llvm.inline_asm"(%177, %299, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %301 = "llvm.insertelement"(%8, %150, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %302 = "llvm.extractelement"(%301, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %303 = "llvm.bitcast"(%302) : (f32) -> i32 loc(#loc9)
    %304 = "llvm.insertelement"(%6, %303, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %305 = "llvm.inline_asm"(%187, %304, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %306 = "llvm.insertelement"(%8, %151, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.bitcast"(%307) : (f32) -> i32 loc(#loc9)
    %309 = "llvm.insertelement"(%6, %308, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %310 = "llvm.inline_asm"(%197, %309, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %311 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %313 = "llvm.extractelement"(%312, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %314 = "llvm.bitcast"(%313) : (i32) -> f32 loc(#loc9)
    %315 = "llvm.insertelement"(%8, %314, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %316 = "llvm.extractelement"(%315, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %317 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %318 = "llvm.insertelement"(%6, %317, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %319 = "llvm.extractelement"(%318, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %320 = "llvm.bitcast"(%319) : (i32) -> f32 loc(#loc9)
    %321 = "llvm.insertelement"(%8, %320, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %322 = "llvm.extractelement"(%321, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %323 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %324 = "llvm.insertelement"(%6, %323, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %325 = "llvm.extractelement"(%324, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %326 = "llvm.bitcast"(%325) : (i32) -> f32 loc(#loc9)
    %327 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %328 = "llvm.extractelement"(%327, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %329 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %330 = "llvm.insertelement"(%6, %329, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %331 = "llvm.extractelement"(%330, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %332 = "llvm.bitcast"(%331) : (i32) -> f32 loc(#loc9)
    %333 = "llvm.insertelement"(%8, %332, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %335 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %342 = "llvm.insertelement"(%6, %341, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %343 = "llvm.extractelement"(%342, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %344 = "llvm.bitcast"(%343) : (i32) -> f32 loc(#loc9)
    %345 = "llvm.insertelement"(%8, %344, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %346 = "llvm.extractelement"(%345, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %347 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %348 = "llvm.insertelement"(%6, %347, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %349 = "llvm.extractelement"(%348, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %350 = "llvm.bitcast"(%349) : (i32) -> f32 loc(#loc9)
    %351 = "llvm.insertelement"(%8, %350, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %352 = "llvm.extractelement"(%351, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %353 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %354 = "llvm.insertelement"(%6, %353, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %355 = "llvm.extractelement"(%354, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %356 = "llvm.bitcast"(%355) : (i32) -> f32 loc(#loc9)
    %357 = "llvm.insertelement"(%8, %356, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %360 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %365 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %366 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %367 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.icmp"(%359, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %369 = "llvm.icmp"(%360, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %370 = "llvm.icmp"(%361, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %371 = "llvm.icmp"(%362, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %372 = "llvm.icmp"(%363, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %373 = "llvm.icmp"(%364, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %374 = "llvm.icmp"(%365, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %375 = "llvm.icmp"(%366, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %376 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %377 = "llvm.xor"(%23, %376) : (i32, i32) -> i32 loc(#loc13)
    %378 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %379 = "llvm.xor"(%377, %378) : (i32, i32) -> i32 loc(#loc13)
    %380 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %381 = "llvm.xor"(%379, %380) : (i32, i32) -> i32 loc(#loc13)
    %382 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %383 = "llvm.xor"(%381, %382) : (i32, i32) -> i32 loc(#loc13)
    %384 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %385 = "llvm.xor"(%383, %384) : (i32, i32) -> i32 loc(#loc13)
    %386 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc13)
    %388 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc13)
    %390 = "llvm.xor"(%389, %23) : (i32, i32) -> i32 loc(#loc13)
    %391 = "llvm.lshr"(%390, %22) : (i32, i32) -> i32 loc(#loc13)
    %392 = "llvm.shl"(%391, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %395 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %396 = "llvm.insertelement"(%395, %359, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %397 = "llvm.extractelement"(%396, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %398 = "llvm.extractelement"(%396, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %399 = "llvm.inline_asm"(%394, %397, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %400 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc13)
    %401 = "llvm.shl"(%400, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %402 = "llvm.add"(%401, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %403 = "llvm.getelementptr"(%9, %402) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %404 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %405 = "llvm.insertelement"(%6, %404, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %406 = "llvm.extractelement"(%405, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %407 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc13)
    %408 = "llvm.shl"(%407, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %409 = "llvm.add"(%408, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %410 = "llvm.getelementptr"(%9, %409) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %411 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %412 = "llvm.insertelement"(%6, %411, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %414 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %415 = "llvm.insertelement"(%414, %360, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %416 = "llvm.extractelement"(%415, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %417 = "llvm.extractelement"(%415, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %418 = "llvm.inline_asm"(%394, %416, %417, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %419 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %422 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %423 = "llvm.insertelement"(%6, %422, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %425 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %426 = "llvm.insertelement"(%425, %361, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %427 = "llvm.extractelement"(%426, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %428 = "llvm.extractelement"(%426, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %429 = "llvm.inline_asm"(%394, %427, %428, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %430 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %433 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %434 = "llvm.insertelement"(%6, %433, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %436 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %437 = "llvm.insertelement"(%436, %362, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %438 = "llvm.extractelement"(%437, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %439 = "llvm.extractelement"(%437, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %440 = "llvm.inline_asm"(%394, %438, %439, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %441 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %444 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %445 = "llvm.insertelement"(%6, %444, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %447 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %448 = "llvm.insertelement"(%447, %363, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %449 = "llvm.extractelement"(%448, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %450 = "llvm.extractelement"(%448, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %451 = "llvm.inline_asm"(%394, %449, %450, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %452 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %455 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %456 = "llvm.insertelement"(%6, %455, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %458 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %459 = "llvm.insertelement"(%458, %364, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %460 = "llvm.extractelement"(%459, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %461 = "llvm.extractelement"(%459, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %462 = "llvm.inline_asm"(%394, %460, %461, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %463 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %466 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %467 = "llvm.insertelement"(%6, %466, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %469 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %470 = "llvm.insertelement"(%469, %365, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %471 = "llvm.extractelement"(%470, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %472 = "llvm.extractelement"(%470, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %473 = "llvm.inline_asm"(%394, %471, %472, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %474 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %477 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %478 = "llvm.insertelement"(%6, %477, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %480 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %481 = "llvm.insertelement"(%480, %366, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %482 = "llvm.extractelement"(%481, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %483 = "llvm.extractelement"(%481, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %484 = "llvm.inline_asm"(%394, %482, %483, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %485 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %488 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %489 = "llvm.insertelement"(%6, %488, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %490 = "llvm.extractelement"(%489, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %491 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc14)
    %492 = "llvm.zext"(%368) : (i1) -> i8 loc(#loc14)
    %493 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc14)
    %494 = "llvm.zext"(%369) : (i1) -> i8 loc(#loc14)
    %495 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc14)
    %496 = "llvm.zext"(%370) : (i1) -> i8 loc(#loc14)
    %497 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc14)
    %498 = "llvm.zext"(%371) : (i1) -> i8 loc(#loc14)
    %499 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc14)
    %500 = "llvm.zext"(%372) : (i1) -> i8 loc(#loc14)
    %501 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc14)
    %502 = "llvm.zext"(%373) : (i1) -> i8 loc(#loc14)
    %503 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc14)
    %504 = "llvm.zext"(%374) : (i1) -> i8 loc(#loc14)
    %505 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc14)
    %506 = "llvm.zext"(%375) : (i1) -> i8 loc(#loc14)
    %507 = "llvm.getelementptr"(%9, %393) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %508 = "llvm.insertelement"(%1, %491, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %509 = "llvm.insertelement"(%508, %492, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %510 = "llvm.extractelement"(%509, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %511 = "llvm.extractelement"(%509, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %512 = "llvm.inline_asm"(%507, %510, %511, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %513 = "llvm.getelementptr"(%9, %402) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %514 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %515 = "llvm.insertelement"(%0, %514, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %516 = "llvm.extractelement"(%515, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %517 = "llvm.getelementptr"(%9, %409) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %518 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %519 = "llvm.insertelement"(%0, %518, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %520 = "llvm.extractelement"(%519, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %521 = "llvm.insertelement"(%1, %493, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %522 = "llvm.insertelement"(%521, %494, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %523 = "llvm.extractelement"(%522, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %524 = "llvm.extractelement"(%522, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %525 = "llvm.inline_asm"(%507, %523, %524, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %526 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %529 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %530 = "llvm.insertelement"(%0, %529, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %531 = "llvm.extractelement"(%530, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %532 = "llvm.insertelement"(%1, %495, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %533 = "llvm.insertelement"(%532, %496, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %534 = "llvm.extractelement"(%533, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %535 = "llvm.extractelement"(%533, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %536 = "llvm.inline_asm"(%507, %534, %535, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %537 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %540 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %541 = "llvm.insertelement"(%0, %540, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %542 = "llvm.extractelement"(%541, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %543 = "llvm.insertelement"(%1, %497, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %544 = "llvm.insertelement"(%543, %498, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %545 = "llvm.extractelement"(%544, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %546 = "llvm.extractelement"(%544, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %547 = "llvm.inline_asm"(%507, %545, %546, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %548 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %551 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %552 = "llvm.insertelement"(%0, %551, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %553 = "llvm.extractelement"(%552, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %554 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %555 = "llvm.insertelement"(%554, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %556 = "llvm.extractelement"(%555, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %557 = "llvm.extractelement"(%555, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %558 = "llvm.inline_asm"(%507, %556, %557, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %559 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %562 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %563 = "llvm.insertelement"(%0, %562, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %564 = "llvm.extractelement"(%563, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %565 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %566 = "llvm.insertelement"(%565, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %567 = "llvm.extractelement"(%566, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %568 = "llvm.extractelement"(%566, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %569 = "llvm.inline_asm"(%507, %567, %568, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %570 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %573 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %574 = "llvm.insertelement"(%0, %573, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %575 = "llvm.extractelement"(%574, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %576 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %577 = "llvm.insertelement"(%576, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %578 = "llvm.extractelement"(%577, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %579 = "llvm.extractelement"(%577, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %580 = "llvm.inline_asm"(%507, %578, %579, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %581 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %584 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %585 = "llvm.insertelement"(%0, %584, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %586 = "llvm.extractelement"(%585, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %587 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %588 = "llvm.insertelement"(%587, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %591 = "llvm.inline_asm"(%507, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %592 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %595 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %596 = "llvm.insertelement"(%0, %595, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %598 = "llvm.trunc"(%516) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %599 = "llvm.trunc"(%520) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %600 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %601 = "llvm.trunc"(%531) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %602 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %603 = "llvm.trunc"(%542) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %604 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %605 = "llvm.trunc"(%553) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %606 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %607 = "llvm.trunc"(%564) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %608 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %609 = "llvm.trunc"(%575) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %610 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %611 = "llvm.trunc"(%586) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %612 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %613 = "llvm.trunc"(%597) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %614 = "llvm.getelementptr"(%arg1, %406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %615 = "llvm.getelementptr"(%arg1, %413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %616 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %617 = "llvm.getelementptr"(%arg1, %424) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %618 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %619 = "llvm.getelementptr"(%arg1, %435) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %620 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %621 = "llvm.getelementptr"(%arg1, %446) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %623 = "llvm.getelementptr"(%arg1, %457) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %624 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %625 = "llvm.getelementptr"(%arg1, %468) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %626 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %627 = "llvm.getelementptr"(%arg1, %479) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %628 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %629 = "llvm.getelementptr"(%arg1, %490) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %630 = "llvm.insertelement"(%8, %213, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %631 = "llvm.bitcast"(%630) : (vector<1xf32>) -> i32 loc(#loc16)
    %632 = "llvm.inline_asm"(%631, %614, %598) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %633 = "llvm.insertelement"(%8, %224, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %634 = "llvm.bitcast"(%633) : (vector<1xf32>) -> i32 loc(#loc16)
    %635 = "llvm.inline_asm"(%634, %615, %599) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %636 = "llvm.insertelement"(%8, %235, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %637 = "llvm.bitcast"(%636) : (vector<1xf32>) -> i32 loc(#loc16)
    %638 = "llvm.inline_asm"(%637, %616, %600) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %639 = "llvm.insertelement"(%8, %246, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %640 = "llvm.bitcast"(%639) : (vector<1xf32>) -> i32 loc(#loc16)
    %641 = "llvm.inline_asm"(%640, %617, %601) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %642 = "llvm.insertelement"(%8, %257, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %643 = "llvm.bitcast"(%642) : (vector<1xf32>) -> i32 loc(#loc16)
    %644 = "llvm.inline_asm"(%643, %618, %602) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %645 = "llvm.insertelement"(%8, %268, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %646 = "llvm.bitcast"(%645) : (vector<1xf32>) -> i32 loc(#loc16)
    %647 = "llvm.inline_asm"(%646, %619, %603) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %648 = "llvm.insertelement"(%8, %279, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %649 = "llvm.bitcast"(%648) : (vector<1xf32>) -> i32 loc(#loc16)
    %650 = "llvm.inline_asm"(%649, %620, %604) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %651 = "llvm.insertelement"(%8, %290, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %652 = "llvm.bitcast"(%651) : (vector<1xf32>) -> i32 loc(#loc16)
    %653 = "llvm.inline_asm"(%652, %621, %605) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %654 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %655 = "llvm.bitcast"(%654) : (vector<1xf32>) -> i32 loc(#loc16)
    %656 = "llvm.inline_asm"(%655, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %657 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %658 = "llvm.bitcast"(%657) : (vector<1xf32>) -> i32 loc(#loc16)
    %659 = "llvm.inline_asm"(%658, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %660 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %661 = "llvm.bitcast"(%660) : (vector<1xf32>) -> i32 loc(#loc16)
    %662 = "llvm.inline_asm"(%661, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %663 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %664 = "llvm.bitcast"(%663) : (vector<1xf32>) -> i32 loc(#loc16)
    %665 = "llvm.inline_asm"(%664, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %666 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %667 = "llvm.bitcast"(%666) : (vector<1xf32>) -> i32 loc(#loc16)
    %668 = "llvm.inline_asm"(%667, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %669 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %670 = "llvm.bitcast"(%669) : (vector<1xf32>) -> i32 loc(#loc16)
    %671 = "llvm.inline_asm"(%670, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %672 = "llvm.insertelement"(%8, %352, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %673 = "llvm.bitcast"(%672) : (vector<1xf32>) -> i32 loc(#loc16)
    %674 = "llvm.inline_asm"(%673, %628, %612) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %675 = "llvm.insertelement"(%8, %358, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %676 = "llvm.bitcast"(%675) : (vector<1xf32>) -> i32 loc(#loc16)
    %677 = "llvm.inline_asm"(%676, %629, %613) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    "llvm.return"() : () -> () loc(#loc17)
  }) {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} : () -> () loc(#loc)
}) {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "cuda:89", "ttg.threads-per-warp" = 32 : i32} : () -> () loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/ipykernel_14131/1971912224.py":3:24)
#loc3 = loc("/tmp/ipykernel_14131/1971912224.py":4:24)
#loc4 = loc("/tmp/ipykernel_14131/1971912224.py":5:41)
#loc5 = loc("/tmp/ipykernel_14131/1971912224.py":5:28)
#loc6 = loc("/tmp/ipykernel_14131/1971912224.py":6:21)
#loc7 = loc("/tmp/ipykernel_14131/1971912224.py":8:24)
#loc8 = loc("/tmp/ipykernel_14131/1971912224.py":8:16)
#loc9 = loc("/tmp/ipykernel_14131/1971912224.py":10:21)
#loc10 = loc("/tmp/ipykernel_14131/1971912224.py":13:62)
#loc11 = loc("/tmp/ipykernel_14131/1971912224.py":15:53)
#loc12 = loc("/tmp/ipykernel_14131/1971912224.py":15:40)
#loc13 = loc("/tmp/ipykernel_14131/1971912224.py":17:35)
#loc14 = loc("/tmp/ipykernel_14131/1971912224.py":18:32)
#loc15 = loc("/tmp/ipykernel_14131/1971912224.py":20:26)
#loc16 = loc("/tmp/ipykernel_14131/1971912224.py":20:47)
#loc17 = loc("/tmp/ipykernel_14131/1971912224.py":20:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/tmp/ipykernel_14131/1971912224.py":2:0)
"builtin.module"() ({
  "llvm.mlir.global"() <{addr_space = 3 : i32, alignment = 16 : i64, global_type = !llvm.array<0 x i8>, linkage = #llvm.linkage<external>, sym_name = "global_smem", visibility_ = 0 : i64}> ({
  }) : () -> () loc(#loc)
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, arg_attrs = [{tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {tt.divisibility = 16 : i32}, {}], function_type = !llvm.func<void (ptr<1>, ptr<1>, i32, ptr<1>)>, linkage = #llvm.linkage<external>, sym_name = "scalar_mult_duplicate", visibility_ = 0 : i64}> ({
  ^bb0(%arg0: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg1: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg2: i32 loc("/tmp/ipykernel_14131/1971912224.py":2:0), %arg3: !llvm.ptr<1> loc("/tmp/ipykernel_14131/1971912224.py":2:0)):
    %0 = "llvm.mlir.undef"() : () -> vector<1xi8> loc(#loc1)
    %1 = "llvm.mlir.undef"() : () -> vector<2xi8> loc(#loc1)
    %2 = "llvm.mlir.undef"() : () -> vector<2xi32> loc(#loc1)
    %3 = "llvm.mlir.constant"() <{value = 448 : i32}> : () -> i32 loc(#loc1)
    %4 = "llvm.mlir.constant"() <{value = 320 : i32}> : () -> i32 loc(#loc1)
    %5 = "llvm.mlir.constant"() <{value = 192 : i32}> : () -> i32 loc(#loc1)
    %6 = "llvm.mlir.undef"() : () -> vector<1xi32> loc(#loc1)
    %7 = "llvm.mlir.constant"() <{value = true}> : () -> i1 loc(#loc1)
    %8 = "llvm.mlir.undef"() : () -> vector<1xf32> loc(#loc1)
    %9 = "llvm.mlir.addressof"() <{global_name = @global_smem}> : () -> !llvm.ptr<3> loc(#loc1)
    %10 = "llvm.mlir.constant"() <{value = 896 : i32}> : () -> i32 loc(#loc1)
    %11 = "llvm.mlir.constant"() <{value = 768 : i32}> : () -> i32 loc(#loc1)
    %12 = "llvm.mlir.constant"() <{value = 640 : i32}> : () -> i32 loc(#loc1)
    %13 = "llvm.mlir.constant"() <{value = 384 : i32}> : () -> i32 loc(#loc1)
    %14 = "llvm.mlir.constant"() <{value = 512 : i32}> : () -> i32 loc(#loc1)
    %15 = "llvm.mlir.constant"() <{value = 3 : i32}> : () -> i32 loc(#loc1)
    %16 = "llvm.mlir.constant"() <{value = 256 : i32}> : () -> i32 loc(#loc1)
    %17 = "llvm.mlir.constant"() <{value = 128 : i32}> : () -> i32 loc(#loc1)
    %18 = "llvm.mlir.constant"() <{value = 64 : i32}> : () -> i32 loc(#loc1)
    %19 = "llvm.mlir.constant"() <{value = 16 : i32}> : () -> i32 loc(#loc1)
    %20 = "llvm.mlir.constant"() <{value = 8 : i32}> : () -> i32 loc(#loc1)
    %21 = "llvm.mlir.constant"() <{value = 4 : i32}> : () -> i32 loc(#loc1)
    %22 = "llvm.mlir.constant"() <{value = 1 : i32}> : () -> i32 loc(#loc1)
    %23 = "llvm.mlir.constant"() <{value = 0 : i32}> : () -> i32 loc(#loc1)
    %24 = "llvm.mlir.constant"() <{value = 32 : i32}> : () -> i32 loc(#loc1)
    %25 = "llvm.mlir.constant"() <{value = 0 : index}> : () -> i32 loc(#loc1)
    %26 = "llvm.mlir.constant"() <{value = 1024 : i32}> : () -> i32 loc(#loc1)
    %27 = "llvm.mlir.constant"() <{value = 2 : i32}> : () -> i32 loc(#loc1)
    %28 = "llvm.mlir.constant"() <{value = 4.000000e+00 : f32}> : () -> f32 loc(#loc1)
    %29 = "llvm.inline_asm"() <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, %ctaid.x;", constraints = "=r", operand_attrs = []}> : () -> i32 loc(#loc2)
    %30 = "llvm.mul"(%29, %26) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc3)
    %31 = "nvvm.read.ptx.sreg.tid.x"() : () -> i32 loc(#loc4)
    %32 = "llvm.urem"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %33 = "llvm.udiv"(%31, %24) : (i32, i32) -> i32 loc(#loc4)
    %34 = "llvm.and"(%32, %22) : (i32, i32) -> i32 loc(#loc4)
    %35 = "llvm.icmp"(%34, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %36 = "llvm.select"(%35, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %37 = "llvm.xor"(%23, %36) : (i32, i32) -> i32 loc(#loc4)
    %38 = "llvm.and"(%32, %27) : (i32, i32) -> i32 loc(#loc4)
    %39 = "llvm.icmp"(%38, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %40 = "llvm.select"(%39, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %41 = "llvm.xor"(%37, %40) : (i32, i32) -> i32 loc(#loc4)
    %42 = "llvm.and"(%32, %21) : (i32, i32) -> i32 loc(#loc4)
    %43 = "llvm.icmp"(%42, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %44 = "llvm.select"(%43, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %45 = "llvm.xor"(%41, %44) : (i32, i32) -> i32 loc(#loc4)
    %46 = "llvm.and"(%32, %20) : (i32, i32) -> i32 loc(#loc4)
    %47 = "llvm.icmp"(%46, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %48 = "llvm.select"(%47, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %49 = "llvm.xor"(%45, %48) : (i32, i32) -> i32 loc(#loc4)
    %50 = "llvm.and"(%32, %19) : (i32, i32) -> i32 loc(#loc4)
    %51 = "llvm.icmp"(%50, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %52 = "llvm.select"(%51, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %53 = "llvm.xor"(%49, %52) : (i32, i32) -> i32 loc(#loc4)
    %54 = "llvm.and"(%33, %22) : (i32, i32) -> i32 loc(#loc4)
    %55 = "llvm.icmp"(%54, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %56 = "llvm.select"(%55, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %57 = "llvm.xor"(%53, %56) : (i32, i32) -> i32 loc(#loc4)
    %58 = "llvm.and"(%33, %27) : (i32, i32) -> i32 loc(#loc4)
    %59 = "llvm.icmp"(%58, %23) <{predicate = 0 : i64}> : (i32, i32) -> i1 loc(#loc4)
    %60 = "llvm.select"(%59, %23, %16) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %61 = "llvm.xor"(%57, %60) : (i32, i32) -> i32 loc(#loc4)
    %62 = "llvm.xor"(%61, %23) : (i32, i32) -> i32 loc(#loc4)
    %63 = "llvm.xor"(%61, %14) : (i32, i32) -> i32 loc(#loc4)
    %64 = "llvm.add"(%62, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %65 = "llvm.add"(%63, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %66 = "llvm.select"(%35, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %67 = "llvm.xor"(%23, %66) : (i32, i32) -> i32 loc(#loc4)
    %68 = "llvm.select"(%39, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %69 = "llvm.xor"(%67, %68) : (i32, i32) -> i32 loc(#loc4)
    %70 = "llvm.select"(%43, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %71 = "llvm.xor"(%69, %70) : (i32, i32) -> i32 loc(#loc4)
    %72 = "llvm.select"(%47, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %73 = "llvm.xor"(%71, %72) : (i32, i32) -> i32 loc(#loc4)
    %74 = "llvm.select"(%51, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %75 = "llvm.xor"(%73, %74) : (i32, i32) -> i32 loc(#loc4)
    %76 = "llvm.select"(%55, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %77 = "llvm.xor"(%75, %76) : (i32, i32) -> i32 loc(#loc4)
    %78 = "llvm.select"(%59, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc4)
    %79 = "llvm.xor"(%77, %78) : (i32, i32) -> i32 loc(#loc4)
    %80 = "llvm.xor"(%79, %23) : (i32, i32) -> i32 loc(#loc4)
    %81 = "llvm.xor"(%79, %17) : (i32, i32) -> i32 loc(#loc4)
    %82 = "llvm.xor"(%79, %16) : (i32, i32) -> i32 loc(#loc4)
    %83 = "llvm.xor"(%79, %13) : (i32, i32) -> i32 loc(#loc4)
    %84 = "llvm.xor"(%79, %14) : (i32, i32) -> i32 loc(#loc4)
    %85 = "llvm.xor"(%79, %12) : (i32, i32) -> i32 loc(#loc4)
    %86 = "llvm.xor"(%79, %11) : (i32, i32) -> i32 loc(#loc4)
    %87 = "llvm.xor"(%79, %10) : (i32, i32) -> i32 loc(#loc4)
    %88 = "llvm.add"(%80, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %89 = "llvm.add"(%81, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %90 = "llvm.add"(%82, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %91 = "llvm.add"(%83, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %92 = "llvm.add"(%84, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %93 = "llvm.add"(%85, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %94 = "llvm.add"(%86, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %95 = "llvm.add"(%87, %25) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc4)
    %96 = "llvm.add"(%30, %64) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %97 = "llvm.add"(%30, %65) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %98 = "llvm.add"(%30, %88) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %99 = "llvm.add"(%30, %89) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %100 = "llvm.add"(%30, %90) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %101 = "llvm.add"(%30, %91) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %102 = "llvm.add"(%30, %92) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %103 = "llvm.add"(%30, %93) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %104 = "llvm.add"(%30, %94) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %105 = "llvm.add"(%30, %95) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc5)
    %106 = "llvm.icmp"(%96, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %107 = "llvm.icmp"(%97, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %108 = "llvm.icmp"(%98, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %109 = "llvm.icmp"(%99, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %110 = "llvm.icmp"(%100, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %111 = "llvm.icmp"(%101, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %112 = "llvm.icmp"(%102, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %113 = "llvm.icmp"(%103, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %114 = "llvm.icmp"(%104, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %115 = "llvm.icmp"(%105, %arg2) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc6)
    %116 = "llvm.getelementptr"(%arg0, %96) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %117 = "llvm.getelementptr"(%arg0, %97) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc7)
    %118 = "llvm.inline_asm"(%116, %106) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %119 = "llvm.extractvalue"(%118) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %120 = "llvm.bitcast"(%119) : (i32) -> vector<1xf32> loc(#loc8)
    %121 = "llvm.extractvalue"(%118) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %122 = "llvm.bitcast"(%121) : (i32) -> vector<1xf32> loc(#loc8)
    %123 = "llvm.extractvalue"(%118) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %124 = "llvm.bitcast"(%123) : (i32) -> vector<1xf32> loc(#loc8)
    %125 = "llvm.extractvalue"(%118) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %126 = "llvm.bitcast"(%125) : (i32) -> vector<1xf32> loc(#loc8)
    %127 = "llvm.extractelement"(%120, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %128 = "llvm.extractelement"(%122, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %129 = "llvm.extractelement"(%124, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %130 = "llvm.extractelement"(%126, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %131 = "llvm.inline_asm"(%117, %107) <{asm_dialect = 0 : i64, asm_string = "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", constraints = "=r,=r,=r,=r,l,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %132 = "llvm.extractvalue"(%131) <{position = array<i64: 0>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %133 = "llvm.bitcast"(%132) : (i32) -> vector<1xf32> loc(#loc8)
    %134 = "llvm.extractvalue"(%131) <{position = array<i64: 1>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %135 = "llvm.bitcast"(%134) : (i32) -> vector<1xf32> loc(#loc8)
    %136 = "llvm.extractvalue"(%131) <{position = array<i64: 2>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %137 = "llvm.bitcast"(%136) : (i32) -> vector<1xf32> loc(#loc8)
    %138 = "llvm.extractvalue"(%131) <{position = array<i64: 3>}> : (!llvm.struct<(i32, i32, i32, i32)>) -> i32 loc(#loc8)
    %139 = "llvm.bitcast"(%138) : (i32) -> vector<1xf32> loc(#loc8)
    %140 = "llvm.extractelement"(%133, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %141 = "llvm.extractelement"(%135, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %142 = "llvm.extractelement"(%137, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %143 = "llvm.extractelement"(%139, %25) : (vector<1xf32>, i32) -> f32 loc(#loc8)
    %144 = "llvm.fmul"(%127, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %145 = "llvm.fmul"(%128, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %146 = "llvm.fmul"(%129, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %147 = "llvm.fmul"(%130, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %148 = "llvm.fmul"(%140, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %149 = "llvm.fmul"(%141, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %150 = "llvm.fmul"(%142, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %151 = "llvm.fmul"(%143, %28) <{fastmathFlags = #llvm.fastmath<none>}> : (f32, f32) -> f32 loc(#loc9)
    %152 = "llvm.select"(%39, %23, %22) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %153 = "llvm.xor"(%23, %152) : (i32, i32) -> i32 loc(#loc9)
    %154 = "llvm.select"(%43, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %155 = "llvm.xor"(%153, %154) : (i32, i32) -> i32 loc(#loc9)
    %156 = "llvm.select"(%47, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %157 = "llvm.xor"(%155, %156) : (i32, i32) -> i32 loc(#loc9)
    %158 = "llvm.select"(%51, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %159 = "llvm.xor"(%157, %158) : (i32, i32) -> i32 loc(#loc9)
    %160 = "llvm.select"(%55, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %161 = "llvm.xor"(%159, %160) : (i32, i32) -> i32 loc(#loc9)
    %162 = "llvm.select"(%59, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc9)
    %163 = "llvm.xor"(%161, %162) : (i32, i32) -> i32 loc(#loc9)
    %164 = "llvm.lshr"(%62, %23) : (i32, i32) -> i32 loc(#loc9)
    %165 = "llvm.shl"(%164, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %166 = "llvm.add"(%165, %62) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %167 = "llvm.getelementptr"(%9, %166) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %168 = "llvm.insertelement"(%8, %144, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %169 = "llvm.extractelement"(%168, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %170 = "llvm.bitcast"(%169) : (f32) -> i32 loc(#loc9)
    %171 = "llvm.insertelement"(%6, %170, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %172 = "llvm.inline_asm"(%167, %171, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %173 = "llvm.xor"(%61, %22) : (i32, i32) -> i32 loc(#loc9)
    %174 = "llvm.lshr"(%173, %23) : (i32, i32) -> i32 loc(#loc9)
    %175 = "llvm.shl"(%174, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %176 = "llvm.add"(%175, %173) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %177 = "llvm.getelementptr"(%9, %176) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %178 = "llvm.insertelement"(%8, %145, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %179 = "llvm.extractelement"(%178, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %180 = "llvm.bitcast"(%179) : (f32) -> i32 loc(#loc9)
    %181 = "llvm.insertelement"(%6, %180, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %182 = "llvm.inline_asm"(%177, %181, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %183 = "llvm.xor"(%61, %27) : (i32, i32) -> i32 loc(#loc9)
    %184 = "llvm.lshr"(%183, %23) : (i32, i32) -> i32 loc(#loc9)
    %185 = "llvm.shl"(%184, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %186 = "llvm.add"(%185, %183) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %187 = "llvm.getelementptr"(%9, %186) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %188 = "llvm.insertelement"(%8, %146, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %189 = "llvm.extractelement"(%188, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %190 = "llvm.bitcast"(%189) : (f32) -> i32 loc(#loc9)
    %191 = "llvm.insertelement"(%6, %190, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %192 = "llvm.inline_asm"(%187, %191, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %193 = "llvm.xor"(%61, %15) : (i32, i32) -> i32 loc(#loc9)
    %194 = "llvm.lshr"(%193, %23) : (i32, i32) -> i32 loc(#loc9)
    %195 = "llvm.shl"(%194, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %196 = "llvm.add"(%195, %193) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %197 = "llvm.getelementptr"(%9, %196) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %198 = "llvm.insertelement"(%8, %147, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %199 = "llvm.extractelement"(%198, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %200 = "llvm.bitcast"(%199) : (f32) -> i32 loc(#loc9)
    %201 = "llvm.insertelement"(%6, %200, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %202 = "llvm.inline_asm"(%197, %201, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %203 = "llvm.xor"(%163, %23) : (i32, i32) -> i32 loc(#loc9)
    %204 = "llvm.lshr"(%203, %23) : (i32, i32) -> i32 loc(#loc9)
    %205 = "llvm.shl"(%204, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %206 = "llvm.add"(%205, %203) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %207 = "llvm.getelementptr"(%9, %206) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %208 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %209 = "llvm.insertelement"(%6, %208, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %210 = "llvm.extractelement"(%209, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %211 = "llvm.bitcast"(%210) : (i32) -> f32 loc(#loc9)
    %212 = "llvm.insertelement"(%8, %211, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %213 = "llvm.extractelement"(%212, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %214 = "llvm.xor"(%163, %18) : (i32, i32) -> i32 loc(#loc9)
    %215 = "llvm.lshr"(%214, %23) : (i32, i32) -> i32 loc(#loc9)
    %216 = "llvm.shl"(%215, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %217 = "llvm.add"(%216, %214) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %218 = "llvm.getelementptr"(%9, %217) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %219 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %220 = "llvm.insertelement"(%6, %219, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %221 = "llvm.extractelement"(%220, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %222 = "llvm.bitcast"(%221) : (i32) -> f32 loc(#loc9)
    %223 = "llvm.insertelement"(%8, %222, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %224 = "llvm.extractelement"(%223, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %225 = "llvm.xor"(%163, %17) : (i32, i32) -> i32 loc(#loc9)
    %226 = "llvm.lshr"(%225, %23) : (i32, i32) -> i32 loc(#loc9)
    %227 = "llvm.shl"(%226, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %228 = "llvm.add"(%227, %225) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %229 = "llvm.getelementptr"(%9, %228) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %230 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %231 = "llvm.insertelement"(%6, %230, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %232 = "llvm.extractelement"(%231, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %233 = "llvm.bitcast"(%232) : (i32) -> f32 loc(#loc9)
    %234 = "llvm.insertelement"(%8, %233, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %235 = "llvm.extractelement"(%234, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %236 = "llvm.xor"(%163, %5) : (i32, i32) -> i32 loc(#loc9)
    %237 = "llvm.lshr"(%236, %23) : (i32, i32) -> i32 loc(#loc9)
    %238 = "llvm.shl"(%237, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %239 = "llvm.add"(%238, %236) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %240 = "llvm.getelementptr"(%9, %239) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %241 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %242 = "llvm.insertelement"(%6, %241, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %243 = "llvm.extractelement"(%242, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %244 = "llvm.bitcast"(%243) : (i32) -> f32 loc(#loc9)
    %245 = "llvm.insertelement"(%8, %244, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %246 = "llvm.extractelement"(%245, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %247 = "llvm.xor"(%163, %16) : (i32, i32) -> i32 loc(#loc9)
    %248 = "llvm.lshr"(%247, %23) : (i32, i32) -> i32 loc(#loc9)
    %249 = "llvm.shl"(%248, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %250 = "llvm.add"(%249, %247) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %251 = "llvm.getelementptr"(%9, %250) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %252 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %253 = "llvm.insertelement"(%6, %252, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %254 = "llvm.extractelement"(%253, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %255 = "llvm.bitcast"(%254) : (i32) -> f32 loc(#loc9)
    %256 = "llvm.insertelement"(%8, %255, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %257 = "llvm.extractelement"(%256, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %258 = "llvm.xor"(%163, %4) : (i32, i32) -> i32 loc(#loc9)
    %259 = "llvm.lshr"(%258, %23) : (i32, i32) -> i32 loc(#loc9)
    %260 = "llvm.shl"(%259, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %261 = "llvm.add"(%260, %258) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %262 = "llvm.getelementptr"(%9, %261) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %263 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %264 = "llvm.insertelement"(%6, %263, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %265 = "llvm.extractelement"(%264, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %266 = "llvm.bitcast"(%265) : (i32) -> f32 loc(#loc9)
    %267 = "llvm.insertelement"(%8, %266, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %268 = "llvm.extractelement"(%267, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %269 = "llvm.xor"(%163, %13) : (i32, i32) -> i32 loc(#loc9)
    %270 = "llvm.lshr"(%269, %23) : (i32, i32) -> i32 loc(#loc9)
    %271 = "llvm.shl"(%270, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %272 = "llvm.add"(%271, %269) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %273 = "llvm.getelementptr"(%9, %272) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %274 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %275 = "llvm.insertelement"(%6, %274, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %276 = "llvm.extractelement"(%275, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %277 = "llvm.bitcast"(%276) : (i32) -> f32 loc(#loc9)
    %278 = "llvm.insertelement"(%8, %277, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %279 = "llvm.extractelement"(%278, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %280 = "llvm.xor"(%163, %3) : (i32, i32) -> i32 loc(#loc9)
    %281 = "llvm.lshr"(%280, %23) : (i32, i32) -> i32 loc(#loc9)
    %282 = "llvm.shl"(%281, %23) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %283 = "llvm.add"(%282, %280) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc9)
    %284 = "llvm.getelementptr"(%9, %283) <{elem_type = f32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc9)
    %285 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %286 = "llvm.insertelement"(%6, %285, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %287 = "llvm.extractelement"(%286, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %288 = "llvm.bitcast"(%287) : (i32) -> f32 loc(#loc9)
    %289 = "llvm.insertelement"(%8, %288, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %290 = "llvm.extractelement"(%289, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %291 = "llvm.insertelement"(%8, %148, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %292 = "llvm.extractelement"(%291, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %293 = "llvm.bitcast"(%292) : (f32) -> i32 loc(#loc9)
    %294 = "llvm.insertelement"(%6, %293, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %295 = "llvm.inline_asm"(%167, %294, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %296 = "llvm.insertelement"(%8, %149, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %297 = "llvm.extractelement"(%296, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %298 = "llvm.bitcast"(%297) : (f32) -> i32 loc(#loc9)
    %299 = "llvm.insertelement"(%6, %298, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %300 = "llvm.inline_asm"(%177, %299, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %301 = "llvm.insertelement"(%8, %150, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %302 = "llvm.extractelement"(%301, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %303 = "llvm.bitcast"(%302) : (f32) -> i32 loc(#loc9)
    %304 = "llvm.insertelement"(%6, %303, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %305 = "llvm.inline_asm"(%187, %304, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    %306 = "llvm.insertelement"(%8, %151, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %307 = "llvm.extractelement"(%306, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %308 = "llvm.bitcast"(%307) : (f32) -> i32 loc(#loc9)
    %309 = "llvm.insertelement"(%6, %308, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %310 = "llvm.inline_asm"(%197, %309, %7) <{asm_dialect = 0 : i64, asm_string = "@$2 st.shared.b32 [ $0 + 0 ], $1;", constraints = "r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void loc(#loc9)
    "nvvm.barrier0"() : () -> () loc(#loc9)
    %311 = "llvm.load"(%207) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %312 = "llvm.insertelement"(%6, %311, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %313 = "llvm.extractelement"(%312, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %314 = "llvm.bitcast"(%313) : (i32) -> f32 loc(#loc9)
    %315 = "llvm.insertelement"(%8, %314, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %316 = "llvm.extractelement"(%315, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %317 = "llvm.load"(%218) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %318 = "llvm.insertelement"(%6, %317, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %319 = "llvm.extractelement"(%318, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %320 = "llvm.bitcast"(%319) : (i32) -> f32 loc(#loc9)
    %321 = "llvm.insertelement"(%8, %320, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %322 = "llvm.extractelement"(%321, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %323 = "llvm.load"(%229) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %324 = "llvm.insertelement"(%6, %323, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %325 = "llvm.extractelement"(%324, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %326 = "llvm.bitcast"(%325) : (i32) -> f32 loc(#loc9)
    %327 = "llvm.insertelement"(%8, %326, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %328 = "llvm.extractelement"(%327, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %329 = "llvm.load"(%240) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %330 = "llvm.insertelement"(%6, %329, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %331 = "llvm.extractelement"(%330, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %332 = "llvm.bitcast"(%331) : (i32) -> f32 loc(#loc9)
    %333 = "llvm.insertelement"(%8, %332, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %334 = "llvm.extractelement"(%333, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %335 = "llvm.load"(%251) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %336 = "llvm.insertelement"(%6, %335, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %337 = "llvm.extractelement"(%336, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %338 = "llvm.bitcast"(%337) : (i32) -> f32 loc(#loc9)
    %339 = "llvm.insertelement"(%8, %338, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %340 = "llvm.extractelement"(%339, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %341 = "llvm.load"(%262) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %342 = "llvm.insertelement"(%6, %341, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %343 = "llvm.extractelement"(%342, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %344 = "llvm.bitcast"(%343) : (i32) -> f32 loc(#loc9)
    %345 = "llvm.insertelement"(%8, %344, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %346 = "llvm.extractelement"(%345, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %347 = "llvm.load"(%273) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %348 = "llvm.insertelement"(%6, %347, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %349 = "llvm.extractelement"(%348, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %350 = "llvm.bitcast"(%349) : (i32) -> f32 loc(#loc9)
    %351 = "llvm.insertelement"(%8, %350, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %352 = "llvm.extractelement"(%351, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %353 = "llvm.load"(%284) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc9)
    %354 = "llvm.insertelement"(%6, %353, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc9)
    %355 = "llvm.extractelement"(%354, %23) : (vector<1xi32>, i32) -> i32 loc(#loc9)
    %356 = "llvm.bitcast"(%355) : (i32) -> f32 loc(#loc9)
    %357 = "llvm.insertelement"(%8, %356, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc9)
    %358 = "llvm.extractelement"(%357, %23) : (vector<1xf32>, i32) -> f32 loc(#loc9)
    %359 = "llvm.add"(%98, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %360 = "llvm.add"(%99, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %361 = "llvm.add"(%100, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %362 = "llvm.add"(%101, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %363 = "llvm.add"(%102, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %364 = "llvm.add"(%103, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %365 = "llvm.add"(%104, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %366 = "llvm.add"(%105, %arg2) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc10)
    %367 = "llvm.mul"(%arg2, %27) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc11)
    %368 = "llvm.icmp"(%359, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %369 = "llvm.icmp"(%360, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %370 = "llvm.icmp"(%361, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %371 = "llvm.icmp"(%362, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %372 = "llvm.icmp"(%363, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %373 = "llvm.icmp"(%364, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %374 = "llvm.icmp"(%365, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    %375 = "llvm.icmp"(%366, %367) <{predicate = 2 : i64}> : (i32, i32) -> i1 loc(#loc12)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %376 = "llvm.select"(%35, %23, %27) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %377 = "llvm.xor"(%23, %376) : (i32, i32) -> i32 loc(#loc13)
    %378 = "llvm.select"(%39, %23, %21) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %379 = "llvm.xor"(%377, %378) : (i32, i32) -> i32 loc(#loc13)
    %380 = "llvm.select"(%43, %23, %20) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %381 = "llvm.xor"(%379, %380) : (i32, i32) -> i32 loc(#loc13)
    %382 = "llvm.select"(%47, %23, %19) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %383 = "llvm.xor"(%381, %382) : (i32, i32) -> i32 loc(#loc13)
    %384 = "llvm.select"(%51, %23, %24) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %385 = "llvm.xor"(%383, %384) : (i32, i32) -> i32 loc(#loc13)
    %386 = "llvm.select"(%55, %23, %18) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %387 = "llvm.xor"(%385, %386) : (i32, i32) -> i32 loc(#loc13)
    %388 = "llvm.select"(%59, %23, %17) <{fastmathFlags = #llvm.fastmath<none>}> : (i1, i32, i32) -> i32 loc(#loc13)
    %389 = "llvm.xor"(%387, %388) : (i32, i32) -> i32 loc(#loc13)
    %390 = "llvm.xor"(%389, %23) : (i32, i32) -> i32 loc(#loc13)
    %391 = "llvm.lshr"(%390, %22) : (i32, i32) -> i32 loc(#loc13)
    %392 = "llvm.shl"(%391, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %393 = "llvm.add"(%392, %390) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %394 = "llvm.getelementptr"(%9, %393) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %395 = "llvm.insertelement"(%2, %98, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %396 = "llvm.insertelement"(%395, %359, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %397 = "llvm.extractelement"(%396, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %398 = "llvm.extractelement"(%396, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %399 = "llvm.inline_asm"(%394, %397, %398, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %400 = "llvm.lshr"(%80, %22) : (i32, i32) -> i32 loc(#loc13)
    %401 = "llvm.shl"(%400, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %402 = "llvm.add"(%401, %80) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %403 = "llvm.getelementptr"(%9, %402) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %404 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %405 = "llvm.insertelement"(%6, %404, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %406 = "llvm.extractelement"(%405, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %407 = "llvm.lshr"(%81, %22) : (i32, i32) -> i32 loc(#loc13)
    %408 = "llvm.shl"(%407, %22) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %409 = "llvm.add"(%408, %81) <{overflowFlags = #llvm.overflow<none>}> : (i32, i32) -> i32 loc(#loc13)
    %410 = "llvm.getelementptr"(%9, %409) <{elem_type = i32, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc13)
    %411 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %412 = "llvm.insertelement"(%6, %411, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %413 = "llvm.extractelement"(%412, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %414 = "llvm.insertelement"(%2, %99, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %415 = "llvm.insertelement"(%414, %360, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %416 = "llvm.extractelement"(%415, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %417 = "llvm.extractelement"(%415, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %418 = "llvm.inline_asm"(%394, %416, %417, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %419 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %420 = "llvm.insertelement"(%6, %419, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %421 = "llvm.extractelement"(%420, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %422 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %423 = "llvm.insertelement"(%6, %422, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %424 = "llvm.extractelement"(%423, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %425 = "llvm.insertelement"(%2, %100, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %426 = "llvm.insertelement"(%425, %361, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %427 = "llvm.extractelement"(%426, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %428 = "llvm.extractelement"(%426, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %429 = "llvm.inline_asm"(%394, %427, %428, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %430 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %431 = "llvm.insertelement"(%6, %430, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %432 = "llvm.extractelement"(%431, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %433 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %434 = "llvm.insertelement"(%6, %433, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %435 = "llvm.extractelement"(%434, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %436 = "llvm.insertelement"(%2, %101, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %437 = "llvm.insertelement"(%436, %362, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %438 = "llvm.extractelement"(%437, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %439 = "llvm.extractelement"(%437, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %440 = "llvm.inline_asm"(%394, %438, %439, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %441 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %442 = "llvm.insertelement"(%6, %441, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %443 = "llvm.extractelement"(%442, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %444 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %445 = "llvm.insertelement"(%6, %444, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %446 = "llvm.extractelement"(%445, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %447 = "llvm.insertelement"(%2, %102, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %448 = "llvm.insertelement"(%447, %363, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %449 = "llvm.extractelement"(%448, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %450 = "llvm.extractelement"(%448, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %451 = "llvm.inline_asm"(%394, %449, %450, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %452 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %453 = "llvm.insertelement"(%6, %452, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %454 = "llvm.extractelement"(%453, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %455 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %456 = "llvm.insertelement"(%6, %455, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %457 = "llvm.extractelement"(%456, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %458 = "llvm.insertelement"(%2, %103, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %459 = "llvm.insertelement"(%458, %364, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %460 = "llvm.extractelement"(%459, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %461 = "llvm.extractelement"(%459, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %462 = "llvm.inline_asm"(%394, %460, %461, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %463 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %464 = "llvm.insertelement"(%6, %463, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %465 = "llvm.extractelement"(%464, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %466 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %467 = "llvm.insertelement"(%6, %466, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %468 = "llvm.extractelement"(%467, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %469 = "llvm.insertelement"(%2, %104, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %470 = "llvm.insertelement"(%469, %365, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %471 = "llvm.extractelement"(%470, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %472 = "llvm.extractelement"(%470, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %473 = "llvm.inline_asm"(%394, %471, %472, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %474 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %475 = "llvm.insertelement"(%6, %474, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %476 = "llvm.extractelement"(%475, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %477 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %478 = "llvm.insertelement"(%6, %477, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %479 = "llvm.extractelement"(%478, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %480 = "llvm.insertelement"(%2, %105, %23) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %481 = "llvm.insertelement"(%480, %366, %22) : (vector<2xi32>, i32, i32) -> vector<2xi32> loc(#loc13)
    %482 = "llvm.extractelement"(%481, %23) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %483 = "llvm.extractelement"(%481, %22) : (vector<2xi32>, i32) -> i32 loc(#loc13)
    %484 = "llvm.inline_asm"(%394, %482, %483, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", constraints = "r,r,r,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i32, i32, i1) -> !llvm.void loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc13)
    %485 = "llvm.load"(%403) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %486 = "llvm.insertelement"(%6, %485, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %487 = "llvm.extractelement"(%486, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    %488 = "llvm.load"(%410) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i32 loc(#loc13)
    %489 = "llvm.insertelement"(%6, %488, %23) : (vector<1xi32>, i32, i32) -> vector<1xi32> loc(#loc13)
    %490 = "llvm.extractelement"(%489, %23) : (vector<1xi32>, i32) -> i32 loc(#loc13)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %491 = "llvm.zext"(%108) : (i1) -> i8 loc(#loc14)
    %492 = "llvm.zext"(%368) : (i1) -> i8 loc(#loc14)
    %493 = "llvm.zext"(%109) : (i1) -> i8 loc(#loc14)
    %494 = "llvm.zext"(%369) : (i1) -> i8 loc(#loc14)
    %495 = "llvm.zext"(%110) : (i1) -> i8 loc(#loc14)
    %496 = "llvm.zext"(%370) : (i1) -> i8 loc(#loc14)
    %497 = "llvm.zext"(%111) : (i1) -> i8 loc(#loc14)
    %498 = "llvm.zext"(%371) : (i1) -> i8 loc(#loc14)
    %499 = "llvm.zext"(%112) : (i1) -> i8 loc(#loc14)
    %500 = "llvm.zext"(%372) : (i1) -> i8 loc(#loc14)
    %501 = "llvm.zext"(%113) : (i1) -> i8 loc(#loc14)
    %502 = "llvm.zext"(%373) : (i1) -> i8 loc(#loc14)
    %503 = "llvm.zext"(%114) : (i1) -> i8 loc(#loc14)
    %504 = "llvm.zext"(%374) : (i1) -> i8 loc(#loc14)
    %505 = "llvm.zext"(%115) : (i1) -> i8 loc(#loc14)
    %506 = "llvm.zext"(%375) : (i1) -> i8 loc(#loc14)
    %507 = "llvm.getelementptr"(%9, %393) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %508 = "llvm.insertelement"(%1, %491, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %509 = "llvm.insertelement"(%508, %492, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %510 = "llvm.extractelement"(%509, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %511 = "llvm.extractelement"(%509, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %512 = "llvm.inline_asm"(%507, %510, %511, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %513 = "llvm.getelementptr"(%9, %402) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %514 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %515 = "llvm.insertelement"(%0, %514, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %516 = "llvm.extractelement"(%515, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %517 = "llvm.getelementptr"(%9, %409) <{elem_type = i8, inbounds, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<3>, i32) -> !llvm.ptr<3> loc(#loc14)
    %518 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %519 = "llvm.insertelement"(%0, %518, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %520 = "llvm.extractelement"(%519, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %521 = "llvm.insertelement"(%1, %493, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %522 = "llvm.insertelement"(%521, %494, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %523 = "llvm.extractelement"(%522, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %524 = "llvm.extractelement"(%522, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %525 = "llvm.inline_asm"(%507, %523, %524, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %526 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %527 = "llvm.insertelement"(%0, %526, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %528 = "llvm.extractelement"(%527, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %529 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %530 = "llvm.insertelement"(%0, %529, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %531 = "llvm.extractelement"(%530, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %532 = "llvm.insertelement"(%1, %495, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %533 = "llvm.insertelement"(%532, %496, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %534 = "llvm.extractelement"(%533, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %535 = "llvm.extractelement"(%533, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %536 = "llvm.inline_asm"(%507, %534, %535, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %537 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %538 = "llvm.insertelement"(%0, %537, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %539 = "llvm.extractelement"(%538, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %540 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %541 = "llvm.insertelement"(%0, %540, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %542 = "llvm.extractelement"(%541, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %543 = "llvm.insertelement"(%1, %497, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %544 = "llvm.insertelement"(%543, %498, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %545 = "llvm.extractelement"(%544, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %546 = "llvm.extractelement"(%544, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %547 = "llvm.inline_asm"(%507, %545, %546, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %548 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %549 = "llvm.insertelement"(%0, %548, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %550 = "llvm.extractelement"(%549, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %551 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %552 = "llvm.insertelement"(%0, %551, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %553 = "llvm.extractelement"(%552, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %554 = "llvm.insertelement"(%1, %499, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %555 = "llvm.insertelement"(%554, %500, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %556 = "llvm.extractelement"(%555, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %557 = "llvm.extractelement"(%555, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %558 = "llvm.inline_asm"(%507, %556, %557, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %559 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %560 = "llvm.insertelement"(%0, %559, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %561 = "llvm.extractelement"(%560, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %562 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %563 = "llvm.insertelement"(%0, %562, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %564 = "llvm.extractelement"(%563, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %565 = "llvm.insertelement"(%1, %501, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %566 = "llvm.insertelement"(%565, %502, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %567 = "llvm.extractelement"(%566, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %568 = "llvm.extractelement"(%566, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %569 = "llvm.inline_asm"(%507, %567, %568, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %570 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %571 = "llvm.insertelement"(%0, %570, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %572 = "llvm.extractelement"(%571, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %573 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %574 = "llvm.insertelement"(%0, %573, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %575 = "llvm.extractelement"(%574, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %576 = "llvm.insertelement"(%1, %503, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %577 = "llvm.insertelement"(%576, %504, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %578 = "llvm.extractelement"(%577, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %579 = "llvm.extractelement"(%577, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %580 = "llvm.inline_asm"(%507, %578, %579, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %581 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %582 = "llvm.insertelement"(%0, %581, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %583 = "llvm.extractelement"(%582, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %584 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %585 = "llvm.insertelement"(%0, %584, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %586 = "llvm.extractelement"(%585, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %587 = "llvm.insertelement"(%1, %505, %23) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %588 = "llvm.insertelement"(%587, %506, %22) : (vector<2xi8>, i8, i32) -> vector<2xi8> loc(#loc14)
    %589 = "llvm.extractelement"(%588, %23) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %590 = "llvm.extractelement"(%588, %22) : (vector<2xi8>, i32) -> i8 loc(#loc14)
    %591 = "llvm.inline_asm"(%507, %589, %590, %7) <{asm_dialect = 0 : i64, asm_string = "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", constraints = "r,h,h,b", has_side_effects, operand_attrs = []}> : (!llvm.ptr<3>, i8, i8, i1) -> !llvm.void loc(#loc14)
    "nvvm.barrier0"() : () -> () loc(#loc14)
    %592 = "llvm.load"(%513) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %593 = "llvm.insertelement"(%0, %592, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %594 = "llvm.extractelement"(%593, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %595 = "llvm.load"(%517) <{ordering = 0 : i64}> : (!llvm.ptr<3>) -> i8 loc(#loc14)
    %596 = "llvm.insertelement"(%0, %595, %23) : (vector<1xi8>, i8, i32) -> vector<1xi8> loc(#loc14)
    %597 = "llvm.extractelement"(%596, %23) : (vector<1xi8>, i32) -> i8 loc(#loc14)
    %598 = "llvm.trunc"(%516) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %599 = "llvm.trunc"(%520) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %600 = "llvm.trunc"(%528) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %601 = "llvm.trunc"(%531) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %602 = "llvm.trunc"(%539) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %603 = "llvm.trunc"(%542) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %604 = "llvm.trunc"(%550) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %605 = "llvm.trunc"(%553) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %606 = "llvm.trunc"(%561) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %607 = "llvm.trunc"(%564) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %608 = "llvm.trunc"(%572) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %609 = "llvm.trunc"(%575) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %610 = "llvm.trunc"(%583) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %611 = "llvm.trunc"(%586) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %612 = "llvm.trunc"(%594) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %613 = "llvm.trunc"(%597) <{overflowFlags = #llvm.overflow<none>}> : (i8) -> i1 loc(#loc14)
    %614 = "llvm.getelementptr"(%arg1, %406) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %615 = "llvm.getelementptr"(%arg1, %413) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %616 = "llvm.getelementptr"(%arg1, %421) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %617 = "llvm.getelementptr"(%arg1, %424) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %618 = "llvm.getelementptr"(%arg1, %432) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %619 = "llvm.getelementptr"(%arg1, %435) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %620 = "llvm.getelementptr"(%arg1, %443) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %621 = "llvm.getelementptr"(%arg1, %446) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %622 = "llvm.getelementptr"(%arg1, %454) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %623 = "llvm.getelementptr"(%arg1, %457) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %624 = "llvm.getelementptr"(%arg1, %465) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %625 = "llvm.getelementptr"(%arg1, %468) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %626 = "llvm.getelementptr"(%arg1, %476) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %627 = "llvm.getelementptr"(%arg1, %479) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %628 = "llvm.getelementptr"(%arg1, %487) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %629 = "llvm.getelementptr"(%arg1, %490) <{elem_type = f32, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr<1>, i32) -> !llvm.ptr<1> loc(#loc15)
    %630 = "llvm.insertelement"(%8, %213, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %631 = "llvm.bitcast"(%630) : (vector<1xf32>) -> i32 loc(#loc16)
    %632 = "llvm.inline_asm"(%631, %614, %598) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %633 = "llvm.insertelement"(%8, %224, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %634 = "llvm.bitcast"(%633) : (vector<1xf32>) -> i32 loc(#loc16)
    %635 = "llvm.inline_asm"(%634, %615, %599) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %636 = "llvm.insertelement"(%8, %235, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %637 = "llvm.bitcast"(%636) : (vector<1xf32>) -> i32 loc(#loc16)
    %638 = "llvm.inline_asm"(%637, %616, %600) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %639 = "llvm.insertelement"(%8, %246, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %640 = "llvm.bitcast"(%639) : (vector<1xf32>) -> i32 loc(#loc16)
    %641 = "llvm.inline_asm"(%640, %617, %601) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %642 = "llvm.insertelement"(%8, %257, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %643 = "llvm.bitcast"(%642) : (vector<1xf32>) -> i32 loc(#loc16)
    %644 = "llvm.inline_asm"(%643, %618, %602) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %645 = "llvm.insertelement"(%8, %268, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %646 = "llvm.bitcast"(%645) : (vector<1xf32>) -> i32 loc(#loc16)
    %647 = "llvm.inline_asm"(%646, %619, %603) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %648 = "llvm.insertelement"(%8, %279, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %649 = "llvm.bitcast"(%648) : (vector<1xf32>) -> i32 loc(#loc16)
    %650 = "llvm.inline_asm"(%649, %620, %604) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %651 = "llvm.insertelement"(%8, %290, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %652 = "llvm.bitcast"(%651) : (vector<1xf32>) -> i32 loc(#loc16)
    %653 = "llvm.inline_asm"(%652, %621, %605) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %654 = "llvm.insertelement"(%8, %316, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %655 = "llvm.bitcast"(%654) : (vector<1xf32>) -> i32 loc(#loc16)
    %656 = "llvm.inline_asm"(%655, %622, %606) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %657 = "llvm.insertelement"(%8, %322, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %658 = "llvm.bitcast"(%657) : (vector<1xf32>) -> i32 loc(#loc16)
    %659 = "llvm.inline_asm"(%658, %623, %607) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %660 = "llvm.insertelement"(%8, %328, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %661 = "llvm.bitcast"(%660) : (vector<1xf32>) -> i32 loc(#loc16)
    %662 = "llvm.inline_asm"(%661, %624, %608) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %663 = "llvm.insertelement"(%8, %334, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %664 = "llvm.bitcast"(%663) : (vector<1xf32>) -> i32 loc(#loc16)
    %665 = "llvm.inline_asm"(%664, %625, %609) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %666 = "llvm.insertelement"(%8, %340, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %667 = "llvm.bitcast"(%666) : (vector<1xf32>) -> i32 loc(#loc16)
    %668 = "llvm.inline_asm"(%667, %626, %610) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %669 = "llvm.insertelement"(%8, %346, %23) : (vector<1xf32>, f32, i32) -> vector<1xf32> loc(#loc16)
    %670 = "llvm.bitcast"(%669) : (vector<1xf32>) -> i32 loc(#loc16)
    %671 = "llvm.inline_asm"(%670, %627, %611) <{asm_dialect = 0 : i64, asm_string = "@$2 st.global.b32 [ $1 + 0 ], { $0 };", constraints = "r,l,b", has_side_effects, operand_attrs = []}> : (i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc16)
    %672 = "llvm.insertelement"(%8, %352, %23) 